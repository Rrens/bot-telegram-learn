#!/usr/bin/env python
import logging
from time import sleep, time
from xml.dom.pulldom import parseString
import pymongo
import telegram
import requests
import json
import string
import random
import gridfs
import os
import ssl
import clickhouse_connect
import base64
import io
from PIL import Image
import pandas as pd
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup,InlineKeyboardButton, InlineKeyboardMarkup
from telegram import message
from telegram import bot
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler,CallbackQueryHandler, InlineQueryHandler, inlinequeryhandler
from pymongo import MongoClient
from datetime import datetime
from urllib3.exceptions import InsecureRequestWarning
from urllib3 import disable_warnings

# os.environ['https_proxy'] = 'https://10.37.190.29:8080'
os.environ['HTTPS_PROXY'] = 'https://10.251.127.90:8080'

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# logging.getLogger("telegram").setLevel(logging.CRITICAL)
# logger = logging.getLogger(__name__)
logger = logging.getLogger(__name__)
# ssl._create_default_https_context = ssl._create_unverified_context
# disable_warnings(InsecureRequestWarning)


# log_bot = '128548200:AAE9dDr0O0h1lPJzk1LVlcKh6IZ40vi8jH4'
log_bot = '7564996771:AAHKzm0v3pApmuK9GnWXn_z9aXc6yh4j4p8' # Testing OCHABOT
chatid_ineom = '-1001980898312'
chatid_chrono = '-1001904939048'
chatid_inap = '-1001933667172'
chatid_fm = '-1001952719896'
chatid_c = '-1001922857399'
chatid_a = '-1001867729052'
chatid_pm = '-1001979737426'
chatid_ds = '-1001937877357'
chatid_ts = '-1001983531077'
chatid_davp = '-1001973110719'
chatid_reuser = '-1001931385556'
chatid_covmo = '-1002006728917'
chatid_traffica = '-1002021150101'

bot_log = telegram.Bot(token=log_bot)

def splitting(return_text):
    c, text = 0, ""
    return_list = []
    for line in return_text.splitlines():
        c += len(line)
        if c >= 3000:
            return_list.append(text)
            c, text = 0, ""
        text += line+"\n"
    return_list.append(text)
    return return_list


#LOG
def log_bot(update: Update, perintah):
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    tools = str(perintah)


    ##FAULT MANAGEMENT
    check_dav = tools == 'DAVINA'
    check_gra = tools == 'GRAFANA'
    check_inap = tools == 'INAP'
    check_ineom = tools == 'INEOM'
    check_nacel = tools == 'NACEL'
    check_nadin = tools == 'NADIN'
    check_sya = tools == 'SYANTIC'
    check_tab = tools == 'TABLUE'
    check_ossera = tools == 'OSSERA'

    ##CONFIGURATION
    check_chrono = tools == 'CHRONO'
    check_crq = tools == 'CRQ'
    check_lacima = tools == 'LACIMA'
    check_icam = tools == 'ICAM'
    check_nava = tools == 'NAVA'
    check_traversa = tools == 'TRAVERSA'

    #ADMINSTRATION
    check_agata = tools == 'AGATA'
    check_amesty = tools == 'AMESTY'
    check_davinci = tools == 'DAVINCI'
    check_eatp = tools == 'EATP'
    check_etsa = tools == 'ETSA'
    check_ewonder = tools == 'EWONDER'
    check_felisa = tools == 'FELISA'
    check_fiola = tools == 'FIOLA'
    check_lolita = tools == 'LOLITA'
    check_scarlet = tools == 'SCARLETT'
    check_smartkey = tools == 'SMARTKEY'
    check_tiara = tools == 'TIARA'
    check_tpas = tools == 'TPAS'
    check_tpower = tools == 'TPOWER'

    #PERFORMANCE MANAGEMENT
    check_csone = tools == 'CSON'
    check_cyclops = tools == 'CYCLOPS'
    check_evita = tools == 'EVITA'
    check_ipdm = tools == 'IPDM'
    check_ironman = tools == 'IRONMAN'
    check_smartcare = tools == 'SMARTCARE'
    check_arthemis = tools == 'ARTHEMIS'
    check_kalix = tools == 'KALIX'
    check_ookla = tools == 'OOKLA'
    check_suropati = tools == 'SUROPATI'
    check_twamp = tools == 'TWAMP'
    check_zabbix = tools == 'ZABBIX'

    #DATA SOURCE
    check_kafka = tools == 'KAFKA'
    check_ndl = tools == 'NDL'
    check_ndm = tools == 'NDM'
    check_oss = tools == 'OSS'
    check_ixia = tools == 'IXIA'

    #TICKETING SYSTEM
    check_cts = tools == 'CTS'
    check_remedy = tools == 'REMEDY'
    check_sdm = tools == 'SDM'

    #TICKETING SYSTEM
    check_davp = tools == 'AVP'

    check_covmo = tools == 'COVMO'

    check_traffica = tools == 'TRAFFICA'
    
    #REQUESTS USER
    check_requser = tools == 'REQ_USER'

    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
       
    ##FAULT MANAGEMENT
    if check_sya is True or check_dav is True or check_gra is True or check_tab is True or check_nadin is True or check_nacel is True or check_ossera is True:
        app_name = str(tools)
        query = f"select expert from production.helpdesk_expert where application_name = '{app_name}'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_fm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_fm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                

    ##INEOM
    elif check_ineom is True:
        query = f"select expert from production.helpdesk_expert where application_name = 'INEOM'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '':
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ineom,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ineom,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
    ##INAP
    elif check_inap is True:
        query = f"select expert from production.helpdesk_expert where application_name = 'INAP'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '':
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_inap,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_inap,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

    ##CONFIGURATION
    ##CHRONO
    elif check_chrono is True or check_lacima is True or check_icam is True:
        app_name = str(tools)
        query = f"select expert from production.helpdesk_expert where application_name = '{app_name}'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_chrono,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_chrono,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

    #ALL CONFIG
    elif check_crq is True or check_nava is True or check_traversa is True:
        app_name = str(tools)
        query = f"select expert from production.helpdesk_expert where application_name = '{app_name}'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_c,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_c,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

    #ADMINSTRATION
    elif check_agata is True or check_amesty is True or check_davinci is True or check_eatp is True or check_etsa is True or check_ewonder is True or check_felisa is True or check_fiola is True or check_lolita is True or check_scarlet is True or check_tiara is True or check_tpas is True or check_tpower is True or check_smartkey is True:
        app_name = str(tools)
        query = f"select expert from production.helpdesk_expert where application_name = '{app_name}'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_a,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_a,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

    #PERFORMANCE MANAGEMENT
    elif check_csone is True or check_cyclops is True or check_evita is True or check_ipdm is True or check_ironman is True or check_smartcare is True or check_arthemis is True or check_kalix is True or check_ookla is True or check_suropati is True or check_twamp is True or check_zabbix is True:
        app_name = str(tools)
        query = f"select expert from production.helpdesk_expert where application_name = '{app_name}'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_pm,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_pm,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
    
    #DATA SOURCE
    elif check_kafka is True or check_ndl is True or check_ndm is True or check_oss is True or check_ixia is True:
        app_name = str(tools)
        query = f"select expert from production.helpdesk_expert where application_name = '{app_name}'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ds,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ds,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

    #TICKETING SYSTEM
    elif check_cts is True or check_remedy is True or check_sdm is True:
        app_name = str(tools)
        query = f"select expert from production.helpdesk_expert where application_name = '{app_name}'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_ts,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_ts,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

    #DASHBOARD AVP
    elif check_davp is True:
        query = f"select expert from production.helpdesk_expert where application_name = 'AVP'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_davp,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_davp,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
    elif check_covmo is True:
        query = f"select expert from production.helpdesk_expert where application_name = 'COVMO'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_covmo,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_covmo,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
    elif check_traffica is True:
        query = f"select expert from production.helpdesk_expert where application_name = 'TRAFFICA'"
        data = client.command(query)
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','a')
        log_bot.write(",{}".format(data))
        log_bot.close()
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt"):
            data_expert = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_expert.txt','r')
            data_expert = data_expert.read().split(',')
            del data_expert[0]
            data_expert = str(data_expert).replace("['","").replace("']","").split('\\n')
            count_expert = len(data_expert)
            if data_expert[0] == '' :
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : -',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 1:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 2:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 3:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 4:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 5:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 6:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 7:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 8:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 9:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            elif count_expert == 10:
                query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                data = client.command(query)
                full_name = str(data[0]).title()
                to_name_1 = str(data_expert[0])
                to_name_2 = str(data_expert[1])
                to_name_3 = str(data_expert[2])
                to_name_4 = str(data_expert[3])
                to_name_5 = str(data_expert[4])
                to_name_6 = str(data_expert[5])
                to_name_7 = str(data_expert[6])
                to_name_8 = str(data_expert[7])
                to_name_9 = str(data_expert[8])
                to_name_10 = str(data_expert[9])
                ticket = data[6]
                category = str(tools)
                problem_note = str(data[7]).replace('\\n',' ')
                date = str(data[11]).replace('-',' ')
                requests = 'https://t.me/{}'.format(data[1])
                to_1 = 'https://t.me/{}'.format(data_expert[0])
                to_2 = 'https://t.me/{}'.format(data_expert[1])
                to_3 = 'https://t.me/{}'.format(data_expert[2])
                to_4 = 'https://t.me/{}'.format(data_expert[3])
                to_5 = 'https://t.me/{}'.format(data_expert[4])
                to_6 = 'https://t.me/{}'.format(data_expert[5])
                to_7 = 'https://t.me/{}'.format(data_expert[6])
                to_8 = 'https://t.me/{}'.format(data_expert[7])
                to_9 = 'https://t.me/{}'.format(data_expert[8])
                to_10 = 'https://t.me/{}'.format(data_expert[9])
                division = data[16]
                bot_log.sendChatAction(chat_id=chatid_traffica,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_traffica,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nAplication : #{category}\nTicket : #{ticket}\nSummary Case : *{problem_note} ↔️ ({str(data[14])})*\nRequestor : [{full_name}]({requests})\nDivision : {division}\nHandle by : [{to_name_1}]({to_1}), [{to_name_2}]({to_2}), [{to_name_3}]({to_3}), [{to_name_4}]({to_4}), [{to_name_5}]({to_5}), [{to_name_6}]({to_6}), [{to_name_7}]({to_7}), [{to_name_8}]({to_8}), [{to_name_9}]({to_9}), [{to_name_10}]({to_10})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

    #REQUETS USER
    elif check_requser is True:
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        full_name = str(data[0]).title()
        requests = 'https://t.me/{}'.format(data[1])
        now = datetime.now() # current date and time
        date = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
        x = []
        query = f"select * from production.helpdesk_requser where chatid_telegram = '{chatid_telegram}'"
        data_requser = client.command(query)
        data_list = str(data_requser).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            if 'open' in data[5]:
                bot_log.sendChatAction(chat_id=chatid_reuser,action=telegram.ChatAction.TYPING)
                bot_log.send_message(chat_id=chatid_reuser,text=f'*{full_name}* has open ticket with the following details:\n\nCreation Date : {date}\nCategory : #{data[2]}\nUserdomain : {data[1]}\nURL Link Dashboard : {data[3]}\nDescription : {data[4]}\nRequestor Name : [{full_name}]({requests})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                

#KONDISI
def cancel1(update: Update, _: CallbackContext) -> int:
    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
    update.message.reply_text('Terima kasih telah akses di *HelpdeskBOT*\nKlik /start',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END
def cancel(update: Update, _: CallbackContext) -> int:
    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
    update.message.reply_text('Terima kasih telah akses di *HelpdeskBOT*\nKlik /menu',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END
def batal_home(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
    except:
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END
def batal_ineom(update: Update, _: CallbackContext) -> None:
    channel_telegram = 'https://t.me/+rqEJdo9UfetkOTc9'
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk INEOM", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    except:
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk INEOM", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    return ConversationHandler.END
def batal_fm(update: Update, _: CallbackContext) -> None:
    channel_telegram = 'https://t.me/+b5iatk3K_qAwNDJl'
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Fault Management", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    except:
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Fault Management", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    return ConversationHandler.END
def batal_c(update: Update, _: CallbackContext) -> None:
    channel_telegram = 'https://t.me/+wYahLEfjQ6RmZmQ1'
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Configuration", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    except:
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Configuration", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    return ConversationHandler.END
def batal_a(update: Update, _: CallbackContext) -> None:
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Administration", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    except:
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Administration", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    return ConversationHandler.END
def batal_pm(update: Update, _: CallbackContext) -> None:
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Performance", url=channel_telegram)
        )
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    except:
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Performance", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    return ConversationHandler.END
def batal_ds(update: Update, _: CallbackContext) -> None:
    channel_telegram = 'https://t.me/+BTI-04Iares4ZWU9'
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Data Source", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    except:
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Data Source", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    return ConversationHandler.END
def batal_ts(update: Update, _: CallbackContext) -> None:
    channel_telegram = 'https://t.me/+Myi-MQxu3Ao0OGI1'
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Ticketing System", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    except:
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Ticketing System", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    return ConversationHandler.END
def batal_davp(update: Update, _: CallbackContext) -> None:
    channel_telegram = 'https://t.me/+yzTXsznnQ_NjOTU1'
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Dashboard", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    except:
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk Dashboard", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    return ConversationHandler.END
def batal_chrono(update: Update, _: CallbackContext) -> None:
    channel_telegram = 'https://t.me/+9sVF02CkDIsyYWQ1'
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk CHRONO & LACIMA", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    except:
        keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton(text="#Helpdesk CHRONO & LACIMA", url=channel_telegram)
        )
        query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik channel dibawah ini atau klik /menu",parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    return ConversationHandler.END

def batal(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END


def timeout(update: Update, _: CallbackContext) -> None:
    try:
        first_name = update.message.from_user.first_name
        message_id = update.message.message_id+3
        chat_id = update.message.from_user.id
        bot_log.delete_message(chat_id,message_id)
        first_name = update.message.from_user.first_name
        message_id = update.message.message_id+2
        chat_id = update.message.from_user.id
        bot_log.delete_message(chat_id,message_id)
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text('Maaf Kak *{}*, session Anda sudah habis\nKlik /menu'.format(first_name),parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())
    except:
        try:
            first_name = update.message.from_user.first_name
            message_id = update.message.message_id+2
            chat_id = update.message.from_user.id
            bot_log.delete_message(chat_id,message_id)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text('Maaf Kak *{}*, session Anda sudah habis\nKlik /menu'.format(first_name),parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())
        except:
            first_name = update.message.from_user.first_name
            message_id = update.message.message_id+1
            chat_id = update.message.from_user.id
            bot_log.delete_message(chat_id,message_id)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text('Maaf Kak *{}*, session Anda sudah habis\nKlik /menu'.format(first_name),parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())

def timeout_with_inline(update, context):
    try:
        first_name = update.callback_query.from_user.first_name
        chat_id = update.callback_query.message.chat_id
        message_id_1 = update.callback_query.message.message_id+1
        message_id_2 = update.callback_query.message.message_id+2
        bot_log.delete_message(chat_id,message_id_1)
        bot_log.delete_message(chat_id,message_id_2)
        query = update.callback_query
        query.answer()
        query.message.reply_text(text='Maaf Kak *{}*, session Anda sudah habis\nKlik /menu'.format(first_name),parse_mode=telegram.ParseMode.MARKDOWN)
    except telegram.error.BadRequest:
        try:
            first_name = update.callback_query.from_user.first_name
            chat_id = update.callback_query.message.chat_id
            message_id_3 = update.callback_query.message.message_id+3
            message_id_2 = update.callback_query.message.message_id+2
            bot_log.delete_message(chat_id,message_id_3)
            bot_log.delete_message(chat_id,message_id_2)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text='Maaf Kak *{}*, session Anda sudah habis\nKlik /menu'.format(first_name),parse_mode=telegram.ParseMode.MARKDOWN)
        except telegram.error.BadRequest:
            try:
                first_name = update.callback_query.from_user.first_name
                chat_id = update.callback_query.message.chat_id
                message_id_2 = update.callback_query.message.message_id+2
                bot_log.delete_message(chat_id,message_id_2)
                query = update.callback_query
                query.answer()
                query.message.reply_text(text='Maaf Kak *{}*, session Anda sudah habis\nKlik /menu'.format(first_name),parse_mode=telegram.ParseMode.MARKDOWN)
            except telegram.error.BadRequest:
                try:
                    first_name = update.callback_query.from_user.first_name
                    query = update.callback_query
                    query.edit_message_text(text='Maaf Kak *{}*, session Anda sudah habis\nKlik /menu'.format(first_name),parse_mode=telegram.ParseMode.MARKDOWN)
                except telegram.error.BadRequest:
                    first_name = update.callback_query.from_user.first_name
                    chat_id = update.callback_query.message.chat_id
                    message_id_2 = update.callback_query.message.message_id+0
                    bot_log.delete_message(chat_id,message_id_2)
                    query = update.callback_query
                    query.answer()
                    query.message.reply_text(text='Maaf Kak *{}*, session Anda sudah habis\nKlik /menu'.format(first_name),parse_mode=telegram.ParseMode.MARKDOWN)

MENU, REGISTRATION, CLOSED_ADMIN_TICKET,CLOSED_ADMIN_TICKET_END, FEEDBACK, END_SYA, END_DAV, END_GRA, END_TAB, END_NCL, END_NDN, END_INAP, END_NICE,END_OSSERA, END_PMSOSSERA, END_CHR, END_CRQ, END_ICAM, END_LCM, END_NAV, END_TVS, END_AGT, END_AMT, END_DVC, END_EATP, END_ETSA, END_EWONDER, END_FELISA, END_FIOLA, END_LOLITA, END_SCARLET,END_SMARTKEY, END_TIARA, END_TPAS, END_TPOWER, END_COVMO, END_CSONE, END_CYCLOPS, END_EVITA, END_IPDM, END_IRONMAN, END_SMARTCARE, END_KAFKA, END_NDM, END_NDL, END_OSS,END_IXIA, END_CTS, END_REMEDY, END_SDM, END_DAVP, END_REG_FM_DAVINA, END_REG_FM_GRAFANA, END_REG_FM_INAP, END_REG_FM_INEOM, END_REG_FM_NACEL, END_REG_FM_NADIN, END_REG_FM_SYANTIC, END_REG_FM_TABLUE, END_REG_C_CHRONO, END_REG_C_CRQ, END_REG_C_LACIMA, END_REG_C_NAVA, END_REG_C_TRAVERSA, END_REG_A_AGATA, END_REG_A_AMESTY, END_REG_A_DAVINCI, END_REG_A_EATP, END_REG_A_ETSA, END_REG_A_EWONDER, END_REG_A_FELISA, END_REG_A_FIOLA, END_REG_A_LOLITA, END_REG_A_SCARLET, END_REG_A_TIARA, END_REG_A_TPAS, END_REG_A_TPOWER, END_REG_PM_COVMO, END_REG_PM_CSONE, END_REG_PM_EVITA, END_REG_PM_IPDM, END_REG_PM_IRONMAN, END_REG_PM_SMARTCARE, END_REG_DS_KAFKA, END_REG_DS_NDL, END_REG_DS_NDM, END_REG_DS_OSS, END_REG_TS_CTS, END_REG_TS_REMEDY, END_REG_TS_SDM, END_REG_DAVP_AVP, END_DEL_FM_DAVINA, END_DEL_FM_GRAFANA, END_DEL_FM_INAP, END_DEL_FM_INEOM, END_DEL_FM_NACEL, END_DEL_FM_NADIN, END_DEL_FM_SYANTIC, END_DEL_FM_TABLUE, END_DEL_C_CHRONO, END_DEL_C_CRQ, END_DEL_C_LACIMA, END_DEL_C_NAVA, END_DEL_C_TRAVERSA, END_DEL_A_AGATA, END_DEL_A_AMESTY, END_DEL_A_DAVINCI, END_DEL_A_EATP, END_DEL_A_ETSA, END_DEL_A_EWONDER, END_DEL_A_FELISA, END_DEL_A_FIOLA, END_DEL_A_LOLITA, END_DEL_A_SCARLET, END_DEL_A_TIARA, END_DEL_A_TPAS, END_DEL_A_TPOWER, END_DEL_PM_COVMO, END_DEL_PM_CSONE, END_DEL_PM_EVITA, END_DEL_PM_IPDM, END_DEL_PM_IRONMAN, END_DEL_PM_SMARTCARE, END_DEL_DS_KAFKA, END_DEL_DS_NDL, END_DEL_DS_NDM, END_DEL_DS_OSS,END_DEL_DS_IXIA, END_DEL_TS_CTS, END_DEL_TS_REMEDY, END_DEL_TS_SDM, END_DEL_DAVP_AVP, M5_SM_REQ_USER_USD, M5_SM_REQ_USER_CTGAPP, M5_SM_REQ_USER_URL, M5_SM_REQ_USER_DSP, M5_SM_CLOSEDREQUSER_USD,END_M2_C_CHRONO_CHECK, REG_USER_MANUAL,END_ARTHEMIS, END_OOKLA, END_SUROPATI, END_KALIX, END_TRAFFICA, END_ZABBIX,END_TWAMP, END_REG_FM_OSSERA, END_REG_A_SMARTKEY, END_REG_PM_ARTHEMIS, END_REG_PM_KALIX, END_REG_PM_OOKLA, END_REG_PM_SUROPATI, END_REG_PM_TRAFFICA, END_REG_PM_TWAMP, END_REG_PM_ZABBIX, END_REG_DS_IXIA, END_DEL_FM_OSSERA, END_DEL_A_SMARTKEY, END_DEL_PM_ARTHEMIS, END_DEL_PM_KALIX, END_DEL_PM_OOKLA, END_DEL_PM_SUROPATI, END_DEL_PM_TRAFFICA, END_DEL_PM_TWAMP, END_DEL_PM_ZABBIX, END_DEL_PM_IXIA = range(166)

MENU_UTAMA, MENU_HELP, BATAL, BATAL_HOME, BATAL_FM, BATAL_C, BATAL_A, BATAL_PM, BATAL_DS, BATAL_TS, BATAL_DAVP, BATAL_NICE, BATAL_CHRONO, M1_FM, M2_C, M3_A, M4_PM, M5_SM, M6_DS, M7_TS, M8_DAVP, CLOSED_TICKET_FM, CLOSED_TICKET_C, CLOSED_TICKET_A, CLOSED_TICKET_PM, CLOSED_TICKET_SM, CLOSED_TICKET_DS, CLOSED_TICKET_TS, CLOSED_TICKET_DAVP,CLOSED_TICKET_COVMO,CLOSED_TICKET_TRAFFICA, CLOSED_TICKET_YES, CLOSED_TICKET_NO, FEEDBACK_ACC, M1_FM_INAP,M1_FM_INAP_CREATE_1,M1_FM_INAP_CREATE_2,M1_FM_INAP_CREATE_3,M1_FM_INAP_CREATE_4, M1_FM_NICE,M1_FM_OSSERA,M1_FM_PSMOSSERA, ASK_OSSERA, M1_FM_DASH, M2_C_CHRONO,M2_C_CHRONO_CHECK, M2_C_CHRONO_TICKET, M2_C_CRQ, M2_C_NAVA, M2_C_TRAVERSA, M2_C_LACIMA, M3_A_AGATA, M3_A_AMT, M3_A_DVC, M3_A_EATP, M3_A_ETSA, M3_A_EWONDER, M3_A_FELISA, M3_A_LOLITA, M3_A_SCARLET,M3_A_SMARTKEY,ASK_SMARTKEY, M3_A_SMARTKEY_CREATE_1, M3_A_SMARTKEY_CREATE_2, M3_A_SCARLET_CREATE_1, M3_A_SCARLET_CREATE_2, M3_A_SCARLET_CREATE_3, M3_A_TIARA, M3_A_TPAS, M3_A_TPAS_LISTCTDO,M3_A_TPAS_LISTCTDO_1,M3_A_TPAS_LISTCTDO_2,M3_A_TPAS_LISTCTDO_3,M3_A_TPAS_LISTCTDO_4,M3_A_TPAS_LISTCTDO_5,M3_A_TPAS_LISTCTDO_6,M3_A_TPAS_LISTCTDO_7,M3_A_TPAS_LISTCTDO_8,M3_A_TPAS_LISTCTDO_9,M3_A_TPAS_LISTCTDO_10,M3_A_TPAS_LISTCTDO_11, M3_A_TPAS_CREATE_1,M3_A_TPAS_CREATE_2,M3_A_TPAS_CREATE_3,M3_A_TPAS_CREATE_4,M3_A_TPAS_CREATE_5, M3_A_TPOWER, M9_COVMO,M9_COVMO_CREATE_1, M9_COVMO_CREATE_2, M9_COVMO_CREATE_3, M9_COVMO_CREATE_4,M4_PM_CSONE,M4_PM_CYCLOPS,PHOTO_CYCLOPS_YES,PHOTO_CYCLOPS_NO,ASK_CYCLOPS, M4_PM_EVITA, M4_PM_IPDM, M4_PM_IRONMAN, M4_PM_SMARTCARE,M4_PM_ARTHEMIS, M4_PM_OOKLA, M4_PM_SUROPATI, M4_PM_KALIX, M10_TRAFFICA,M4_PM_TWAMP,ASK_TWAMP, M4_PM_TWAMP_CREATE_1, ASK_ARTHEMIS, M4_PM_ARTHEMIS_CREATE_1, M4_PM_ARTHEMIS_CREATE_2, ASK_KALIX, M4_PM_KALIX_CREATE_1, M4_PM_KALIX_CREATE_2, ASK_OOKLA, M4_PM_OOKLA_CREATE_1, M4_PM_OOKLA_CREATE_2, ASK_SUROPATI, M4_PM_SUROPATI_CREATE_1, M4_PM_SUROPATI_CREATE_2, ASK_TRAFFICA, M10_TRAFFICA_CREATE_1, M10_TRAFFICA_CREATE_2, M10_TRAFFICA_CREATE_3, M10_TRAFFICA_CREATE_4,M10_TRAFFICA_CREATE_5,M4_PM_ZABBIX, ASK_ZABBIX, M4_PM_SMARTCARE_CREATE_1,M4_PM_SMARTCARE_CREATE_2, M4_PM_SMARTCARE_CREATE_3,M4_PM_SMARTCARE_CREATE_4,M4_PM_SMARTCARE_CREATE_5,M4_PM_SMARTCARE_CREATE_6,M4_PM_SMARTCARE_CREATE_7,M4_PM_SMARTCARE_CREATE_8,M4_PM_SMARTCARE_CREATE_9,M4_PM_SMARTCARE_CREATE_10,M4_PM_SMARTCARE_CREATE_11,M4_PM_SMARTCARE_CREATE_12,M4_PM_SMARTCARE_CREATE_13, M5_SM_UAM, M5_SM_PAM, M5_SM_REQ_USER,M5_SM_EXPERT,M5_SM_CLOSEDREQUSER, REG_EXPERT, DEL_EXPERT, REG_FM, REG_FM_DAVINA, REG_FM_GRAFANA, REG_FM_INAP, REG_FM_INEOM, REG_FM_NACEL, REG_FM_NADIN, REG_FM_SYANTIC, REG_FM_TABLUE, REG_C, REG_C_CHRONO, REG_C_CRQ, REG_C_LACIMA, REG_C_NAVA, REG_C_TRAVERSA, REG_A, REG_A_AGATA, REG_A_AMESTY, REG_A_DAVINCI, REG_A_EATP, REG_A_ETSA, REG_A_EWONDER, REG_A_FELISA, REG_A_FIOLA, REG_A_LOLITA, REG_A_SCARLET, REG_A_TIARA, REG_A_TPAS, REG_A_TPOWER, REG_PM, REG_PM_COVMO, REG_PM_CSONE, REG_PM_EVITA, REG_PM_IPDM, REG_PM_IRONMAN, REG_PM_SMARTCARE, REG_DS, REG_DS_KAFKA, REG_DS_NDL, REG_DS_NDM, REG_DS_OSS, REG_TS, REG_TS_CTS, REG_TS_REMEDY, REG_TS_SDM, REG_DAVP, REG_DAVP_AVP, DEL_FM, DEL_FM_DAVINA, DEL_FM_GRAFANA, DEL_FM_INAP, DEL_FM_INEOM, DEL_FM_NACEL, DEL_FM_NADIN, DEL_FM_SYANTIC, DEL_FM_TABLUE, DEL_C, DEL_C_CHRONO, DEL_C_CRQ, DEL_C_LACIMA, DEL_C_NAVA, DEL_C_TRAVERSA, DEL_A, DEL_A_AGATA, DEL_A_AMESTY, DEL_A_DAVINCI, DEL_A_EATP, DEL_A_ETSA, DEL_A_EWONDER, DEL_A_FELISA, DEL_A_FIOLA, DEL_A_LOLITA, DEL_A_SCARLET, DEL_A_TIARA, DEL_A_TPAS, DEL_A_TPOWER, DEL_PM, DEL_PM_COVMO, DEL_PM_CSONE, DEL_PM_EVITA, DEL_PM_IPDM, DEL_PM_IRONMAN, DEL_PM_SMARTCARE, DEL_DS, DEL_DS_KAFKA, DEL_DS_NDL, DEL_DS_NDM, DEL_DS_OSS, DEL_TS, DEL_TS_CTS, DEL_TS_REMEDY, DEL_TS_SDM, DEL_DAVP, DEL_DAVP_AVP, M6_DS_NDM,M6_DS_NDM_CREATE_1,M6_DS_NDM_CREATE_2, M6_DS_NDL, M6_DS_OSS,M6_DS_IXIA, ASK_IXIA, M6_DS_IXIA_CREATE_1, M6_DS_IXIA_CREATE_2, M6_DS_IXIA_CREATE_3, M6_DS_IXIA_CREATE_4, M6_DS_IXIA_CREATE_5, M6_DS_KAFKA, M7_TS_CTS, M7_TS_REMEDY, M7_TS_SDM, M1_FM_DASH_SYA, M1_FM_DASH_DAV, M1_FM_DASH_GRA, M1_FM_DASH_TAB, M1_FM_DASH_NCL, M1_FM_DASH_NDN, ASK_SYA, ASK_DAV, ASK_GRA, ASK_TAB, ASK_NCL, ASK_NDN, ASK_INAP, M1_FM_NICE_CREATE, M3_A_AMT_CREATE,M3_A_AMT_OTHER_CREATE_1,M3_A_AMT_OTHER_CREATE_2, ASK_NICE , M1_FM_NICE_KA, M1_FM_NICE_OTHER,M1_FM_NICE_OTHER_CREATE_1,M1_FM_NICE_OTHER_CREATE_2, M1_FM_NICE_OTHER_CREATE_3, M1_FM_NICE_OTHER_CREATE_4,M1_FM_NICE_OTHER_CREATE_5, M1_FM_NICE_KA_KL, M1_FM_NICE_KA_KA, M1_FM_NICE_KA_VA, M1_FM_NICE_KA_PA, M1_FM_NICE_KA_KL_NOT, M1_FM_NICE_KA_KL_FORGET, M1_FM_NICE_KA_KL_CHANGE, M1_FM_NICE_KA_KA_NDA, M1_FM_NICE_KA_KA_NEW, M1_FM_NICE_KA_KA_TWO, M1_FM_NICE_KA_KA_LOST, M1_FM_NICE_KA_KA_ROLE, M1_FM_NICE_KA_VA_ACC, M1_FM_NICE_KA_VA_EML, M1_FM_NICE_KA_VA_PRM, M1_FM_NICE_KA_VA_PDF, M1_FM_NICE_KA_VA_TSA, M1_FM_NICE_KA_VA_APV, M1_FM_NICE_KA_PA_EXP, ASK_CHR, ASK_CRQ, M2_C_ICAM, M2_C_ICAM_CREATE_1, M2_C_ICAM_CREATE_2, M2_C_ICAM_CREATE_3, M2_C_ICAM_CREATE_4, M2_C_ICAM_CREATE_5, ASK_ICAM, ASK_LACIMA, ASK_NAVA, ASK_TRAVERSA, ASK_AGT, ASK_AMT, M3_A_AMT_TTC, M3_A_AMT_DST, M3_A_AMT_TTC_WEB, M3_A_AMT_TTC_WEB_S, M3_A_AMT_TTC_WEB_C, M3_A_AMT_TTC_MBL, M3_A_AMT_TTC_MBL_T, M3_A_AMT_TTC_MBL_CF, M3_A_AMT_TTC_MBL_CT, M3_A_AMT_DST_TTC, M3_A_AMT_DST_TTC_N, M3_A_AMT_DST_TTC_T, M3_A_AMT_DST_TTC_F, M3_A_AMT_DST_TTC_C, M3_A_AMT_DST_TTC_D, M3_A_AMT_DST_NON, M3_A_AMT_DST_NON_N, M3_A_AMT_DST_NON_T, M3_A_AMT_DST_NON_F, M3_A_AMT_DST_NON_NO, M3_A_AMT_DST_NON_D, M3_A_AMT_DST_LPS, M3_A_AMT_DST_LPS_N, M3_A_AMT_DST_LPS_T, M3_A_AMT_DST_LPS_F, M3_A_AMT_DST_LPS_D, M3_A_AMT_NA, M3_A_AMT_NA_MBL, M3_A_AMT_NA_APV, M3_A_AMT_CC, M3_A_AMT_CC_MBL, M3_A_AMT_CC_APV, M3_A_AMT_T, M3_A_AMT_T_MBL, M3_A_AMT_T_APV, M3_A_AMT_V, M3_A_AMT_V_MBL, M3_A_AMT_V_APV, M3_A_AMT_DSM, M3_A_AMT_DSM_TTC, M3_A_AMT_DSM_TTC_OT, M3_A_AMT_DSM_TTC_SA, M3_A_AMT_DSM_TTC_FF, M3_A_AMT_DSM_TTC_AR, M3_A_AMT_DSM_NON, M3_A_AMT_DSM_NON_OT, M3_A_AMT_DSM_NON_PNA, M3_A_AMT_DSM_NON_SA, M3_A_AMT_DSM_NON_FF, M3_A_AMT_DSM_NON_AR, M3_A_AMT_M, M3_A_AMT_M_TTC, M3_A_AMT_M_TTC_AD, M3_A_AMT_M_TTC_A, M3_A_AMT_M_TTC_AI, M3_A_AMT_M_WH, M3_A_AMT_M_WH_AD, M3_A_AMT_M_WH_A, M3_A_AMT_M_WH_WS, M3_A_AMT_ACR,M3_A_AMT_OTHER, M3_A_AMT_ACR_MBL, ASK_DVC, M3_A_EATP_CREATE, M3_A_EATP_OTHER_CREATE_1, M3_A_EATP_OTHER_CREATE_2, ASK_EATP, M3_A_EATP_PR, M3_A_EATP_PR_WEB, M3_A_EATP_PR_MBL, M3_A_EATP_CTR, M3_A_EATP_CTR_WEB, M3_A_EATP_CTR_MBL, M3_A_EATP_AT, M3_A_EATP_AT_CIOS, M3_A_EATP_AT_FDMI, M3_A_EATP_AT_FDF, M3_A_EATP_AT_CTS, M3_A_EATP_AM, M3_A_EATP_AM_STS, M3_A_EATP_AM_STS_CTM, M3_A_EATP_AM_STS_WTD, M3_A_EATP_AM_STS_WTI, M3_A_EATP_AM_STS_CTS, M3_A_EATP_AM_STS_AT, M3_A_EATP_AM_STW, M3_A_EATP_AM_STW_WEB, M3_A_EATP_AM_STW_MBL, M3_A_EATP_AM_STW_TBL, M3_A_EATP_AM_WTS, M3_A_EATP_AM_WTS_WEB, M3_A_EATP_AM_WTS_TBL, M3_A_EATP_AM_WTS_MBL, M3_A_EATP_ATI, M3_A_EATP_ATI_C, M3_A_EATP_ATI_W, M3_A_EATP_RAB, M3_A_EATP_RAB_C, M3_A_EATP_RAB_A, M3_A_EATP_RAB_R, M3_A_EATP_AAT,M3_A_EATP_OTHER, M3_A_EATP_AAT_BV, M3_A_EATP_AAT_BC, M3_A_ETSA_CREATE,M3_A_ETSA_OTHER_CREATE_1, M3_A_ETSA_OTHER_CREATE_2, M3_A_ETSA_OTHER_CREATE_3, M3_A_ETSA_OTHER_CREATE_4, M3_A_ETSA_OTHER_CREATE_5, ASK_ETSA, M3_A_ETSA_D, M3_A_ETSA_SP, M3_A_ETSA_SP_WEB, M3_A_ETSA_SP_MBL, M3_A_ETSA_C, M3_A_ETSA_C_WEB, M3_A_ETSA_C_MBL, M3_A_ETSA_O, M3_A_ETSA_O_WEB, M3_A_ETSA_O_MBL, M3_A_ETSA_MS, M3_A_ETSA_MS_WEB, M3_A_ETSA_MS_MBL, M3_A_ETSA_R, M3_A_ETSA_R_WEB, M3_A_ETSA_R_MBL, M3_A_ETSA_S, M3_A_ETSA_S_WEB, M3_A_ETSA_S_MBL, M3_A_ETSA_PM, M3_A_ETSA_PM_WEB, M3_A_ETSA_PM_MBL, M3_A_ETSA_RM, M3_A_ETSA_RM_STD, M3_A_ETSA_RM_STD_CT, M3_A_ETSA_RM_STD_W, M3_A_ETSA_RM_STD_A, M3_A_ETSA_RM_STD_WT, M3_A_ETSA_RM_DTL, M3_A_ETSA_RM_DTL_C , M3_A_ETSA_RM_DTL_W, M3_A_ETSA_RM_DTS, M3_A_ETSA_RM_DTS_C, M3_A_ETSA_RM_DTS_W, M3_A_ETSA_RM_DTS_WT, M3_A_ETSA_RM_DTS_A, M3_A_ETSA_MGV, M3_A_ETSA_MGV_SR, M3_A_ETSA_MGV_SR_WEB, M3_A_ETSA_MGV_SR_MBL, M3_A_ETSA_MGV_C, M3_A_ETSA_MGV_C_WEB, M3_A_ETSA_MGV_C_MBL, M3_A_ETSA_MGV_O, M3_A_ETSA_MGV_O_WEB, M3_A_ETSA_MGV_O_MBL, M3_A_ETSA_MGV_S, M3_A_ETSA_MGV_S_WEB, M3_A_ETSA_MGV_S_MBL, M3_A_ETSA_MGV_PM, M3_A_ETSA_MGV_PM_WEB, M3_A_ETSA_MGV_PM_MBL, M3_A_ETSA_MGV_SU, M3_A_ETSA_MGV_SU_WEB, M3_A_ETSA_MGV_SU_MBL, M3_A_ETSA_F,M3_A_ETSA_OTHER, M3_A_ETSA_F_S, M3_A_ETSA_F_A, M3_A_ETSA_F_B, M3_A_EWONDER_CREATE,M3_A_EWONDER_OTHER_CREATE_1,M3_A_EWONDER_OTHER_CREATE_2,M3_A_EWONDER_OTHER_CREATE_3, ASK_EWONDER, M3_A_EWONDER_AL, M3_A_EWONDER_W, M3_A_EWONDER_W_ADM, M3_A_EWONDER_W_APV, M3_A_EWONDER_W_V, M3_A_EWONDER_W_WP, M3_A_EWONDER_W_U, M3_A_EWONDER_WA, M3_A_EWONDER_WA_MBL, M3_A_EWONDER_WA_TBL, M3_A_EWONDER_WT,M3_A_EWONDER_OTHER, M3_A_EWONDER_WT_S, M3_A_EWONDER_WT_S_WEB, M3_A_EWONDER_WT_S_TBL, M3_A_EWONDER_WT_P, M3_A_EWONDER_WT_P_WEB, M3_A_EWONDER_WT_P_TBL, M3_A_EWONDER_WT_H, M3_A_EWONDER_WT_H_CNT, M3_A_EWONDER_WT_H_EC, M3_A_EWONDER_WT_H_SWO, M3_A_EWONDER_WT_H_RWO, M3_A_EWONDER_WT_H_A, ASK_FELISA, M3_A_FIOLA_CREATE, M3_A_FIOLA_OTHER_CREATE_1,M3_A_FIOLA_OTHER_CREATE_2, M3_A_FIOLA_OTHER_CREATE_3, M3_A_FIOLA_OTHER_CREATE_4, M3_A_FIOLA_OTHER_CREATE_5, ASK_FIOLA, M3_A_FIOLA, M3_A_FIOLA_BP, M3_A_FIOLA_AP, M3_A_FIOLA_AP_SP, M3_A_FIOLA_AP_S, M3_A_FIOLA_AP_S_WEB, M3_A_FIOLA_AP_S_ATA, M3_A_FIOLA_AP_S_MBL, M3_A_FIOLA_AP_G, M3_A_FIOLA_AP_G_WEB, M3_A_FIOLA_AP_G_MBL, M3_A_FIOLA_AP_R, M3_A_FIOLA_AP_R_WEB, M3_A_FIOLA_AP_R_MBL, M3_A_FIOLA_AP_PSP, M3_A_FIOLA_AP_PSP_CA, M3_A_FIOLA_AP_PSP_WT, M3_A_FIOLA_AP_PSP_AT, M3_A_FIOLA_AP_PSP_ETL, M3_A_FIOLA_AP_PSP_DR, M3_A_FIOLA_AP_GS, M3_A_FIOLA_AC, M3_A_FIOLA_AC_CS, M3_A_FIOLA_AC_CS_CT, M3_A_FIOLA_AC_CS_CT_C, M3_A_FIOLA_AC_CS_CT_A, M3_A_FIOLA_AC_CS_CT_U, M3_A_FIOLA_AC_CS_AA, M3_A_FIOLA_AC_CS_AA_B, M3_A_FIOLA_AC_CS_WT, M3_A_FIOLA_AC_CS_A, M3_A_FIOLA_AC_CS_A_R, M3_A_FIOLA_AC_CS_A_R_D, M3_A_FIOLA_AC_CS_A_R_E, M3_A_FIOLA_AC_CS_A_R_E_T, M3_A_FIOLA_AC_CS_A_R_E_M, M3_A_FIOLA_AC_CS_A_R_E_V, M3_A_FIOLA_AC_CS_A_R_E_F, M3_A_FIOLA_AC_CS_A_CC, M3_A_FIOLA_AC_CS_A_M, M3_A_FIOLA_AC_CS_A_M_STS, M3_A_FIOLA_AC_CS_A_M_STS_F, M3_A_FIOLA_AC_CS_A_M_STS_R, M3_A_FIOLA_AC_CS_A_M_STW, M3_A_FIOLA_AC_CS_A_M_STW_F, M3_A_FIOLA_AC_CS_A_M_STW_R, M3_A_FIOLA_AC_CS_A_M_STW_W, M3_A_FIOLA_AC_CS_A_M_STW_I, M3_A_FIOLA_AC_CS_A_M_WTS, M3_A_FIOLA_AC_CS_A_M_WTS_F, M3_A_FIOLA_AC_CS_A_M_WTS_R, M3_A_FIOLA_AC_CS_A_M_WTS_I, M3_A_FIOLA_AC_CS_A_M_WTS_W, M3_A_FIOLA_AC_CS_A_L, M3_A_FIOLA_AC_CS_WA, M3_A_FIOLA_AC_CS_WA_B, M3_A_FIOLA_AC_CS_AT, M3_A_FIOLA_AC_CS_AT_B, M3_A_FIOLA_AC_CS_DB, M3_A_FIOLA_AC_CPS, M3_A_FIOLA_AC_CPS_CT, M3_A_FIOLA_AC_CPS_CT_C, M3_A_FIOLA_AC_CPS_CT_A, M3_A_FIOLA_AC_CPS_CT_U, M3_A_FIOLA_AC_CPS_BA, M3_A_FIOLA_AC_CPS_WEB, M3_A_FIOLA_BM, M3_A_FIOLA_BM_WEB, M3_A_FIOLA_BM_MBL, M3_A_FIOLA_BFGR, M3_A_FIOLA_BFGR_WEB, M3_A_FIOLA_BFGR_MBL, M3_A_FIOLA_TF, M3_A_FIOLA_TF_C, M3_A_FIOLA_TF_C_T, M3_A_FIOLA_TF_C_G, M3_A_FIOLA_TF_C_C, M3_A_FIOLA_TF_W, M3_A_FIOLA_TF_A, M3_A_FIOLA_TF_A_R, M3_A_FIOLA_TF_A_R_D, M3_A_FIOLA_TF_A_R_E, M3_A_FIOLA_TF_A_R_E_T, M3_A_FIOLA_TF_A_R_E_F, M3_A_FIOLA_TF_A_R_E_M, M3_A_FIOLA_TF_A_R_E_V, M3_A_FIOLA_TF_A_M, M3_A_FIOLA_TF_A_M_STS, M3_A_FIOLA_TF_A_M_STS_F, M3_A_FIOLA_TF_A_M_STS_R, M3_A_FIOLA_TF_A_M_STW, M3_A_FIOLA_TF_A_M_STW_F, M3_A_FIOLA_TF_A_M_STW_R, M3_A_FIOLA_TF_A_M_STW_W, M3_A_FIOLA_TF_A_M_STW_I, M3_A_FIOLA_TF_A_M_WTS, M3_A_FIOLA_TF_A_M_WTS_F, M3_A_FIOLA_TF_A_M_WTS_R, M3_A_FIOLA_TF_A_M_WTS_W, M3_A_FIOLA_TF_A_M_WTS_I, M3_A_FIOLA_TF_A_L, M3_A_FIOLA_TF_A_V, M3_A_FIOLA_TF_AT, M3_A_FIOLA_TF_AT_N, M3_A_FIOLA_TF_AT_T, M3_A_FIOLA_TF_AT_D, M3_A_FIOLA_TF_DB, M3_A_FIOLA_AS, M3_A_FIOLA_C, M3_A_FIOLA_C_WEB, M3_A_FIOLA_C_MBL, M3_A_FIOLA_EEE, M3_A_FIOLA_EEE_EBAPP, M3_A_FIOLA_EEE_EKPI, M3_A_FIOLA_EEE_EBAST, M3_A_FIOLA_CC, M3_A_FIOLA_CC_A, M3_A_FIOLA_CC_D, M3_A_FIOLA_GT,M3_A_FIOLA_OTHER, ASK_LOLITA, ASK_SCARLET, ASK_TIARA, ASK_TPAS, ASK_TPOWER, ASK_COVMO, ASK_CSONE, ASK_EVITA, ASK_IPDM, ASK_IRONMAN, ASK_SMARTCARE, ASK_KAFKA, M6_DS_NDL_TQ, M6_DS_NDL_TQ_CREATE_1, M6_DS_NDL_TQ_CREATE_2, M6_DS_NDL_TQ_CREATE_3, M6_DS_NDL_TQ_CREATE_4, M6_DS_NDL_TQ_CREATE_5, M6_DS_NDL_TQ_CREATE_6, M6_DS_NDL_TQ_CREATE_7, M6_DS_NDL_TQ_CREATE_8, M6_DS_NDL_TQ_CREATE_9, M6_DS_NDL_TQ_CREATE_10, M6_DS_NDL_TQ_CREATE_11, M6_DS_NDL_TQ_CREATE_12, M6_DS_NDL_TQ_CREATE_13, M6_DS_NDL_TQ_CREATE_14, M6_DS_NDL_TQ_CREATE_15, M6_DS_NDL_TQ_CREATE_16, M6_DS_NDL_TQ_CREATE_17, M6_DS_NDL_TQ_CREATE_18, M6_DS_NDL_TQ_CREATE_19,M6_DS_NDL_TQ_CREATE_20, M6_DS_NDL_TR, M6_DS_NDL_TR_CREATE_1, M6_DS_NDL_TR_CREATE_2, M6_DS_NDL_TR_CREATE_3, M6_DS_NDL_TR_CREATE_4, M6_DS_NDL_TR_CREATE_5, M6_DS_NDL_TR_CREATE_6, M6_DS_NDL_TR_CREATE_7, M6_DS_NDL_TR_CREATE_8, M6_DS_NDL_TR_CREATE_9, M6_DS_NDL_TR_CREATE_10, M6_DS_NDL_TR_CREATE_11,M6_DS_NDL_TR_CREATE_12, ASK_NDM, ASK_NDL, ASK_OSS, ASK_CTS, ASK_REMEDY, ASK_SDM, M8_DAVP_AVP, ASK_DAVP, REG_FM_OSSERA, REG_A_SMARTKEY, REG_PM_ARTHEMIS, REG_PM_KALIX, REG_PM_OOKLA, REG_PM_SUROPATI, REG_PM_TRAFFICA,REG_PM_TWAMP, REG_PM_ZABBIX, REG_DS_IXIA, DEL_FM_OSSERA, DEL_A_SMARTKEY, DEL_PM_ARTHEMIS, DEL_PM_KALIX, DEL_PM_OOKLA, DEL_PM_SUROPATI, DEL_PM_TRAFFICA,DEL_PM_TWAMP, DEL_PM_ZABBIX, DEL_DS_IXIA,M1_FM_DASH_SYA_CREATE_1, M1_FM_DASH_DAV_CREATE_1, M1_FM_DASH_GRA_CREATE_1, M1_FM_DASH_TAB_CREATE_1, M1_FM_DASH_NCL_CREATE_1, M1_FM_DASH_NDN_CREATE_1, M1_FM_OSSERA_CREATE_1,M2_C_CHRONO_TICKET_CREATE_1, M2_C_CHRONO_TICKET_CREATE_2, M2_C_CHRONO_TICKET_CREATE_3, M2_C_CHRONO_TICKET_CREATE_4, M2_C_CHRONO_TICKET_CREATE_5, M2_C_CRQ_CREATE_1, M2_C_LACIMA_CREATE_1, M2_C_LACIMA_CREATE_2, M2_C_LACIMA_CREATE_3, M2_C_LACIMA_CREATE_4, M2_C_LACIMA_CREATE_5, M2_C_NAVA_CREATE_1, M2_C_TRAVERSA_CREATE_1,M3_A_AGATA_CREATE_1,M3_A_DVC_CREATE_1, M3_A_FELISA_CREATE_1, M3_A_LOLITA_CREATE_1, M3_A_TIARA_CREATE_1, M3_A_TPOWER_CREATE_1, M4_PM_CSONE_CREATE_1, M4_PM_CYCLOPS_CREATE_1, M4_PM_EVITA_CREATE_1, M4_PM_IPDM_CREATE_1, M4_PM_IRONMAN_CREATE_1, M4_PM_ZABBIX_CREATE_1, M6_DS_KAFKA_CREATE_1, M6_DS_OSS_CREATE_1, M7_TS_CTS_CREATE_1, M7_TS_REMEDY_CREATE_1, M7_TS_SDM_CREATE_1, M8_DAVP_AVP_CREATE_1, M1_FM_NICE_OTHER_CREATE_5, M1_FM_NICE_OTHER_CREATE_1A, M1_FM_NICE_OTHER_CREATE_1B, M1_FM_NICE_OTHER_CREATE_1C, M1_FM_NICE_OTHER_CREATE_2A, M1_FM_NICE_OTHER_CREATE_2B, M1_FM_NICE_OTHER_CREATE_2C, M1_FM_NICE_OTHER_CREATE_3A, M1_FM_NICE_OTHER_CREATE_3B, M1_FM_NICE_OTHER_CREATE_3C, M1_FM_NICE_OTHER_CREATE_3D, M1_FM_NICE_OTHER_CREATE_4A, M1_FM_NICE_OTHER_CREATE_4B, M1_FM_NICE_OTHER_CREATE_4C, M3_A_EATP_OTHER_CREATE_3, M3_A_EATP_OTHER_CREATE_4, M3_A_EATP_OTHER_CREATE_5, M3_A_EATP_OTHER_CREATE_1A, M3_A_EATP_OTHER_CREATE_1B, M3_A_EATP_OTHER_CREATE_1C, M3_A_EATP_OTHER_CREATE_2A, M3_A_EATP_OTHER_CREATE_2B, M3_A_EATP_OTHER_CREATE_2C, M3_A_EATP_OTHER_CREATE_3A, M3_A_EATP_OTHER_CREATE_3B, M3_A_EATP_OTHER_CREATE_3C, M3_A_EATP_OTHER_CREATE_4A, M3_A_EATP_OTHER_CREATE_4B, M3_A_EATP_OTHER_CREATE_4C, M3_A_EATP_OTHER_CREATE_4D, M3_A_ETSA_OTHER_CREATE_1A, M3_A_ETSA_OTHER_CREATE_1B, M3_A_ETSA_OTHER_CREATE_2A, M3_A_ETSA_OTHER_CREATE_2B, M3_A_ETSA_OTHER_CREATE_2C, M3_A_ETSA_OTHER_CREATE_3A, M3_A_ETSA_OTHER_CREATE_3B, M3_A_ETSA_OTHER_CREATE_3C, M3_A_ETSA_OTHER_CREATE_4A, M3_A_ETSA_OTHER_CREATE_4B, M3_A_ETSA_OTHER_CREATE_4C, M3_A_FIOLA_OTHER_CREATE_1A, M3_A_FIOLA_OTHER_CREATE_1B, M3_A_FIOLA_OTHER_CREATE_1C, M3_A_FIOLA_OTHER_CREATE_2A, M3_A_FIOLA_OTHER_CREATE_3A, M3_A_FIOLA_OTHER_CREATE_3B, M3_A_FIOLA_OTHER_CREATE_4A, M3_A_TPAS_CREATE_1A,M3_A_TPAS_CREATE_1B,M3_A_TPAS_CREATE_1C, M3_A_TPAS_CREATE_1D, M3_A_TPAS_CREATE_1E, M3_A_TPAS_CREATE_2A,M3_A_TPAS_CREATE_2B,M3_A_TPAS_CREATE_2C, M3_A_TPAS_CREATE_3A,M3_A_TPAS_CREATE_3B,M3_A_TPAS_CREATE_3C, M3_A_TPAS_CREATE_3D, M3_A_TPAS_CREATE_4A,M3_A_TPAS_CREATE_4B, M10_TRAFFICA_CREATE_1A, M10_TRAFFICA_CREATE_1B, M10_TRAFFICA_CREATE_2A, M10_TRAFFICA_CREATE_2B, M10_TRAFFICA_CREATE_3A, M10_TRAFFICA_CREATE_3B,M10_TRAFFICA_CREATE_3C, M10_TRAFFICA_CREATE_4A, M4_PM_KALIX_CREATE_3, M4_PM_KALIX_CREATE_4, M4_PM_KALIX_CREATE_1A, M4_PM_KALIX_CREATE_1B, M4_PM_KALIX_CREATE_2A, M4_PM_KALIX_CREATE_2B,M4_PM_KALIX_CREATE_2C, M4_PM_KALIX_CREATE_3A, M6_DS_IXIA_CREATE_1A, M6_DS_IXIA_CREATE_1B, M6_DS_IXIA_CREATE_2A, M6_DS_IXIA_CREATE_2B, M6_DS_IXIA_CREATE_2C, M6_DS_IXIA_CREATE_3A, M6_DS_IXIA_CREATE_3B, M6_DS_IXIA_CREATE_3C,M6_DS_IXIA_CREATE_4A,M6_DS_IXIA_CREATE_4B, M6_DS_IXIA_CREATE_4C,M6_DS_IXIA_CREATE_4D, M9_COVMO_CREATE_1A, M9_COVMO_CREATE_1B, M9_COVMO_CREATE_2A, M9_COVMO_CREATE_2B, M9_COVMO_CREATE_2C, M9_COVMO_CREATE_3A, M9_COVMO_CREATE_3B, M9_COVMO_CREATE_3C, M1_FM_PMSOSSERA_CREATE_1, ASK_PMSOSSERA = range(857)


def start(update: Update, _: CallbackContext) -> None:
    full_name = update.message.from_user.full_name
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ##access
    query = f"select count(*) as `count` from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    check_status = client.command(query)
    grup_name = update.message.chat.title
    ochabot = 'https://t.me/ochabot'
    if grup_name:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        button1 = InlineKeyboardButton("OCHABOT", url=ochabot)
        buttons = [[button1]]
        keyboard = InlineKeyboardMarkup(buttons)
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text('*HOT News (Helpdesk Operation Tools Network System)* hanya bisa di akses melalui private chatBOT. Terima kasih \nKlik tombol dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        return ConversationHandler.END
    elif not grup_name:
        check_status = check_status == 0
        if not username:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text(f"Hallo Kak *{full_name}*, Mohon buat *Username ID Telegram *terlebih dahulu", parse_mode=telegram.ParseMode.MARKDOWN)
            return ConversationHandler.END
        elif check_status is True:
            print('bener ini')
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text(f"Hallo Kak *{full_name}*,\nSelamat datang di *HelpdeskBOT*", parse_mode=telegram.ParseMode.MARKDOWN)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text(f"Ketik *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1\n\nketik /cancel untuk membatalkan", parse_mode=telegram.ParseMode.MARKDOWN)
            return REGISTRATION
        elif check_status is False:
            query = f"select userdomain from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
            check_reg = client.command(query)
            check_reg = check_reg == "None"
            
            if check_reg is False:
                query = f"select username_telegram from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                check_status = client.command(query)
                print(f"USERAME: {username} | Checkstatus: {check_status}")
                check_status = check_status == username
                if check_status is False:
                    query = f"select username_telegram from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                    command = client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"Anda telah merubah username ID telegram yang telah diregistrasi, pastikan username ID telegram anda *{command}*\nklik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    return ConversationHandler.END
                elif check_status is True:
                    query = f"select position from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                    command = client.command(query)
                    # if 'admin'in command:
                    #     update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    #     update.message.reply_text(f"Silahkan registrasi user secara manual,\nContoh ketik : Fullname<spasi>Username Telegram<spasi>Chatid Telegram<spasi>Userdomain\nKetik /cancel untuk membatalkan")
                    #     return REG_USER_MANUAL
                    # elif 'user' in command:
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"✅ *Akun verified*, klik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    return ConversationHandler.END
            elif check_reg is True:
                query = f"select username_telegram from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                check_status = client.command(query)
                check_status = check_status == username
                if check_status is False:
                    query = f"select username_telegram from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                    command = client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"Anda telah merubah username ID telegram yang telah diregistrasi, pastikan username ID telegram anda *{command}*\nklik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    return ConversationHandler.END
                elif check_status is True:
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"Hallo Kak *{full_name}*,\nSelamat datang di *HelpdeskBOT*", parse_mode=telegram.ParseMode.MARKDOWN)
                    update.message.reply_text("*Akun telah di taken over*. Ketik *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1\n\nketik /cancel untuk membatalkan",parse_mode=telegram.ParseMode.MARKDOWN)
                    return REGISTRATION
def reg_user_manual(update: Update, _: CallbackContext) -> None:
    data = update.message.text.split(' ')
    count_data = len(data)
    if count_data == 4:
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"INSERT INTO production.helpdesk_bot select '{data[0]}','{data[1]}','{data[2]}','{data[3]}','user','None','None','None','None','None','None','None','None','None'"
        client.command(query)
        update.message.reply_text("✅ *Registrasi user sukses*. ",parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        update.message.reply_text("*Ketik data yang benar*\nContoh ketik : fullname<spasi>username_telegram<spasi>chatid_telegram<spasi>userdomain\nKetik /start",parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END

def registration(update: Update, _: CallbackContext) -> None:
    try:
        full_name = update.message.from_user.full_name
        username = update.message.from_user.username
        chatid_telegram  = update.message.from_user.id 
        chat_id = update.message.from_user.id
        data_text = update.message.text.split(' ')
        split_user = data_text[0]
        split_pwd = data_text[1]

        # proxies = {"no_proxy": "*"}
        # url = "http://10.53.193.98/api-ldap-auth/login.php?api_key=WWmbkWSyQgJqeZvVQE8CgXZ33ZWCp8Be"
        # payload='username={}&password={}'.format(split_user,split_pwd)
        # headers = {
        # 'Content-Type': 'application/x-www-form-urlencoded'
        # }
        # response = requests.request("POST", url, headers=headers, data=payload)
        # status_ldap = response.json()
        # USERNAME: BEBAS
        # PASSWORD: (MINIMAL 8 Character)
        if len(split_pwd) < 8:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Password minimal 8 karakter\nKetik *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1\nKlik /start registrasi",parse_mode=telegram.ParseMode.MARKDOWN)
            return ConversationHandler.END
            
        # division = status_ldap['attr']['department']
        division = 'None'
        status_ldap = {'status': 'success'}
        print(f"STATUS LDAP {status_ldap}")
        

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

        ##access
        query = f"select count(*) as `count` from production.helpdesk_bot where userdomain = '{split_user}'"
        check_status = client.command(query)
        check_userdomain = check_status == 0
        if check_userdomain is True:
            query = f"select count(*) as `count` from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
            check_status = client.command(query)
            status = check_status == 0
            if status is True:
                if status_ldap['status'] == 'success':
                    query = f"INSERT INTO production.helpdesk_bot select '{full_name}','{username}','{chat_id}','{split_user}','user','None','None','None','None','None','None','None','None','None','None','None','{division}'"
                    data = client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"✅ Registrasi *Kak {full_name}* sukses.\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    
                    userdomain =split_user
                    username_telegram = 'https://t.me/{}'.format(username)
                    fullname_telegram = full_name
                    chatid_log_acccess = '-1001817361687'
                    bot_log.send_message(chat_id=chatid_log_acccess,text=f'🚨 Userdomain *{userdomain}* telah diregistrasi oleh user [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                else:
                    query = f"INSERT INTO production.helpdesk_bot select '{full_name}','{username}','{chat_id}','{split_user}','user','None','None','None','None','None','None','None','None','None','None','None','{division}'"
                    data = client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"✅ Registrasi *Kak {full_name}* sukses.\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    
                    userdomain =split_user
                    username_telegram = 'https://t.me/{}'.format(username)
                    fullname_telegram = full_name
                    chatid_log_acccess = '-1001817361687'
                    bot_log.send_message(chat_id=chatid_log_acccess,text=f'‼️🚨 [Auto Registration]\nUserdomain *{userdomain}* telah diregistrasi oleh user [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                    # update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    # update.message.reply_text(f"Ketik ulang *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1\n\nKlik /start",parse_mode=telegram.ParseMode.MARKDOWN)
            elif status is False:
                if status_ldap['status'] == 'success':
                    query = f"ALTER TABLE production.helpdesk_bot update userdomain = '{split_user}' where chatid_telegram = '{chatid_telegram}'"
                    client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"✅ Registrasi *Kak {full_name}* sukses.\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)

                    userdomain = split_user
                    username_telegram = 'https://t.me/{}'.format(username)
                    fullname_telegram = full_name
                    chatid_log_acccess = '-1001817361687'
                    bot_log.send_message(chat_id=chatid_log_acccess,text=f'🚨 Userdomain *{userdomain}* telah diregistrasi oleh user [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                else:
                    query = f"INSERT INTO production.helpdesk_bot select '{full_name}','{username}','{chat_id}','{split_user}','user','None','None','None','None','None','None','None','None','None','None','None','None'"
                    data = client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"✅ Registrasi *Kak {full_name}* sukses.\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    
                    userdomain =split_user
                    username_telegram = 'https://t.me/{}'.format(username)
                    fullname_telegram = full_name
                    chatid_log_acccess = '-1001817361687'
                    bot_log.send_message(chat_id=chatid_log_acccess,text=f'‼️🚨 [Auto Registration]\nUserdomain *{userdomain}* telah diregistrasi oleh user [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                    # update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    # update.message.reply_text(f"Ketik ulang *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1\n\Klik /start",parse_mode=telegram.ParseMode.MARKDOWN)
        elif check_userdomain is False:
            query = f"select count(*) as `count` from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                if status_ldap['status'] == 'success':
                    ##hapus userdomain
                    query = f"select chatid_telegram from production.helpdesk_bot where userdomain = '{split_user}'"
                    chatid_data = client.command(query)
                    os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/log_chatid.txt")
                    log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_chatid.txt','a')
                    log_bot.write('{}'.format(chatid_data))
                    log_bot.close()

                    query = f"ALTER TABLE production.helpdesk_bot update userdomain = 'None' where userdomain = '{split_user}'"
                    client.command(query)
            
                    #overwrite
                    userdomain = split_user
                    query = f"ALTER TABLE production.helpdesk_bot update userdomain = '{split_user}' where chatid_telegram = '{chatid_telegram}'"
                    client.command(query)
                    
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"✅ Registrasi *Kak {full_name}* sukses.\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)

                    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                    data = client.command(query)
                    userdomain = data[3]
                    username_telegram = 'https://t.me/{}'.format(data[2])
                    fullname_telegram = data[0]
                    chatid_log_acccess = '-1001817361687'
                    bot_log.send_message(chat_id=chatid_log_acccess,text=f'🚨 Userdomain *{userdomain}* telah di taken over oleh [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

                    data_chatid = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_chatid.txt','r')
                    data_chatid = data_chatid.read()
                    userdomain = data[3]
                    username_telegram = 'https://t.me/{}'.format(data[2])
                    fullname_telegram = data[0]
                    bot_log.send_message(chat_id=int(data_chatid),text=f'Userdomain *{userdomain}* telah di taken over oleh [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                else:
                    query = f"INSERT INTO production.helpdesk_bot select '{full_name}','{username}','{chat_id}','{split_user}','user','None','None','None','None','None','None','None','None','None','None','None','None'"
                    data = client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"✅ Registrasi *Kak {full_name}* sukses.\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    
                    userdomain =split_user
                    username_telegram = 'https://t.me/{}'.format(username)
                    fullname_telegram = full_name
                    chatid_log_acccess = '-1001817361687'
                    bot_log.send_message(chat_id=chatid_log_acccess,text=f'‼️🚨 [Auto Registration]\nUserdomain *{userdomain}* telah diregistrasi oleh user [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                    # update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    # update.message.reply_text(f"Ketik ulang *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1\n\Klik /start",parse_mode=telegram.ParseMode.MARKDOWN)
            elif check_status is True:
                if status_ldap['status'] == 'success':
                    ##hapus userdomain
                    query = f"select chatid_telegram from production.helpdesk_bot where userdomain = '{split_user}'"
                    chatid_data = client.command(query)
                    os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/log_chatid.txt")
                    log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_chatid.txt','a')
                    log_bot.write('{}'.format(chatid_data))
                    log_bot.close()
                    query = f"ALTER TABLE production.helpdesk_bot update userdomain = 'None', channel_chatid = 'None' where userdomain = '{split_user}'"
                    client.command(query)
                    #new user
                    query = f"INSERT INTO production.helpdesk_bot select '{full_name}','{username}','{chat_id}','{split_user}','user','None','None','None','None','None','None','None','None','None','None','None','{division}'"
                    client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"✅ Registrasi *Kak {full_name}* sukses.\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)

                    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

                    userdomain = split_user
                    username_telegram = 'https://t.me/{}'.format(username)
                    fullname_telegram = full_name
                    chatid_log_acccess = '-1001817361687'
                    bot_log.send_message(chat_id=chatid_log_acccess,text=f'🚨 Userdomain *{userdomain}* telah di taken over oleh user [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

                    data_chatid = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_chatid.tx','r')
                    data_chatid = data_chatid.read()
                    userdomain = split_user
                    username_telegram = 'https://t.me/{}'.format(username)
                    fullname_telegram = full_name
                    bot_log.send_message(chat_id=int(data_chatid),text=f'Userdomain *{userdomain}* telah di taken over oleh [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                else:
                    query = f"INSERT INTO production.helpdesk_bot select '{full_name}','{username}','{chat_id}','{split_user}','user','None','None','None','None','None','None','None','None','None','None','None','None"
                    data = client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"✅ Registrasi *Kak {full_name}* sukses.\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    
                    userdomain =split_user
                    username_telegram = 'https://t.me/{}'.format(username)
                    fullname_telegram = full_name
                    chatid_log_acccess = '-1001817361687'
                    bot_log.send_message(chat_id=chatid_log_acccess,text=f'‼️🚨 [Auto Registration]\nUserdomain *{userdomain}* telah diregistrasi oleh user [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                    # update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    # update.message.reply_text(f"Ketik *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1\nKlik /start registrasi",parse_mode=telegram.ParseMode.MARKDOWN)

    except (IndexError,KeyError):
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text(f"Ketik *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1\nKlik /start registrasi",parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END

def menu(update: Update, _: CallbackContext) -> None:
    full_name = update.message.from_user.full_name
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    check_status = client.command(query)
    check_status = check_status == 0
    grup_name = update.message.chat.title
    ochabot = 'https://t.me/ochabot'
    if grup_name:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        button1 = InlineKeyboardButton("OCHABOT", url=ochabot)
        buttons = [[button1]]
        keyboard = InlineKeyboardMarkup(buttons)
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text('*HOT News (Helpdesk Operation Tools Network System)* hanya bisa di akses melalui private chatBOT. Terima kasih \nKlik tombol dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        return ConversationHandler.END
    elif not grup_name:
        if not username:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text(f"Hallo Kak *{full_name}*, Mohon buat *Username ID Telegram *terlebih dahulu", parse_mode=telegram.ParseMode.MARKDOWN)
            return ConversationHandler.END
        elif check_status is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text(f"Mohon registrasi terlebih dahulu. Klik /start", parse_mode=telegram.ParseMode.MARKDOWN)
            return ConversationHandler.END
        elif check_status is False:
            query = f"select userdomain from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
            check_reg = client.command(query)
            check_reg = check_reg == "None"
            if check_reg is False:
                query = f"select username_telegram from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                check_status = client.command(query)
                check_status = check_status == username
                if check_status is False:
                    query = f"select username_telegram from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                    command = client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"Anda telah merubah username ID telegram yang telah diregistrasi, pastikan username ID telegram anda *{command}*\nklik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    return ConversationHandler.END
                elif check_status is True:
                    keyboard = [
                        [InlineKeyboardButton("FAULT >>", callback_data=str(M1_FM))],
                        [InlineKeyboardButton("CONFIGURATION >>", callback_data=str(M2_C))],
                        [InlineKeyboardButton("ADMINISTRATION >>", callback_data=str(M3_A))],
                        [InlineKeyboardButton("PERFORMANCE >>", callback_data=str(M4_PM))],
                        [InlineKeyboardButton("SECURITY >>", callback_data=str(M5_SM))],
                        [InlineKeyboardButton("DATA SOURCE >>", callback_data=str(M6_DS))],
                        [InlineKeyboardButton("TICKETING SYSTEM >>", callback_data=str(M7_TS))],
                        [InlineKeyboardButton("DASHBOARD AVP >>", callback_data=str(M8_DAVP))],
                        [InlineKeyboardButton("COVMO", callback_data=str(M9_COVMO))],
                        [InlineKeyboardButton("TRAFFICA", callback_data=str(M10_TRAFFICA))],
                        [InlineKeyboardButton("Batal", callback_data=str(BATAL_HOME))]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"Selamat datang di menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text("Pilih :", reply_markup=reply_markup)
                    update.message.reply_text("Penjelasan FCAPS Management :\n*FAULT* : DAVINA, GRAFANA, INAP, NICE/INEOM, NACEL, NADIN, SYANTIC, TABLUE, OSSERA\n*CONFIGURATION* : CHRONO, CRQ, ICAM, LACIMA, NAVA, TRAVERSA\n*ADMINISTRATION* : ARTHEMIS, AGATA, AMESTY, DAVINCI, EATP, ETSA, EWONDER, FELISA, FIOLA, LOLITA, SCARLETT, SMARTKEY, TIARA, TPAS, TPOWER\n*PERFORMANCE* : CSON, EVITA, IPDM, IRONMAN, KALIX, OOKLA, SMARTCARE, SUROPATI, TWAMP, ZABBIX\n*SECURITY* : REQ USER, UAM, PAM\n*DATA SOURCE* : KAFKA, NDL, NDM, OSS, IXIA TAP AGGREGATOR\n*TICKETING SYSTEM* : CTS, REMEDY, SDM",parse_mode=telegram.ParseMode.MARKDOWN)
                return MENU
            elif check_reg is True:
                query = f"select username_telegram from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                check_status = client.command(query)
                check_status = check_status == username
                if check_status is False:
                    query = f"select username_telegram from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
                    command = client.command(query)
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text(f"Anda telah merubah username ID telegram yang telah diregistrasi, pastikan username ID telegram anda *{command}*\nklik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
                    return ConversationHandler.END
                elif check_status is True:
                    update.message.reply_text("Mohon registrasi terlebih dahulu. Klik /start",parse_mode=telegram.ParseMode.MARKDOWN)
                    return ConversationHandler.END
                

def menu_utama(update: Update, context: CallbackContext) -> int:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select chatid_telegram from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    check_data = client.command(query)
    check_status = check_data == chatid_telegram
    if check_status is True:
        try:
            keyboard = [
                [InlineKeyboardButton("FAULT >>", callback_data=str(M1_FM))],
                [InlineKeyboardButton("CONFIGURATION >>", callback_data=str(M2_C))],
                [InlineKeyboardButton("ADMINISTRATION >>", callback_data=str(M3_A))],
                [InlineKeyboardButton("PERFORMANCE >>", callback_data=str(M4_PM))],
                [InlineKeyboardButton("SECURITY >>", callback_data=str(M5_SM))],
                [InlineKeyboardButton("DATA SOURCE >>", callback_data=str(M6_DS))],
                [InlineKeyboardButton("TICKETING SYSTEM >>", callback_data=str(M7_TS))],
                [InlineKeyboardButton("DASHBOARD AVP >>", callback_data=str(M8_DAVP))],
                [InlineKeyboardButton("COVMO", callback_data=str(M9_COVMO))],
                [InlineKeyboardButton("TRAFFICA", callback_data=str(M10_TRAFFICA))],
                [InlineKeyboardButton("Batal", callback_data=str(BATAL_HOME))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda kembali ke *HOME*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan FCAPS Management :\n*FAULT* : DAVINA, GRAFANA, INAP, NICE/INEOM, NACEL, NADIN, SYANTIC, TABLUE, OSSERA\n*CONFIGURATION* : CHRONO, CRQ, ICAM, LACIMA, NAVA, TRAVERSA\n*ADMINISTRATION* : ARTHEMIS, AGATA, AMESTY, DAVINCI, EATP, ETSA, EWONDER, FELISA, FIOLA, LOLITA, SCARLETT, SMARTKEY, TIARA, TPAS, TPOWER\n*PERFORMANCE* : CSON, EVITA, IPDM, IRONMAN, KALIX, OOKLA, SMARTCARE, SUROPATI, TWAMP, ZABBIX\n*SECURITY* : REQ USER, UAM, PAM\n*DATA SOURCE* : KAFKA, NDL, NDM, OSS, IXIA TAP AGGREGATOR\n*TICKETING SYSTEM* : CTS, REMEDY, SDM",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("FAULT >>", callback_data=str(M1_FM))],
                [InlineKeyboardButton("CONFIGURATION >>", callback_data=str(M2_C))],
                [InlineKeyboardButton("ADMINISTRATION >>", callback_data=str(M3_A))],
                [InlineKeyboardButton("PERFORMANCE >>", callback_data=str(M4_PM))],
                [InlineKeyboardButton("SECURITY >>", callback_data=str(M5_SM))],
                [InlineKeyboardButton("DATA SOURCE >>", callback_data=str(M6_DS))],
                [InlineKeyboardButton("TICKETING SYSTEM >>", callback_data=str(M7_TS))],
                [InlineKeyboardButton("DASHBOARD AVP >>", callback_data=str(M8_DAVP))],
                [InlineKeyboardButton("COVMO", callback_data=str(M9_COVMO))],
                [InlineKeyboardButton("TRAFFICA", callback_data=str(M10_TRAFFICA))],
                [InlineKeyboardButton("Batal", callback_data=str(BATAL_HOME))]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda kembali ke *HOME*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan FCAPS Management :\n*FAULT* : DAVINA, GRAFANA, INAP, NICE/INEOM, NACEL, NADIN, SYANTIC, TABLUE, OSSERA\n*CONFIGURATION* : CHRONO, CRQ, LACIMA, NAVA, TRAVERSA\n*ADMINISTRATION* : ARTHEMIS, AGATA, AMESTY, DAVINCI, EATP, ETSA, EWONDER, FELISA, FIOLA, LOLITA, SCARLETT, SMARTKEY, TIARA, TPAS, TPOWER\n*PERFORMANCE* : CSON, EVITA, IPDM, IRONMAN, KALIX, OOKLA, SMARTCARE, SUROPATI, TWAMP, ZABBIX\n*SECURITY* : REQ USER, UAM, PAM\n*DATA SOURCE* : KAFKA, NDL, NDM, OSS, IXIA TAP AGGREGATOR\n*TICKETING SYSTEM* : CTS, REMEDY, SDM",parse_mode=telegram.ParseMode.MARKDOWN)
        return MENU

def menu_help(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *HELP*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text("📌 *Cara Open & closing tiket di HelpdeskBOT :*\n1. Klik /menu dan pilih applikasi yang terkendala\n2. Open tiket baru dan deskripisikan problem toolsnya dilengkapi evidence\n3. Jangan lupa Closing tiket jika sudah normal kembali\n\n🗒 *Note* :\n1. Setelah open tiket, kendala tools akan diselesaikan oleh expert tools di group channel.\n2. User Akses HelpdeskBOT wajib menggunakan userdomain atau user SIAD/VPN/VISA.\n3. Open tiket dengan bijak, tidak perlu open tiket baru jika sudah ada yang open.\n4. List tiket problem keluar saat buat tiket\n\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
    except:
        query.message.reply_text("📌 *Cara Open & closing tiket di HelpdeskBOT :*\n1. Klik /menu dan pilih applikasi yang terkendala\n2. Open tiket baru dan deskripisikan problem toolsnya dilengkapi evidence\n3. Jangan lupa Closing tiket jika sudah normal kembali\n\n🗒 *Note* :\n1. Setelah open tiket, kendala tools akan diselesaikan oleh expert tools di group channel.\n2. User Akses HelpdeskBOT wajib menggunakan userdomain atau user SIAD/VPN/VISA.\n3. Open tiket dengan bijak, tidak perlu open tiket baru jika sudah ada yang open.\n4. List tiket problem keluar saat buat tiket\n\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END

def m1_fm(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select position from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    collection = client.command(query)
    position = collection == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("AVAIL DASH >>", callback_data=str(M1_FM_DASH))],
                [InlineKeyboardButton("INAP >>", callback_data=str(M1_FM_INAP))],
                [InlineKeyboardButton("NICE/INEOM >>", callback_data=str(M1_FM_NICE))],
                [InlineKeyboardButton("OSSERA", callback_data=str(M1_FM_OSSERA))],
                [InlineKeyboardButton("PSM OSSERA", callback_data=str(M1_FM_PSMOSSERA))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_FM))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *FAULT*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AVAIL DASH* : Availabillity Dashboard\n*INAP* : Tools Fault Management\n*NICE/INEOM* : Integrated Network Operation & Monitoring\n*MY TICKET (ADMIN)* : management Closed Ticket\n*OSSERA* : -\n*PMS OSSERA* : -\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("AVAIL DASH >>", callback_data=str(M1_FM_DASH))],
                [InlineKeyboardButton("INAP >>", callback_data=str(M1_FM_INAP))],
                [InlineKeyboardButton("NICE/INEOM >>", callback_data=str(M1_FM_NICE))],
                [InlineKeyboardButton("OSSERA", callback_data=str(M1_FM_OSSERA))],
                [InlineKeyboardButton("PSM OSSERA", callback_data=str(M1_FM_PSMOSSERA))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_FM))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *FAULT*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AVAIL DASH* : Availabillity Dashboard\n*INAP* : Tools Fault Management\n*NICE/INEOM* : Integrated Network Operation & Monitoring\n*OSSERA* : -\n*PMS OSSERA* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("AVAIL DASH >>", callback_data=str(M1_FM_DASH))],
                [InlineKeyboardButton("INAP", callback_data=str(M1_FM_INAP))],
                [InlineKeyboardButton("NICE/INEOM >>", callback_data=str(M1_FM_NICE))],
                [InlineKeyboardButton("OSSERA", callback_data=str(M1_FM_OSSERA))],
                [InlineKeyboardButton("PSM OSSERA", callback_data=str(M1_FM_PSMOSSERA))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_FM))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *FAULT*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AVAIL DASH* : Availabillity Dashboard\n*INAP* : Tools Fault Management\n*NICE/INEOM* : Integrated Network Operation & Monitoring\n*OSSERA* : -\n*PMS OSSERA* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("AVAIL DASH >>", callback_data=str(M1_FM_DASH))],
                [InlineKeyboardButton("INAP", callback_data=str(M1_FM_INAP))],
                [InlineKeyboardButton("NICE/INEOM >>", callback_data=str(M1_FM_NICE))],
                [InlineKeyboardButton("OSSERA", callback_data=str(M1_FM_OSSERA))],
                [InlineKeyboardButton("PSM OSSERA", callback_data=str(M1_FM_PSMOSSERA))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_FM))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *FAULT*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AVAIL DASH* : Availabillity Dashboard\n*INAP* : Tools Fault Management\n*NICE/INEOM* : Integrated Network Operation & Monitoring\n*OSSERA* : -\n*PMS OSSERA* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
def m1_fm_dash(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("SYANTIC", callback_data=str(M1_FM_DASH_SYA))],
            [InlineKeyboardButton("DAVINA", callback_data=str(M1_FM_DASH_DAV))],
            [InlineKeyboardButton("GRAFANA", callback_data=str(M1_FM_DASH_GRA))],
            [InlineKeyboardButton("TABLUE", callback_data=str(M1_FM_DASH_TAB))],
            [InlineKeyboardButton("NACEL", callback_data=str(M1_FM_DASH_NCL))],
            [InlineKeyboardButton("NADIN", callback_data=str(M1_FM_DASH_NDN))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *AVAIL DASH*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
        query.message.reply_text("Penjelasan :\n*SYANTIC* : System Analyzer Network & Tracker Incident Center\n*DAVINA* : -\n*GRAFANA* : Dashboard Monitoring\n*TABLUE* : -\n*NACEL* : -\n*NADIN* : -",parse_mode=telegram.ParseMode.MARKDOWN)
    except:
        keyboard = [
            [InlineKeyboardButton("SYANTIC", callback_data=str(M1_FM_DASH_SYA))],
            [InlineKeyboardButton("DAVINA", callback_data=str(M1_FM_DASH_DAV))],
            [InlineKeyboardButton("GRAFANA", callback_data=str(M1_FM_DASH_GRA))],
            [InlineKeyboardButton("TABLUE", callback_data=str(M1_FM_DASH_TAB))],
            [InlineKeyboardButton("NACEL", callback_data=str(M1_FM_DASH_NCL))],
            [InlineKeyboardButton("NADIN", callback_data=str(M1_FM_DASH_NDN))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *AVAIL DASH*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
        query.message.reply_text("Penjelasan :\n*SYANTIC* : System Analyzer Network & Tracker Incident Center\n*DAVINA* : -\n*GRAFANA* : Dashboard Monitoring\n*TABLUE* : -\n*NACEL* : -\n*NADIN* : -",parse_mode=telegram.ParseMode.MARKDOWN)

def m1_fm_dash_sya(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_SYA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER SYANTIC", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *SYANTIC*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_SYA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER SYANTIC", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *SYANTIC*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)

def m1_fm_dash_sya_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+b5iatk3K_qAwNDJl'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'SYANTIC'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'SYA' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SYANTIC'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_SYA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_FM))],
                    [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SYANTIC'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di SYANTIC, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_syantic()
                query = update.callback_query
                query.answer()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None' WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_SYA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SYA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SYA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SYA

def get_summary_syantic():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'SYANTIC'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_sya(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SYA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SYA
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SYA
def end_sya(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "SYA"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'SYANTIC', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SYANTIC'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SYANTIC')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "SYA"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'SYANTIC', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001919380650','{ticket}','{problem_title}','{data_select[8]}','open','SYANTIC','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SYANTIC'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SYANTIC')
    return ConversationHandler.END

def m1_fm_dash_dav(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_DAV_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER DAVINA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *DAVINA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_DAV_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER DAVINA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *DAVINA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)

def m1_fm_dash_dav_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+b5iatk3K_qAwNDJl'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'DAVINA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'DAV' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'DAVINA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_DAV))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_FM))],
                    [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'DAVINA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di DAVINA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_davina()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_DAV
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DAV
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DAV
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DAV
def get_summary_davina():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'DAVINA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_dav(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_DAV
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DAV
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DAV
def end_dav(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "DAV"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'DAVINA', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'DAVINA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'DAVINA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "DAV"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'DAVINA', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001919380650','{ticket}','{problem_title}','{data_select[8]}','open','DAVINA','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'DAVINA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'DAVINA')
    return ConversationHandler.END
def m1_fm_dash_gra(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_GRA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER GRAFANA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *GRAFANA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_GRA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER GRAFANA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *GRAFANA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m1_fm_dash_gra_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+b5iatk3K_qAwNDJl'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'GRAFANA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'GRA' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'GRAFANA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_GRA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_FM))],
                    [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'GRAFANA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di  GRAFANA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_grafana()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_GRA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_GRA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_GRA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_GRA
def get_summary_grafana():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'GRAFANA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_gra(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_GRA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_GRA
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_GRA
def end_gra(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "GRA"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'GRAFANA', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'GRAFANA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'GRAFANA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "GRA"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'GRAFANA', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001919380650','{ticket}','{problem_title}','{data_select[8]}','open','GRAFANA','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'GRAFANA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'GRAFANA')
    return ConversationHandler.END
def m1_fm_dash_tab(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_TAB_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TABLUE", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *TABLUE*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_TAB_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TABLUE", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *TABLUE*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m1_fm_dash_tab_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+b5iatk3K_qAwNDJl'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'TABLUE'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'TAB' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TABLUE'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_TAB))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_FM))],
                    [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TABLUE'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di TABLUE, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_tablue()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_TAB
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TAB
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TAB
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TAB
def get_summary_tablue():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'TABLUE'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_tab(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TAB
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TAB
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TAB
def end_tab(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "TAB"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TABLUE', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TABLUE'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TABLUE')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "TAB"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TABLUE', status = 'open' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001919380650','{ticket}','{problem_title}','{data_select[8]}','open','TABLUE','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TABLUE'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TABLUE')
    return ConversationHandler.END
def m1_fm_dash_ncl(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_NCL_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER NACEL", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *NACEL*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_NCL_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER NACEL", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *NACEL*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m1_fm_dash_ncl_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+b5iatk3K_qAwNDJl'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'NACEL'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'NCL' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NACEL'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_NCL))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_FM))],
                    [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NACEL'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di NACEL, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_nacel()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_NCL
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NCL
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NCL
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NCL
def get_summary_nacel():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'NACEL'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ncl(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NCL
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NCL
def end_ncl(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "NCL"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'NACEL', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NACEL'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NACEL')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "NCL"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'NACEL', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001919380650','{ticket}','{problem_title}','{data_select[8]}','open','NACEL','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NACEL'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NACEL')
    return ConversationHandler.END
def m1_fm_dash_ndn(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_NDN_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER NADIN", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *NADIN*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_DASH_NDN_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER NADIN", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *NADIN*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m1_fm_dash_ndn_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+b5iatk3K_qAwNDJl'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'NADIN'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'NDN' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NADIN'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_NDN))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_FM))],
                    [InlineKeyboardButton("Back", callback_data=str(M1_FM_DASH))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NADIN'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di NADIN, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_nadin()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_NDN
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDN
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDN
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDN

def get_summary_nadin():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'NADIN'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ndn(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NDN
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NDN
def end_ndn(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "NDN"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'NADIN', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NADIN'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NADIN')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "NDN"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'NADIN', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001919380650','{ticket}','{problem_title}','{data_select[8]}','open','NADIN','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NADIN'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NADIN')
    return ConversationHandler.END

def m1_fm_inap(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("BUG SIM AND ALARM", callback_data=str(M1_FM_INAP_CREATE_1))],
            [InlineKeyboardButton("Cant Close Ticket", callback_data=str(M1_FM_INAP_CREATE_2))],
            [InlineKeyboardButton("Ticket Cant Synchron", callback_data=str(M1_FM_INAP_CREATE_3))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_INAP_CREATE_4))],
            [InlineKeyboardButton("REQUESTS USER INAP", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *INAP*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("BUG SIM AND ALARM", callback_data=str(M1_FM_INAP_CREATE_1))],
            [InlineKeyboardButton("Cant Close Ticket", callback_data=str(M1_FM_INAP_CREATE_2))],
            [InlineKeyboardButton("Ticket Cant Synchron", callback_data=str(M1_FM_INAP_CREATE_3))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_INAP_CREATE_4))],
            [InlineKeyboardButton("REQUESTS USER INAP", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *INAP*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m1_fm_inap_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'INAP'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'INP' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'INAP'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_INAP))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_FM))],
                    [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'INAP'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di INAP, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_inap()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_INAP
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_INAP
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_INAP
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_INAP
        
def get_summary_inap():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'INAP'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_inap(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_INAP
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_INAP
def end_inap(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "INP"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001972394627', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'INAP', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+Mkoyq7Vip-k4ZGM9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk INAP", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'INAP'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk INAP", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'INAP')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "INP"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001972394627', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'INAP', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001972394627','{ticket}','{problem_title}','{data_select[8]}','open','INAP','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+Mkoyq7Vip-k4ZGM9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk INAP", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'INAP'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk INAP", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'INAP')
    return ConversationHandler.END

def m1_fm_nice_create(update: Update, _: CallbackContext) -> None:
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+yZeTNrEtIkc3YTA1'
    query.edit_message_text("Anda memilih : *BUAT TIKET*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'INEOM'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'INM' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'INEOM'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_NICE))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_NICE))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_FM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'INEOM'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di INEOM, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_nice()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_NICE
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NICE
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NICE
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NICE

def m1_fm_nice_other_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            print(data)
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("Other Problems ➞ {}".format(data_text))
            log_bot.close()

    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+yZeTNrEtIkc3YTA1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    if data_text in 'Loading':
        keyboard = [
            [InlineKeyboardButton("Freeze Menu", callback_data=str(M1_FM_NICE_OTHER_CREATE_1A))],
            [InlineKeyboardButton("Timeout", callback_data=str(M1_FM_NICE_OTHER_CREATE_1B))],
            [InlineKeyboardButton("Server Error", callback_data=str(M1_FM_NICE_OTHER_CREATE_1C))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Menu Error':
        keyboard = [
            [InlineKeyboardButton("Take Over", callback_data=str(M1_FM_NICE_OTHER_CREATE_2A))],
            [InlineKeyboardButton("Submit Document", callback_data=str(M1_FM_NICE_OTHER_CREATE_2B))],
            [InlineKeyboardButton("Bug", callback_data=str(M1_FM_NICE_OTHER_CREATE_2C))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Registrasi':
        keyboard = [
            [InlineKeyboardButton("Unregistered Device", callback_data=str(M1_FM_NICE_OTHER_CREATE_3A))],
            [InlineKeyboardButton("Verifikasi", callback_data=str(M1_FM_NICE_OTHER_CREATE_3B))],
            [InlineKeyboardButton("Expired User", callback_data=str(M1_FM_NICE_OTHER_CREATE_3C))],
            [InlineKeyboardButton("Inactive Unset IP Public", callback_data=str(M1_FM_NICE_OTHER_CREATE_3D))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Tidak Update':
        keyboard = [
            [InlineKeyboardButton("Ticket Alarm Site Down", callback_data=str(M1_FM_NICE_OTHER_CREATE_4A))],
            [InlineKeyboardButton("Teritory Operation", callback_data=str(M1_FM_NICE_OTHER_CREATE_4B))],
            [InlineKeyboardButton("Fake Alarm", callback_data=str(M1_FM_NICE_OTHER_CREATE_4C))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Other Problems':
        query.message.reply_text(f"Masukkan detail problem :")
        return END_NICE


def m1_fm_nice_other_create_ticket(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'INEOM'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'INM' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'INEOM'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_NICE))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_NICE))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_FM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'INEOM'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di INEOM, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_nice()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_NICE
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NICE
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NICE
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NICE
        
def get_summary_nice():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'INEOM'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_nice(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NICE
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NICE
def end_nice(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    ticket = "INM"+"".join(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001833132457', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'INEOM', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+rqEJdo9UfetkOTc9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk INEOM", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'INEOM'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk INEOM", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'INEOM')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "INM"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001833132457', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'INEOM', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001833132457','{ticket}','{problem_title}','{data_select[8]}','open','INEOM','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+rqEJdo9UfetkOTc9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk INEOM", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'INEOM'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk INEOM", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'INEOM')
    return ConversationHandler.END
def m1_fm_nice(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("KENDALA APLIKASI >>", callback_data=str(M1_FM_NICE_KA))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M1_FM_NICE_OTHER))],
            [InlineKeyboardButton("REQUESTS USER INEOM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *NICE/INEOM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("KENDALA APLIKASI >>", callback_data=str(M1_FM_NICE_KA))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M1_FM_NICE_OTHER))],
            [InlineKeyboardButton("REQUESTS USER INEOM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *NICE/INEOM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m1_fm_nice_ka(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()

    query = update.callback_query
    query.answer()
    keyboard = [
            [InlineKeyboardButton("KENDALA LOGIN >>", callback_data=str(M1_FM_NICE_KA_KL))],
            [InlineKeyboardButton("KENDALA AKUN >>", callback_data=str(M1_FM_NICE_KA_KA))],
            [InlineKeyboardButton("VERIFIKASI AKUN >>", callback_data=str(M1_FM_NICE_KA_VA))],
            [InlineKeyboardButton("PERPANJANGAN AKUN >>", callback_data=str(M1_FM_NICE_KA_PA))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE))],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text="Anda memilih : *KENDALA APLIKASI*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m1_fm_nice_other(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Loading >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_1))],
            [InlineKeyboardButton("Menu Error >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_2))],
            [InlineKeyboardButton("Registrasi >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_3))],
            [InlineKeyboardButton("Tidak Update >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_4))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Loading >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_1))],
            [InlineKeyboardButton("Menu Error >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_2))],
            [InlineKeyboardButton("Registrasi >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_3))],
            [InlineKeyboardButton("Tidak Update >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_4))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M1_FM_NICE_OTHER_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m1_fm_nice_ka_kl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    keyboard = [
            [InlineKeyboardButton("Bagaimana jika tidak bisa login?", callback_data=str(M1_FM_NICE_KA_KL_NOT))],
            [InlineKeyboardButton("Bagaimana jika lupa password akun?", callback_data=str(M1_FM_NICE_KA_KL_FORGET))],
            [InlineKeyboardButton("Bagaimana cara mengubah password akun?", callback_data=str(M1_FM_NICE_KA_KL_CHANGE))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE_KA))],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text="Anda memilih : *KENDALA LOGIN*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m1_fm_nice_ka_kl_not(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/login-and-password#bagaimana-jika-tidak-bisa-login',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/login-and-password#bagaimana-jika-tidak-bisa-login',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_kl_forget(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/login-and-password#bagaimana-jika-lupa-password-akun',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/login-and-password#bagaimana-jika-lupa-password-akun',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_kl_change(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/login-and-password#bagaimana-cara-mengubah-password-akun',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/login-and-password#bagaimana-cara-mengubah-password-akun',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m1_fm_nice_ka_ka(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    keyboard = [
            [InlineKeyboardButton("Bagaimana cara download Form Request User & NDA?", callback_data=str(M1_FM_NICE_KA_KA_NDA))],
            [InlineKeyboardButton("Bagaimana cara registrasi untuk user baru?", callback_data=str(M1_FM_NICE_KA_KA_NEW))],
            [InlineKeyboardButton("Bisakah satu akun login di dua device atau lebih?", callback_data=str(M1_FM_NICE_KA_KA_TWO))],
            [InlineKeyboardButton("Bagaimana jika device digunakan rusak/hilang?", callback_data=str(M1_FM_NICE_KA_KA_LOST))],
            [InlineKeyboardButton("Bagaimana cara mengubah role yang digunakan?", callback_data=str(M1_FM_NICE_KA_KA_ROLE))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE_KA))],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text="Anda memilih : *KENDALA AKUN*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m1_fm_nice_ka_ka_nda(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bagaimana-cara-melakukan-download-form-request-form-request-user-and-nda',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bagaimana-cara-melakukan-download-form-request-form-request-user-and-nda',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_ka_new(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bagaimana-cara-melakukan-registrasi-untuk-user-baru',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bagaimana-cara-melakukan-registrasi-untuk-user-baru',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_ka_two(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bisakah-satu-akun-login-di-dua-device-atau-lebih',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bisakah-satu-akun-login-di-dua-device-atau-lebih',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_ka_lost(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bagaimana-jika-device-yang-digunakan-rusak-hilang-dan-akan-menggunakan-device-baru',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bagaimana-jika-device-yang-digunakan-rusak-hilang-dan-akan-menggunakan-device-baru',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_ka_role(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bagaimana-cara-mengubah-role-yang-sudah-digunakan',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/account-settings#bagaimana-cara-mengubah-role-yang-sudah-digunakan',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m1_fm_nice_ka_va(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    keyboard = [
            [InlineKeyboardButton("Bagaimana cara verifikasi akun?", callback_data=str(M1_FM_NICE_KA_VA_ACC))],
            [InlineKeyboardButton("Bagaimana jika terkendala saat verifikasi email?", callback_data=str(M1_FM_NICE_KA_VA_EML))],
            [InlineKeyboardButton("Bagaimana cara melakukan pengisian izin akses?", callback_data=str(M1_FM_NICE_KA_VA_PRM))],
            [InlineKeyboardButton("Bagaimana mengunggah file dengan format PDF?", callback_data=str(M1_FM_NICE_KA_VA_PDF))],
            [InlineKeyboardButton("Bagaimana TSA melakukan approval verify?", callback_data=str(M1_FM_NICE_KA_VA_TSA))],
            [InlineKeyboardButton("Bagaimana NOP melakukan approval izin akses?", callback_data=str(M1_FM_NICE_KA_VA_APV))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE_KA))],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text="Anda memilih : *VERIFIKASI AKUN*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m1_fm_nice_ka_va_acc(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-cara-melakukan-verifikasi-akun',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-cara-melakukan-verifikasi-akun',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_va_eml(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-jika-mengalami-kendala-invalid-link-saat-melakukan-verifikasi-email',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-jika-mengalami-kendala-invalid-link-saat-melakukan-verifikasi-email',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_va_prm(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-cara-melakukan-pengisian-izin-akses',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-cara-melakukan-pengisian-izin-akses',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_va_pdf(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-jika-tidak-bisa-mengunggah-file-dengan-format-pdf',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-jika-tidak-bisa-mengunggah-file-dengan-format-pdf',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_va_tsa(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-cara-tsa-melakukan-approval-verifikasi-dokumen',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-cara-tsa-melakukan-approval-verifikasi-dokumen',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m1_fm_nice_ka_va_apv(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-cara-nop-melakukan-approval-izin-akses',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/verify-account#bagaimana-cara-nop-melakukan-approval-izin-akses',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m1_fm_nice_ka_pa(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    keyboard = [
            [InlineKeyboardButton("Bagaimana jika akun telah expired?", callback_data=str(M1_FM_NICE_KA_PA_EXP))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM_NICE_KA))],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text="Anda memilih : *PERPANJANGAN AKUN*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m1_fm_nice_ka_pa_exp(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/expired-account#bagaimana-jika-akun-telah-expired',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.edit_message_text('https://docs.ineom-tsel.mit.id/faq/user-and-account/expired-account#bagaimana-jika-akun-telah-expired',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M1_FM_NICE_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m1_fm_ossera(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_OSSERA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER OSSERA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *OSSERA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_OSSERA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER OSSERA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *OSSERA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m1_fm_ossera_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+b5iatk3K_qAwNDJl'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'OSSERA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'OSR' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'OSSERA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_OSSERA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_FM))],
                    [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'OSSERA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di OSSERA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ossera()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_OSSERA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OSSERA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OSSERA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OSSERA
def get_summary_ossera():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'OSSERA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ossera(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_OSSERA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OSSERA
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OSSERA
def end_ossera(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "OSR"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'OSSERA', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'OSSERA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'OSSERA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "OSR"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'OSSERA', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001919380650','{ticket}','{problem_title}','{data_select[8]}','open','OSSERA','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'OSSERA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'OSSERA')
    return ConversationHandler.END

def m1_fm_pmsossera(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_PMSOSSERA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER PM OSSERA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *PMS OSSERA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M1_FM_PMSOSSERA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER PM OSSERA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *PMS OSSERA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m1_fm_pmsossera_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+b5iatk3K_qAwNDJl'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'PMS OSSERA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'PSR' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'PMS OSSERA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_PMSOSSERA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_FM))],
                    [InlineKeyboardButton("Back", callback_data=str(M1_FM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'PMSOSSERA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di OSSERA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_pmsossera()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_PMSOSSERA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_PMSOSSERA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_PMSOSSERA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_PMSOSSERA
def get_summary_pmsossera():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'PMS OSSERA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_pmsossera(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_PMSOSSERA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_PMSOSSERA
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_PMSOSSERA
def end_pmsossera(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "PSR"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'PMS OSSERA', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'OSSERA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'PMS OSSERA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "PSR"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001919380650', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'PMS OSSERA', status = 'open', fcaps = 'FAULT' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001919380650','{ticket}','{problem_title}','{data_select[8]}','open','PMS OSSERA','{date_time}','None','FAULT','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+b5iatk3K_qAwNDJl"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'PMS OSSERA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'OSSERA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'PMS OSSERA')
    return ConversationHandler.END

def m2_c(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("CHRONO >>", callback_data=str(M2_C_CHRONO))],
                [InlineKeyboardButton("CRQ (Change Request)", callback_data=str(M2_C_CRQ))],
                [InlineKeyboardButton("ICAM", callback_data=str(M2_C_ICAM))],
                [InlineKeyboardButton("LACIMA", callback_data=str(M2_C_LACIMA))],
                [InlineKeyboardButton("NAVA", callback_data=str(M2_C_NAVA))],
                [InlineKeyboardButton("TRAVERSA", callback_data=str(M2_C_TRAVERSA))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_C))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *CONFIGURATION*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*CHRONO* : -\n*CRQ* : -\n*ICAM* : -\n*LACIMA* : -\n*NAVA* : -\n*TRAVERSA* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("CHRONO >>", callback_data=str(M2_C_CHRONO))],
                [InlineKeyboardButton("CRQ (Change Request)", callback_data=str(M2_C_CRQ))],
                [InlineKeyboardButton("ICAM", callback_data=str(M2_C_ICAM))],
                [InlineKeyboardButton("LACIMA", callback_data=str(M2_C_LACIMA))],
                [InlineKeyboardButton("NAVA", callback_data=str(M2_C_NAVA))],
                [InlineKeyboardButton("TRAVERSA", callback_data=str(M2_C_TRAVERSA))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_C))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *CONFIGURATION*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*CHRONO* : -\n*CRQ* : -\n*ICAM* : -\n*LACIMA* : -\n*NAVA* : -\n*TRAVERSA* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("CHRONO >>", callback_data=str(M2_C_CHRONO))],
                [InlineKeyboardButton("CRQ (Change Request)", callback_data=str(M2_C_CRQ))],
                [InlineKeyboardButton("ICAM", callback_data=str(M2_C_ICAM))],
                [InlineKeyboardButton("LACIMA", callback_data=str(M2_C_LACIMA))],
                [InlineKeyboardButton("NAVA", callback_data=str(M2_C_NAVA))],
                [InlineKeyboardButton("TRAVERSA", callback_data=str(M2_C_TRAVERSA))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_C))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *CONFIGURATION*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*CHRONO* : -\n*CRQ* : -\n*ICAM* : -\n*LACIMA* : -\n*NAVA* : -\n*TRAVERSA* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("CHRONO >>", callback_data=str(M2_C_CHRONO))],
                [InlineKeyboardButton("CRQ (Change Request)", callback_data=str(M2_C_CRQ))],
                [InlineKeyboardButton("ICAM", callback_data=str(M2_C_ICAM))],
                [InlineKeyboardButton("LACIMA", callback_data=str(M2_C_LACIMA))],
                [InlineKeyboardButton("NAVA", callback_data=str(M2_C_NAVA))],
                [InlineKeyboardButton("TRAVERSA", callback_data=str(M2_C_TRAVERSA))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_C))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *CONFIGURATION*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*CHRONO* : -\n*CRQ* : -\n*ICAM* : -\n*LACIMA* : -\n*NAVA* : -\n*TRAVERSA* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
def m2_c_chrono(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("CHECK SITE", callback_data=str(M2_C_CHRONO_CHECK))],
            [InlineKeyboardButton("CREATE TICKET", callback_data=str(M2_C_CHRONO_TICKET))],
            [InlineKeyboardButton("REQUESTS USER CHRONO", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *CHRONO*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
        query.message.reply_text("Penjelasan :\n*CHECK SITE* : -\n*CREATE TICKET* : -",parse_mode=telegram.ParseMode.MARKDOWN)
    except:
        keyboard = [
            [InlineKeyboardButton("CHECK SITE", callback_data=str(M2_C_CHRONO_CHECK))],
            [InlineKeyboardButton("CREATE TICKET", callback_data=str(M2_C_CHRONO_TICKET))],
            [InlineKeyboardButton("REQUESTS USER CHRONO", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *CHRONO*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
        query.message.reply_text("Penjelasan :\n*CHECK SITE* : -\n*CREATE TICKET* : -",parse_mode=telegram.ParseMode.MARKDOWN)
def m2_c_chrono_check(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    query.edit_message_text("Anda memilih : *CHECK SITE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text(f"Ketik SITE ID :\nKetik /cancel untuk membatalkan")
    return END_M2_C_CHRONO_CHECK
def end_m2_c_chrono_check(update: Update, _: CallbackContext) -> None:
    now = datetime.now() # current date and time
    username = update.message.from_user.username
    username_telegram = 'https://t.me/{}'.format(username)
    fullname_telegram = update.message.from_user.full_name
    date_time = now.strftime("%d-%m-%Y %H:%M:%S WIB")
    query_date = now.strftime("%Y-%m-%d")
    try:
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/data_site_chrono.txt"):
            os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/data_site_chrono.txt")
            sleep(1)
        else:
            print("The file does not exist")
            sleep(1)
        parameter_site = update.message.text.upper()
        log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/data_site_chrono.txt','a')
        log_bot.write("{}".format(parameter_site))
        log_bot.close()
        URL1 = "http://10.53.193.110:5000/longlatchecker?sitecode={}".format(parameter_site)
        res1 = requests.get(url=URL1)
        response = res1.json()
        return_text = get_end_m2_c_chrono_check()
        for cmdOUT in splitting(return_text):
            update.message.reply_text(cmdOUT, disable_web_page_preview=True)
        
        URL1 = "http://10.53.193.110:5000/longlatchecker?sitecode={}".format(parameter_site)
        res1 = requests.get(url=URL1)
        response = res1.json()

        site_id = response['sitecode']
        print(site_id)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"INSERT INTO production.data_helpdesk_auto_command select 'CHRONO','{date_time}','{site_id}','{username_telegram}','CHECK SITE'"
        client.command(query)
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"SELECT count(*) as `count` FROM production.data_helpdesk_auto_command dhac WHERE toDate(parseDateTime32BestEffortOrNull(REPLACE(date, 'WIB', ''))) = '{query_date}' and site_id = '{parameter_site}' and app_name = 'CHRONO'"
        data_count = client.command(query)
        chatid_log = '-1001824740391'
        bot_log.send_message(chat_id=chatid_log,text=f'🔎 Check Site ID *{parameter_site}* with total *({data_count})* in CHRONO based on today by [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
        print('Insert Data')
    except:
        update.message.reply_text("Site ID Tidak ditemukan hari ini, Ketik Site ID yang lain di  /menu - Configuration - Chrono - Check",parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END
def get_end_m2_c_chrono_check():
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    data_param = open('/home/dimas/baru/helpdeskbot_v2/data_log/data_site_chrono.txt','r')
    data_param = data_param.read()

    URL1 = "http://10.53.193.110:5000/longlatchecker?sitecode={}".format(data_param)
    res1 = requests.get(url=URL1)
    response = res1.json()
    text = ""
    text += f"🔎 Summary Site ID base on Today : {data_param}\nDate : {date_time}\n\n"
    text += f"📍 REGIONAL : {response['regional']}\n"
    text += f"🗼 VENDOR : {response['vendor']}\n"
    ne_list_ = str(response['ne_list']).replace("'","").replace("[","").replace("]","")
    text += f"📝 NE LIST : {ne_list_}"
    text +='\n\n'
    x_2g = response['rat_status']['2G']
    x_3g = response['rat_status']['3G']
    x_4g = response['rat_status']['4G']
    x_5g = response['rat_status']['5G']
    text += 'Checklist :\n'
    if x_2g is False:
        text += '📶 2G = N/A\n'
    else:
        text += '📶 2G = ✅\n'
    if x_3g is False:
        text += '📶 3G = N/A\n'
    else:
        text += '📶 3G = ✅\n'
    if x_4g is False:
        text += '📶 4G = N/A\n'
    else:
        text += '📶 4G = ✅\n'
    if x_5g is False:
        text += '📶 5G = N/A\n'
    else:
        text += '📶 5G = ✅\n'
    latlong = str(response['latlong_details']).replace("[","").replace("]","").replace(" latlong valid.","").replace("'","").replace(", "," & ")
    text += f'📍 LAT-LONG = {latlong} VALID\n'
    text += '\n'
    text += '🔻 Detail List :'
    for data in response['details']:
        if '2G' in data['rat']:
            text += f"BTS Name : {data['btsname']}\n"
            text += f"BTS Index : {data['btsindex']}\n"
            text += f"Cell Name : {data['cell_name']}\n"
            text += f"NE : {data['ne']}\n"
            text += f"RAT : {data['rat']}\n"
            text += f"CI : {data['ci']}\n"
            text += f"LAC : {data['lac']}\n"
            text += f"LATITUDE : {data['latitude']}\n"
            text += f"LONGITUDE : {data['longitude']}\n\n"
        elif '3G' in data['rat']:
            text += f"BTS Name : {data['btsname']}\n"
            text += f"BTS Index : {data['btsindex']}\n"
            text += f"Cell Name : {data['cell_name']}\n"
            text += f"NE : {data['ne']}\n"
            text += f"RAT : {data['rat']}\n"
            text += f"CI : {data['ci']}\n"
            text += f"LAC : {data['lac']}\n"
            text += f"LATITUDE : {data['latitude']}\n"
            text += f"LONGITUDE : {data['longitude']}\n\n"
        elif '4G' in data['rat']:
            text += f"BTS Name : {data['btsname']}\n"
            text += f"Cell Name : {data['cell_name']}\n"
            text += f"NE : {data['ne']}\n"
            text += f"RAT : {data['rat']}\n"
            text += f"CI : {data['ci']}\n"
            text += f"eNodeBID : {data['eNodeBID']}\n"
            text += f"LAC : {data['lac']}\n"
            text += f"LATITUDE : {data['latitude']}\n"
            text += f"LONGITUDE : {data['longitude']}\n\n"
        elif '5G' in data['rat']:
            text += f"BTS Name : {data['btsname']}\n"
            text += f"Cell Name : {data['cell_name']}\n"
            text += f"NE : {data['ne']}\n"
            text += f"RAT : {data['rat']}\n"
            text += f"CI : {data['ci']}\n"
            text += f"gNodeBID : {data['gNodeBID']}\n"
            text += f"LAC : {data['lac']}\n"
            text += f"LATITUDE : {data['latitude']}\n"
            text += f"LONGITUDE : {data['longitude']}\n\n"
    text += '\n#Note : Berdasarkan tanggal hari ini Site ID berikut sudah ada di CHRONO\n'
    text += '\nRegards\nOCHABOT & Team'
    return text

def m2_c_chrono_ticket(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("LAC CI Doesnt Appear (LAC CI Tidak Muncul)", callback_data=str(M2_C_CHRONO_TICKET_CREATE_1))],
            [InlineKeyboardButton("Site ID Not Updated (Site ID Tidak Diperbaruhi)", callback_data=str(M2_C_CHRONO_TICKET_CREATE_2))],
            [InlineKeyboardButton("New Site Not Updated (Site Baru Tidak Diperbaruhi)", callback_data=str(M2_C_CHRONO_TICKET_CREATE_3))],
            [InlineKeyboardButton("LAC CI Not Updated (LAC CI Tidak Diperbaruhi)", callback_data=str(M2_C_CHRONO_TICKET_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_CHRONO_TICKET_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *CREATE TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("LAC CI Doesnt Appear (LAC CI Tidak Muncul)", callback_data=str(M2_C_CHRONO_TICKET_CREATE_1))],
            [InlineKeyboardButton("Site ID Not Updated (Site ID Tidak Diperbaruhi)", callback_data=str(M2_C_CHRONO_TICKET_CREATE_2))],
            [InlineKeyboardButton("New Site Not Updated (Site Baru Tidak Diperbaruhi)", callback_data=str(M2_C_CHRONO_TICKET_CREATE_3))],
            [InlineKeyboardButton("LAC CI Not Updated (LAC CI Tidak Diperbaruhi)", callback_data=str(M2_C_CHRONO_TICKET_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_CHRONO_TICKET_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *CREATE TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m2_c_chrono_ticket_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","").split(' (')[0]
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+9sVF02CkDIsyYWQ1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'CHRONO'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'CHR' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CHRONO'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_CHR))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_CHRONO))],
                    [InlineKeyboardButton("Back", callback_data=str(M2_C))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CHRONO'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di CHRONO, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_chrono()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:    
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_CHR
        else:    
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CHR
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CHR
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CHR
def get_summary_chrono():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'CHRONO'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_chr(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CHR
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CHR

def end_chr(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "CHR"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001824740391', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CHRONO', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+9sVF02CkDIsyYWQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CHRONO'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)        
        log_bot(update, 'CHRONO')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "CHR"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001824740391', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CHRONO', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001824740391','{ticket}','{problem_title}','{data_select[8]}','open','CHRONO','{date_time}','None','CONFIGURATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+9sVF02CkDIsyYWQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CHRONO'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'CHRONO')
    return ConversationHandler.END
def m2_c_crq(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_CRQ_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER CRQ", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *CRQ (Change Request)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_CRQ_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER CRQ", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *CRQ (Change Request)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m2_c_crq_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+wYahLEfjQ6RmZmQ1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'CRQ'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'CRQ' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CHRONO'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_CRQ))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_C))],
                    [InlineKeyboardButton("Back", callback_data=str(M2_C))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CRQ'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di CRQ, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_crq()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_CRQ
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CRQ
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CRQ
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CRQ
        
def get_summary_crq():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'CRQ'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_crq(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CRQ
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CRQ
def end_crq(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "CRQ"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CRQ', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+wYahLEfjQ6RmZmQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CRQ'"
                data = client.command(query)
                expert.append(data)      
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'CRQ')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "CRQ"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CRQ', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001831369226','{ticket}','{problem_title}','{data_select[8]}','open','CRQ','{date_time}','None','CONFIGURATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+wYahLEfjQ6RmZmQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CRQ'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'CRQ')
    return ConversationHandler.END

def m2_c_icam(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("LAC CI Doesnt Appear (LAC CI Tidak Muncul)", callback_data=str(M2_C_ICAM_CREATE_1))],
            [InlineKeyboardButton("Site ID Not Updated (Site ID Tidak Diperbaruhi)", callback_data=str(M2_C_ICAM_CREATE_2))],
            [InlineKeyboardButton("New Site Not Updated (Site Baru Tidak Diperbaruhi)", callback_data=str(M2_C_ICAM_CREATE_3))],
            [InlineKeyboardButton("LAC CI Not Updated (LAC CI Tidak Diperbaruhi)", callback_data=str(M2_C_ICAM_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_ICAM_CREATE_5))],
            [InlineKeyboardButton("REQUESTS USER ICAM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *ICAM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("LAC CI Doesnt Appear (LAC CI Tidak Muncul)", callback_data=str(M2_C_ICAM_CREATE_1))],
            [InlineKeyboardButton("Site ID Not Updated (Site ID Tidak Diperbaruhi)", callback_data=str(M2_C_ICAM_CREATE_2))],
            [InlineKeyboardButton("New Site Not Updated (Site Baru Tidak Diperbaruhi)", callback_data=str(M2_C_ICAM_CREATE_3))],
            [InlineKeyboardButton("LAC CI Not Updated (LAC CI Tidak Diperbaruhi)", callback_data=str(M2_C_ICAM_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_ICAM_CREATE_5))],
            [InlineKeyboardButton("REQUESTS USER ICAM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *ICAM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m2_c_icam_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","").split(' (')[0]
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+9sVF02CkDIsyYWQ1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'ICAM'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'ICM' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ICAM'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_ICAM))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_C))],
                    [InlineKeyboardButton("Back", callback_data=str(M2_C))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ICAM'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di ICAM, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_icam()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_ICAM
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ICAM
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ICAM
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ICAM
        
def get_summary_icam():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'ICAM'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_icam(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_ICAM
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_ICAM
def end_icam(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "ICM"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'ICAM', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+9sVF02CkDIsyYWQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ICAM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'LACIMA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'ICAM')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "ICM"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'ICAM', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001831369226','{ticket}','{problem_title}','{data_select[8]}','open','ICAM','{date_time}','None','CONFIGURATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+9sVF02CkDIsyYWQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ICAM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'ICAM'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'ICAM')
    return ConversationHandler.END


def m2_c_lacima(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("LAC CI Doesnt Appear (LAC CI Tidak Muncul)", callback_data=str(M2_C_LACIMA_CREATE_1))],
            [InlineKeyboardButton("Site ID Not Updated (Site ID Tidak Diperbaruhi)", callback_data=str(M2_C_LACIMA_CREATE_2))],
            [InlineKeyboardButton("New Site Not Updated (Site Baru Tidak Diperbaruhi)", callback_data=str(M2_C_LACIMA_CREATE_3))],
            [InlineKeyboardButton("LAC CI Not Updated (LAC CI Tidak Diperbaruhi)", callback_data=str(M2_C_LACIMA_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_LACIMA_CREATE_5))],
            [InlineKeyboardButton("REQUESTS USER lACIMA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *LACIMA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("LAC CI Doesnt Appear (LAC CI Tidak Muncul)", callback_data=str(M2_C_LACIMA_CREATE_1))],
            [InlineKeyboardButton("Site ID Not Updated (Site ID Tidak Diperbaruhi)", callback_data=str(M2_C_LACIMA_CREATE_2))],
            [InlineKeyboardButton("New Site Not Updated (Site Baru Tidak Diperbaruhi)", callback_data=str(M2_C_LACIMA_CREATE_3))],
            [InlineKeyboardButton("LAC CI Not Updated (LAC CI Tidak Diperbaruhi)", callback_data=str(M2_C_LACIMA_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_LACIMA_CREATE_5))],
            [InlineKeyboardButton("REQUESTS USER lACIMA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *LACIMA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m2_c_lacima_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","").split(' (')[0]
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+9sVF02CkDIsyYWQ1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'LACIMA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'LCM' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'LACIMA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_LACIMA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_C))],
                    [InlineKeyboardButton("Back", callback_data=str(M2_C))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'LACIMA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di LACIMA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_lacima()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_LCM
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_LCM
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_LCM
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_LCM
        
def get_summary_lacima():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'LACIMA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_lacima(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_LCM
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_LCM
def end_lcm(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "LCM"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'LACIMA', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+9sVF02CkDIsyYWQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'LACIMA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'LACIMA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "LCM"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'LACIMA', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001831369226','{ticket}','{problem_title}','{data_select[8]}','open','LACIMA','{date_time}','None','CONFIGURATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+9sVF02CkDIsyYWQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'LACIMA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk CHRONO & LACIMA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'LACIMA')
    return ConversationHandler.END
def m2_c_nava(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_NAVA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER NAVA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *NAVA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_NAVA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER NAVA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *NAVA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m2_c_nava_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+wYahLEfjQ6RmZmQ1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'NAVA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'NAV' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NAVA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_NAVA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_C))],
                    [InlineKeyboardButton("Back", callback_data=str(M2_C))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NAVA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di NAVA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_nav()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_NAV
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NAV
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NAV
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NAV
        
def get_summary_nav():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'NAVA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_nava(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NAV
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NAV
def end_nav(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "NAV"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'NAVA', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+wYahLEfjQ6RmZmQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NAVA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NAVA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "NAV"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'NAVA', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001831369226','{ticket}','{problem_title}','{data_select[8]}','open','NAVA','{date_time}','None','CONFIGURATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+wYahLEfjQ6RmZmQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NAVA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NAVA')
    return ConversationHandler.END
def m2_c_traversa(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_TRAVERSA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TRAVERSA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *TRAVERSA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M2_C_TRAVERSA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TRAVERSA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M2_C))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *TRAVERSA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m2_c_traversa_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+wYahLEfjQ6RmZmQ1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'TRAVERSA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'TVS' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TRAVERSA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_TRAVERSA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_C))],
                    [InlineKeyboardButton("Back", callback_data=str(M2_C))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TRAVERSA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di TRAVERSA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_tvs()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_TVS
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TVS
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TVS
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TVS
def get_summary_tvs():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'TRAVERSA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_traversa(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TVS
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TVS
def end_tvs(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "TVS"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TRAVERSA', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+wYahLEfjQ6RmZmQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TRAVERSA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'TRAVERSA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "TVS"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001831369226', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TRAVERSA', status = 'open', fcaps = 'CONFIGURATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001831369226','{ticket}','{problem_title}','{data_select[8]}','open','TRAVERSA','{date_time}','None','CONFIGURATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+wYahLEfjQ6RmZmQ1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TRAVERSA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Configuration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TRAVERSA')
    return ConversationHandler.END


def m3_a(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("AGATA", callback_data=str(M3_A_AGATA))],
                [InlineKeyboardButton("AMESTY >>", callback_data=str(M3_A_AMT))],
                [InlineKeyboardButton("DAVINCI", callback_data=str(M3_A_DVC))],
                [InlineKeyboardButton("EATP >>", callback_data=str(M3_A_EATP))],
                [InlineKeyboardButton("ETSA >>", callback_data=str(M3_A_ETSA))],
                [InlineKeyboardButton("EWONDER >>", callback_data=str(M3_A_EWONDER))],
                [InlineKeyboardButton("FELISA", callback_data=str(M3_A_FELISA))],
                [InlineKeyboardButton("FIOLA >>", callback_data=str(M3_A_FIOLA))],
                [InlineKeyboardButton("LOLITA", callback_data=str(M3_A_LOLITA))],
                [InlineKeyboardButton("SCARLETT >>", callback_data=str(M3_A_SCARLET))],
                [InlineKeyboardButton("SMARTKEY >>", callback_data=str(M3_A_SMARTKEY))],
                [InlineKeyboardButton("TIARA", callback_data=str(M3_A_TIARA))],
                [InlineKeyboardButton("TPAS >>", callback_data=str(M3_A_TPAS))],
                [InlineKeyboardButton("TPOWER", callback_data=str(M3_A_TPOWER))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_A))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *ADMINISTRATION*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AGATA* : -\n*AMESTY* : Tools Asset Management\nDAVINCI : -\n*EATP* : Electronic Acceptance Test Procedure\n*ETSA* : Tools for Manage and Monitoring, Analytic TSA\n*EWONDER* : WINONA\n*FELISA* : -\n*FIOLA* : Tools Ordering and Monitoring Site Maintenance\n*LOLITA* : -\n*SCARLETT* : -\n*SMARTKEY* : -\n*TIARA* : -\n*TPAS* : -\n*TPOWER* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("AGATA", callback_data=str(M3_A_AGATA))],
                [InlineKeyboardButton("AMESTY >>", callback_data=str(M3_A_AMT))],
                [InlineKeyboardButton("DAVINCI", callback_data=str(M3_A_DVC))],
                [InlineKeyboardButton("EATP >>", callback_data=str(M3_A_EATP))],
                [InlineKeyboardButton("ETSA >>", callback_data=str(M3_A_ETSA))],
                [InlineKeyboardButton("EWONDER >>", callback_data=str(M3_A_EWONDER))],
                [InlineKeyboardButton("FELISA", callback_data=str(M3_A_FELISA))],
                [InlineKeyboardButton("FIOLA >>", callback_data=str(M3_A_FIOLA))],
                [InlineKeyboardButton("LOLITA", callback_data=str(M3_A_LOLITA))],
                [InlineKeyboardButton("SCARLETT >>", callback_data=str(M3_A_SCARLET))],
                [InlineKeyboardButton("SMARTKEY >>", callback_data=str(M3_A_SMARTKEY))],
                [InlineKeyboardButton("TIARA", callback_data=str(M3_A_TIARA))],
                [InlineKeyboardButton("TPAS >>", callback_data=str(M3_A_TPAS))],
                [InlineKeyboardButton("TPOWER", callback_data=str(M3_A_TPOWER))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_A))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *ADMINISTRATION*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AGATA* : -\n*AMESTY* : Tools Asset Management\nDAVINCI : -\n*EATP* : Electronic Acceptance Test Procedure\n*ETSA* : Tools for Manage and Monitoring, Analytic TSA\n*EWONDER* : WINONA\n*FELISA* : -\n*FIOLA* : Tools Ordering and Monitoring Site Maintenance\n*LOLITA* : -\n*SCARLETT* : -\n*SMARTKEY* : -\n*TIARA* : -\n*TPAS* : -\n*TPOWER* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("AGATA", callback_data=str(M3_A_AGATA))],
                [InlineKeyboardButton("AMESTY >>", callback_data=str(M3_A_AMT))],
                [InlineKeyboardButton("DAVINCI", callback_data=str(M3_A_DVC))],
                [InlineKeyboardButton("EATP >>", callback_data=str(M3_A_EATP))],
                [InlineKeyboardButton("ETSA >>", callback_data=str(M3_A_ETSA))],
                [InlineKeyboardButton("EWONDER >>", callback_data=str(M3_A_EWONDER))],
                [InlineKeyboardButton("FELISA", callback_data=str(M3_A_FELISA))],
                [InlineKeyboardButton("FIOLA >>", callback_data=str(M3_A_FIOLA))],
                [InlineKeyboardButton("LOLITA", callback_data=str(M3_A_LOLITA))],
                [InlineKeyboardButton("SCARLETT >>", callback_data=str(M3_A_SCARLET))],
                [InlineKeyboardButton("SMARTKEY >>", callback_data=str(M3_A_SMARTKEY))],
                [InlineKeyboardButton("TIARA", callback_data=str(M3_A_TIARA))],
                [InlineKeyboardButton("TPAS >>", callback_data=str(M3_A_TPAS))],
                [InlineKeyboardButton("TPOWER", callback_data=str(M3_A_TPOWER))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_A))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *ADMINISTRATION*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AGATA* : -\n*AMESTY* : Tools Asset Management\nDAVINCI : -\n*EATP* : Electronic Acceptance Test Procedure\n*ETSA* : Tools for Manage and Monitoring, Analytic TSA\n*EWONDER* : WINONA\n*FELISA* : -\n*FIOLA* : Tools Ordering and Monitoring Site Maintenance\n*LOLITA* : -\n*SCARLETT* : -\n*SMARTKEY* : -\n*TIARA* : -\n*TPAS* : -\n*TPOWER* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("AGATA", callback_data=str(M3_A_AGATA))],
                [InlineKeyboardButton("AMESTY >>", callback_data=str(M3_A_AMT))],
                [InlineKeyboardButton("DAVINCI", callback_data=str(M3_A_DVC))],
                [InlineKeyboardButton("EATP >>", callback_data=str(M3_A_EATP))],
                [InlineKeyboardButton("ETSA >>", callback_data=str(M3_A_ETSA))],
                [InlineKeyboardButton("EWONDER >>", callback_data=str(M3_A_EWONDER))],
                [InlineKeyboardButton("FELISA", callback_data=str(M3_A_FELISA))],
                [InlineKeyboardButton("FIOLA >>", callback_data=str(M3_A_FIOLA))],
                [InlineKeyboardButton("LOLITA", callback_data=str(M3_A_LOLITA))],
                [InlineKeyboardButton("SCARLETT >>", callback_data=str(M3_A_SCARLET))],
                [InlineKeyboardButton("SMARTKEY >>", callback_data=str(M3_A_SMARTKEY))],
                [InlineKeyboardButton("TIARA", callback_data=str(M3_A_TIARA))],
                [InlineKeyboardButton("TPAS >>", callback_data=str(M3_A_TPAS))],
                [InlineKeyboardButton("TPOWER", callback_data=str(M3_A_TPOWER))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_A))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *ADMINISTRATION*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AGATA* : -\n*AMESTY* : Tools Asset Management\nDAVINCI : -\n*EATP* : Electronic Acceptance Test Procedure\n*ETSA* : Tools for Manage and Monitoring, Analytic TSA\n*EWONDER* : WINONA\n*FELISA* : -\n*FIOLA* : Tools Ordering and Monitoring Site Maintenance\n*LOLITA* : -\n*SCARLETT* : -\n*SMARTKEY* : -\n*TIARA* : -\n*TPAS* : -\n*TPOWER* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_agata(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_AGATA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER AGATA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *AGATA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_AGATA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER AGATA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *AGATA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_agata_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'AGATA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'AGT' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'AGATA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_AGT))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Back", callback_data=str(M3_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'AGATA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di AGATA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_agt()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_AGT
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_AGT
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_AGT
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_AGT
        
def get_summary_agt():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'AGATA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_agt(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_AGT
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_AGT
def end_agt(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "AGT"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'AGATA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'AGATA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'AGATA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "AGT"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'AGATA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001831369226','{ticket}','{problem_title}','{data_select[8]}','open','CRQ','{date_time}','None','CONFIGURATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'AGATA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'AGATA')
    return ConversationHandler.END
def m3_a_amesty_create(update: Update, _: CallbackContext) -> None:
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text("Anda memilih : *BUAT TIKET*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'AMESTY'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'AMT' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'AMESTY'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_AMT))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'AMESTY'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di AMESTY, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_amesty()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_AMT
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_AMT
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_AMT
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_AMT

def m3_a_amesty_other_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("Other Problems ➞ {}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'AMESTY'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'AMT' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'AMESTY'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_AMT))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'AMESTY'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di AMESTY, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_amesty()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_AMT
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_AMT
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_AMT
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_AMT
        
def get_summary_amesty():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'AMESTY'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_amt(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_AMT
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_AMT
def end_amt(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "AMT"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'AMESTY', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'AMESTY'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)   
        log_bot(update, 'AMESTY')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "AMT"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'AMESTY', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','AGATA','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'AMESTY'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'AMESTY')
    return ConversationHandler.END
def m3_a_amesty(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Physical Check TTC/STO >>", callback_data=str(M3_A_AMT_TTC))],
            [InlineKeyboardButton("Asset Disposal >>", callback_data=str(M3_A_AMT_DST))],
            [InlineKeyboardButton("Asset New Addition >>", callback_data=str(M3_A_AMT_NA))],
            [InlineKeyboardButton("Asset Configuration Change >>", callback_data=str(M3_A_AMT_CC))],
            [InlineKeyboardButton("Asset Troubleshoot >>", callback_data=str(M3_A_AMT_T))],
            [InlineKeyboardButton("Asset Validation >>", callback_data=str(M3_A_AMT_V))],
            [InlineKeyboardButton("Asset Dismantle >>", callback_data=str(M3_A_AMT_DSM))],
            [InlineKeyboardButton("Asset Movement >>", callback_data=str(M3_A_AMT_M))],
            [InlineKeyboardButton("Asset Configuration Change ACR >>", callback_data=str(M3_A_AMT_ACR))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_AMT_OTHER))],
            [InlineKeyboardButton("REQUESTS USER AMESTY", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *AMESTY*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Physical Check TTC/STO >>", callback_data=str(M3_A_AMT_TTC))],
            [InlineKeyboardButton("Asset Disposal >>", callback_data=str(M3_A_AMT_DST))],
            [InlineKeyboardButton("Asset New Addition >>", callback_data=str(M3_A_AMT_NA))],
            [InlineKeyboardButton("Asset Configuration Change >>", callback_data=str(M3_A_AMT_CC))],
            [InlineKeyboardButton("Asset Troubleshoot >>", callback_data=str(M3_A_AMT_T))],
            [InlineKeyboardButton("Asset Validation >>", callback_data=str(M3_A_AMT_V))],
            [InlineKeyboardButton("Asset Dismantle >>", callback_data=str(M3_A_AMT_DSM))],
            [InlineKeyboardButton("Asset Movement >>", callback_data=str(M3_A_AMT_M))],
            [InlineKeyboardButton("Asset Configuration Change ACR >>", callback_data=str(M3_A_AMT_ACR))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_AMT_OTHER))],
            [InlineKeyboardButton("REQUESTS USER AMESTY", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *AMESTY*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_amt_ttc(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Physical Check TTC/STO*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web >>", callback_data=str(M3_A_AMT_TTC_WEB))],
        [InlineKeyboardButton("Mobile >>", callback_data=str(M3_A_AMT_TTC_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_ttc_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Asset Survey", callback_data=str(M3_A_AMT_TTC_WEB_S))],
        [InlineKeyboardButton("Asset Center", callback_data=str(M3_A_AMT_TTC_WEB_C))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT_TTC))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_ttc_web_s(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Survey*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/web/asset-survey',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/web/asset-survey',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_ttc_web_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Center*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/web/asset-survey',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/web/asset-survey',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_ttc_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("PC TTC/STO Ticket", callback_data=str(M3_A_AMT_TTC_MBL_T))],
        [InlineKeyboardButton("Collaboration Feature", callback_data=str(M3_A_AMT_TTC_MBL_CF))],
        [InlineKeyboardButton("Check In Ticket", callback_data=str(M3_A_AMT_TTC_MBL_CT))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT_TTC))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)       
def m3_a_amt_ttc_mbl_t(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *PC TTC/STO Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/mobile/pc-ttc-sto-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/mobile/pc-ttc-sto-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_ttc_mbl_cf(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Collaboration Feature*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/mobile/collaboration-feature',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/mobile/collaboration-feature',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_ttc_mbl_ct(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Check In Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/mobile/check-in-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/physical-check-ttc-sto/mobile/check-in-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Disposal*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("TTC >>", callback_data=str(M3_A_AMT_DST_TTC))],
        [InlineKeyboardButton("Non TTC/Permanent >>", callback_data=str(M3_A_AMT_DST_NON))],
        [InlineKeyboardButton("LPS >>", callback_data=str(M3_A_AMT_DST_LPS))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_dst_ttc(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TTC*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("NARM", callback_data=str(M3_A_AMT_DST_TTC_N))],
        [InlineKeyboardButton("TO", callback_data=str(M3_A_AMT_DST_TTC_T))],
        [InlineKeyboardButton("FMS/VENDOR", callback_data=str(M3_A_AMT_DST_TTC_F))],
        [InlineKeyboardButton("CTDO", callback_data=str(M3_A_AMT_DST_TTC_C))],
        [InlineKeyboardButton("DCAA", callback_data=str(M3_A_AMT_DST_TTC_D))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT_DST))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_dst_ttc_n(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *NARM*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/narm',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/narm',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_ttc_t(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TO*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_ttc_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS/VENDOR*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/fms-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/fms-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_ttc_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *CTDO*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/ctdo',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/ctdo',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_ttc_d(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *DCAA*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/ttc/dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_amt_dst_non(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Non TTC/Permanent*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("NARM", callback_data=str(M3_A_AMT_DST_NON_N))],
        [InlineKeyboardButton("TO", callback_data=str(M3_A_AMT_DST_NON_T))],
        [InlineKeyboardButton("FMS/VENDOR", callback_data=str(M3_A_AMT_DST_NON_F))],
        [InlineKeyboardButton("NOP", callback_data=str(M3_A_AMT_DST_NON_NO))],
        [InlineKeyboardButton("DCAA", callback_data=str(M3_A_AMT_DST_NON_D))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT_DST))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_dst_non_n(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *NARM*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/narm',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/narm',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_non_t(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TO*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_non_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS/VENDOR*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/fms-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/fms-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_non_no(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *NOP*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/nop',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/nop',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_non_d(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *DCAA*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/non-ttc-permanent/dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_lps(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *LPS*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("NARM", callback_data=str(M3_A_AMT_DST_LPS_N))],
        [InlineKeyboardButton("TO", callback_data=str(M3_A_AMT_DST_LPS_T))],
        [InlineKeyboardButton("FMS/VENDOR", callback_data=str(M3_A_AMT_DST_LPS_F))],
        [InlineKeyboardButton("DCAA", callback_data=str(M3_A_AMT_DST_LPS_D))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT_DST))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_dst_lps_n(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *NARM*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/lps/narm',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/lps/narm',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_lps_t(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TO*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/lps/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/lps/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_lps_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS/VENDOR*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/lps/fms-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/lps/fms-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dst_lps_d(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *DCAA*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/lps/dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-disposal/lps/dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_na(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset New Addition*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_AMT_NA_MBL))],
        [InlineKeyboardButton("Approval", callback_data=str(M3_A_AMT_NA_APV))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_na_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-new-addition/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-new-addition/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_na_apv(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-new-addition/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-new-addition/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_amt_cc(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Configuration Change*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_AMT_CC_MBL))],
        [InlineKeyboardButton("Approval", callback_data=str(M3_A_AMT_CC_APV))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_cc_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-configuration-change/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-configuration-change/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_cc_apv(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-configuration-change/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-configuration-change/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_t(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Troubleshoot*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_AMT_T_MBL))],
        [InlineKeyboardButton("Approval", callback_data=str(M3_A_AMT_T_APV))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_t_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-troubleshoot/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-troubleshoot/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_t_apv(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-troubleshoot/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-troubleshoot/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_v(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Validation*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    keyboard = [
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_AMT_V_MBL))],
        [InlineKeyboardButton("Approval", callback_data=str(M3_A_AMT_V_APV))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_v_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-validation/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-validation/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_v_apv(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-validation/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-validation/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dsm(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Dismantle*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("TTC >>", callback_data=str(M3_A_AMT_DSM_TTC))],
        [InlineKeyboardButton("NON TTC >>", callback_data=str(M3_A_AMT_DSM_NON))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_dsm_ttc(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TTC*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Open Ticket", callback_data=str(M3_A_AMT_DSM_TTC_OT))],
        [InlineKeyboardButton("Search Asset", callback_data=str(M3_A_AMT_DSM_TTC_SA))],
        [InlineKeyboardButton("Fill Form", callback_data=str(M3_A_AMT_DSM_TTC_FF))],
        [InlineKeyboardButton("Approval by RTPE", callback_data=str(M3_A_AMT_DSM_TTC_AR))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT_DSM))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_dsm_ttc_ot(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Open Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/ttc/open-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/ttc/open-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dsm_ttc_sa(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Search Asset*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/ttc/search-asset',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/ttc/search-asset',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dsm_ttc_ff(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Fill Form*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/ttc/fill-form',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/ttc/fill-form',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dsm_ttc_ar(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval by RTPE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/ttc/approval-by-rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/ttc/approval-by-rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dsm_non(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *NON TTC*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Open Ticket", callback_data=str(M3_A_AMT_DSM_NON_OT))],
        [InlineKeyboardButton("Propose New Asset", callback_data=str(M3_A_AMT_DSM_NON_PNA))],
        [InlineKeyboardButton("Search Asset", callback_data=str(M3_A_AMT_DSM_NON_SA))],
        [InlineKeyboardButton("Fill Form", callback_data=str(M3_A_AMT_DSM_NON_FF))],
        [InlineKeyboardButton("Approval by RTPE", callback_data=str(M3_A_AMT_DSM_NON_AR))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT_DSM))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_dsm_non_ot(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Open Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/open-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/open-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dsm_non_pna(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Propose New Asset*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/propose-new-asset',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/propose-new-asset',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dsm_non_sa(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Search Asset*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/search-asset',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/search-asset',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dsm_non_ff(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Fill Form*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/fill-form',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/fill-form',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_dsm_non_ar(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval by RTPE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/approval-by-rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-dismantle/non-ttc/approval-by-rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_m(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Movement*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("TTC to TTC >>", callback_data=str(M3_A_AMT_M_TTC))],
        [InlineKeyboardButton("TTC to WH >>", callback_data=str(M3_A_AMT_M_WH))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_m_ttc(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TTC to TTC*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Asset Dismantle", callback_data=str(M3_A_AMT_M_TTC_AD))],
        [InlineKeyboardButton("Approval", callback_data=str(M3_A_AMT_M_TTC_A))],
        [InlineKeyboardButton("Asset Installation", callback_data=str(M3_A_AMT_M_TTC_AI))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT_M))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_m_ttc_ad(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Dismantle*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-ttc/asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-ttc/asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_m_ttc_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-ttc/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-ttc/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_m_ttc_ai(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Installation*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-ttc/asset-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-ttc/asset-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_m_wh(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TTC to WH*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Asset Dismantle", callback_data=str(M3_A_AMT_M_WH_AD))],
        [InlineKeyboardButton("Approval", callback_data=str(M3_A_AMT_M_WH_A))],
        [InlineKeyboardButton("WH Store", callback_data=str(M3_A_AMT_M_WH_WS))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT_M))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_m_wh_ad(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Dismantle*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-wh/asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-wh/asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_m_wh_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-wh/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-wh/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_m_wh_ws(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *WH Store*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-wh/wh-store',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-movement/ttc-to-wh/wh-store',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_acr(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Configuration Change ACR*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_AMT_ACR_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_amt_acr_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-configuration-change-acr/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/amesty/asset-configuration-change-acr/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_AMT_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_amt_other(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Ticket Ne On Amesty", callback_data=str(M3_A_AMT_OTHER_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_AMT_OTHER_CREATE_2))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Ticket Ne On Amesty", callback_data=str(M3_A_AMT_OTHER_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_AMT_OTHER_CREATE_2))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_AMT))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)

def m3_a_dvc(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_DVC_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER DAVINCI", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *DAVINCI*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_DVC_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER DAVINCI", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *DAVINCI*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_dvc_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'DAVINCI'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'DVC' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'DAVINCI'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_DVC))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Back", callback_data=str(M3_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'DAVINCI'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di DAVINCI, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_dvc()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_DVC
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DVC
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DVC
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DVC
        
def get_summary_dvc():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'DAVINCI'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_dvc(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_DVC
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_DVC
def end_dvc(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "DVC"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'DAVINCI', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINCI'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'DAVINCI'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'DAVINCI')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "DVC"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'DAVINCI', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','AGATA','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINCI'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'DAVINCI'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'DAVINCI')
    return ConversationHandler.END

def m3_a_eatp_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
    log_bot.write("Other Problems")
    log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text("Anda memilih : *BUAT TIKET*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'EATP'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'ETP' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EATP'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_EATP))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EATP'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di EATP, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_eatp()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_EATP
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EATP
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EATP
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EATP

def m3_a_eatp_other_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("Other Problems ➞ {}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    if data_text in 'Approval Error':
        keyboard = [
            [InlineKeyboardButton("Check in on Site", callback_data=str(M3_A_EATP_OTHER_CREATE_1A))],
            [InlineKeyboardButton("Knowladge Person", callback_data=str(M3_A_EATP_OTHER_CREATE_1B))],
            [InlineKeyboardButton("Wrong Input Data", callback_data=str(M3_A_EATP_OTHER_CREATE_1C))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Loading':
        keyboard = [
            [InlineKeyboardButton("Freeze Menu", callback_data=str(M3_A_EATP_OTHER_CREATE_2A))],
            [InlineKeyboardButton("Timeout", callback_data=str(M3_A_EATP_OTHER_CREATE_2B))],
            [InlineKeyboardButton("Server Error", callback_data=str(M3_A_EATP_OTHER_CREATE_2C))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Menu Error':
        keyboard = [
            [InlineKeyboardButton("Camera Error", callback_data=str(M3_A_EATP_OTHER_CREATE_3A))],
            [InlineKeyboardButton("App Exit", callback_data=str(M3_A_EATP_OTHER_CREATE_3B))],
            [InlineKeyboardButton("Menu", callback_data=str(M3_A_EATP_OTHER_CREATE_3C))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Permit':
        keyboard = [
            [InlineKeyboardButton("Registration Permit", callback_data=str(M3_A_EATP_OTHER_CREATE_4A))],
            [InlineKeyboardButton("SiteID", callback_data=str(M3_A_EATP_OTHER_CREATE_4B))],
            [InlineKeyboardButton("Company", callback_data=str(M3_A_EATP_OTHER_CREATE_4C))],
            [InlineKeyboardButton("Verification", callback_data=str(M3_A_EATP_OTHER_CREATE_4D))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Other Problems':
        query.message.reply_text(f"Masukkan detail problem :")
        return END_EATP


def m3_a_eatp_other_create_ticket(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'EATP'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'ETP' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EATP'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_EATP))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EATP'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di EATP, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_eatp()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_EATP
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EATP
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EATP
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EATP
        
def get_summary_eatp():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'EATP'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_eatp(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_EATP
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_EATP
def end_eatp(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "ETP"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'EATP', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'EATP'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'EATP')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "ETP"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'EATP', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','AGATA','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'EATP'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'EATP')
    return ConversationHandler.END

def m3_a_eatp(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Permit Registration >>", callback_data=str(M3_A_EATP_PR))],
            [InlineKeyboardButton("Create Ticket Related >>", callback_data=str(M3_A_EATP_CTR))],
            [InlineKeyboardButton("ATP Ticket >>", callback_data=str(M3_A_EATP_AT))],
            [InlineKeyboardButton("Asset Movement >>", callback_data=str(M3_A_EATP_AM))],
            [InlineKeyboardButton("Asset Trade In >>", callback_data=str(M3_A_EATP_ATI))],
            [InlineKeyboardButton("Request Additional BOQ >>", callback_data=str(M3_A_EATP_RAB))],
            [InlineKeyboardButton("Approval ATP Ticket >>", callback_data=str(M3_A_EATP_AAT))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_EATP_OTHER))],
            [InlineKeyboardButton("REQUESTS USER EATP", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *EATP*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Permit Registration >>", callback_data=str(M3_A_EATP_PR))],
            [InlineKeyboardButton("Create Ticket Related >>", callback_data=str(M3_A_EATP_CTR))],
            [InlineKeyboardButton("ATP Ticket >>", callback_data=str(M3_A_EATP_AT))],
            [InlineKeyboardButton("Asset Movement >>", callback_data=str(M3_A_EATP_AM))],
            [InlineKeyboardButton("Asset Trade In >>", callback_data=str(M3_A_EATP_ATI))],
            [InlineKeyboardButton("Request Additional BOQ >>", callback_data=str(M3_A_EATP_RAB))],
            [InlineKeyboardButton("Approval ATP Ticket >>", callback_data=str(M3_A_EATP_AAT))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_EATP_OTHER))],
            [InlineKeyboardButton("REQUESTS USER EATP", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *EATP*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_eatp_pr(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Permit Registration*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_EATP_PR_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_EATP_PR_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_pr_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/permit-registration/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/permit-registration/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)    
def m3_a_eatp_pr_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/permit-registration/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/permit-registration/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_ctr(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Create Ticket Related*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_EATP_CTR_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_EATP_CTR_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_ctr_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/create-ticket-related/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/create-ticket-related/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_ctr_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/create-ticket-related/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/create-ticket-related/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_at(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *ATP Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Check In On Site", callback_data=str(M3_A_EATP_AT_CIOS))],
        [InlineKeyboardButton("Fill Data Material Items", callback_data=str(M3_A_EATP_AT_FDMI))],
        [InlineKeyboardButton("Fill Data Form", callback_data=str(M3_A_EATP_AT_FDF))],
        [InlineKeyboardButton("Change Ticket Status", callback_data=str(M3_A_EATP_AT_CTS))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_at_cios(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Check In On Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/atp-ticket/check-in-on-site',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/atp-ticket/check-in-on-site',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_at_fdmi(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Fill Data Material Items*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/atp-ticket/fill-data-material-items',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/atp-ticket/fill-data-material-items',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_at_fdf(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Fill Data Form*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/atp-ticket/fill-data-form',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/atp-ticket/fill-data-form',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_at_cts(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Change Ticket Status*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/atp-ticket/change-ticket-status',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/atp-ticket/change-ticket-status',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_eatp_am(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Asset Movement*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Site to Site >>", callback_data=str(M3_A_EATP_AM_STS))],
        [InlineKeyboardButton("Site to WH >>", callback_data=str(M3_A_EATP_AM_STW))],
        [InlineKeyboardButton("WH to Site >>", callback_data=str(M3_A_EATP_AM_STW))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_am_sts(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Site to Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Ticket Movement", callback_data=str(M3_A_EATP_AM_STS_CTM))],
        [InlineKeyboardButton("Working on Ticket Dismantle", callback_data=str(M3_A_EATP_AM_STS_WTD))],
        [InlineKeyboardButton("Working on Ticket Installation", callback_data=str(M3_A_EATP_AM_STS_WTI))],
        [InlineKeyboardButton("Change Ticket Status", callback_data=str(M3_A_EATP_AM_STS_CTS))],
        [InlineKeyboardButton("Approval Ticket", callback_data=str(M3_A_EATP_AM_STS_AT))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP_AM))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_am_sts_ctm(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Ticket Movement*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/create-ticket-movement',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/create-ticket-movement',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_am_sts_wtd(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket Dismantle*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/working-on-ticket-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/working-on-ticket-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_am_sts_wti(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket Installation*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/working-on-ticket-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/working-on-ticket-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_am_sts_cts(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Change Ticket Status*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/change-ticket-status',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/change-ticket-status',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_am_sts_at(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/approval-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-site/approval-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_eatp_am_stw(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Site to WH*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_EATP_AM_STW_WEB))],
        [InlineKeyboardButton("Mobile (Asset Dismantle)", callback_data=str(M3_A_EATP_AM_STW_MBL))],
        [InlineKeyboardButton("Tablet (Asset Storing)", callback_data=str(M3_A_EATP_AM_STW_TBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP_AM))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_am_stw_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-wh/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-wh/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_am_stw_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile (Asset Dismantle)*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-wh/mobile-asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-wh/mobile-asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_am_stw_tbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Tablet (Asset Storing)*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-wh/tablet-asset-storing',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/site-to-wh/tablet-asset-storing',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_am_wts(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *WH to Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_EATP_AM_WTS_WEB))],
        [InlineKeyboardButton("Tablet (Asset Requisition)", callback_data=str(M3_A_EATP_AM_WTS_TBL))],
        [InlineKeyboardButton("Mobile (Asset Installation)", callback_data=str(M3_A_EATP_AM_WTS_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP_AM))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_am_wts_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/wh-to-site/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/wh-to-site/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_am_wts_tbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Tablet (Asset Requisition)*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/wh-to-site/tablet-asset-requisition',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/wh-to-site/tablet-asset-requisition',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_am_wts_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile (Asset Installation)*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/wh-to-site/mobile-asset-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-movement/wh-to-site/mobile-asset-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_ati(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Asset Trade In*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Ticket Related Asset Trade In", callback_data=str(M3_A_EATP_ATI_C))],
        [InlineKeyboardButton("Working on Ticket Related Asset Trade In", callback_data=str(M3_A_EATP_ATI_W))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_ati_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Ticket Related*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-trade-in/create-ticket-related-asset-trade-in',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-trade-in/create-ticket-related-asset-trade-in',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_ati_w(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket Related*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-trade-in/working-on-ticket-related-asset-trade-in',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/asset-trade-in/working-on-ticket-related-asset-trade-in',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_eatp_rab(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Request Additional BOQ*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Request Additional BOQ", callback_data=str(M3_A_EATP_RAB_C))],
        [InlineKeyboardButton("Approval", callback_data=str(M3_A_EATP_RAB_A))],
        [InlineKeyboardButton("Revise Request", callback_data=str(M3_A_EATP_RAB_R))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_rab_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Request Additional BOQ*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/request-additional-boq/create-request-additional-boq',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/request-additional-boq/create-request-additional-boq',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_rab_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/request-additional-boq/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/request-additional-boq/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_rab_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Revise Request*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/request-additional-boq/revise-request',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/request-additional-boq/revise-request',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_aat(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Approval ATP Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("By Vendor", callback_data=str(M3_A_EATP_AAT_BV))],
        [InlineKeyboardButton("By CDPO", callback_data=str(M3_A_EATP_AAT_BC))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_eatp_aat_bv(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *By Vendor*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/approval-atp-ticket/by-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/approval-atp-ticket/by-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_aat_bc(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *By CDPO*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/approval-atp-ticket/by-cdpo',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/eatp/approval-atp-ticket/by-cdpo',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_eatp_other(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Approval Error >>", callback_data=str(M3_A_EATP_OTHER_CREATE_1))],
            [InlineKeyboardButton("Loading >>", callback_data=str(M3_A_EATP_OTHER_CREATE_2))],
            [InlineKeyboardButton("Menu Error >>", callback_data=str(M3_A_EATP_OTHER_CREATE_3))],
            [InlineKeyboardButton("Permit >>", callback_data=str(M3_A_EATP_OTHER_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_EATP_OTHER_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_EATP))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Approval Error >>", callback_data=str(M3_A_EATP_OTHER_CREATE_1))],
            [InlineKeyboardButton("Loading >>", callback_data=str(M3_A_EATP_OTHER_CREATE_2))],
            [InlineKeyboardButton("Menu Error >>", callback_data=str(M3_A_EATP_OTHER_CREATE_3))],
            [InlineKeyboardButton("Permit >>", callback_data=str(M3_A_EATP_OTHER_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_EATP_OTHER_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_EWONDER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)

def m3_a_etsa_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
    log_bot.write("Other Problems")
    log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text("Anda memilih : *BUAT TIKET*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'ETSA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'ETS' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ETSA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_ETSA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ETSA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di ETSA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_etsa()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_ETSA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ETSA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ETSA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ETSA
        
def m3_a_etsa_other_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("Other Problems ➞ {}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    if data_text in 'Account':
        keyboard = [
            [InlineKeyboardButton("Verification Document", callback_data=str(M3_A_ETSA_OTHER_CREATE_1A))],
            [InlineKeyboardButton("Role", callback_data=str(M3_A_ETSA_OTHER_CREATE_1B))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Loading':
        keyboard = [
            [InlineKeyboardButton("Freeze Menu", callback_data=str(M3_A_ETSA_OTHER_CREATE_2A))],
            [InlineKeyboardButton("Timeout", callback_data=str(M3_A_ETSA_OTHER_CREATE_2B))],
            [InlineKeyboardButton("Server Error", callback_data=str(M3_A_ETSA_OTHER_CREATE_2C))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Menu Error':
        keyboard = [
            [InlineKeyboardButton("Data Not Synchron", callback_data=str(M3_A_ETSA_OTHER_CREATE_3A))],
            [InlineKeyboardButton("Detail Ticket", callback_data=str(M3_A_ETSA_OTHER_CREATE_3B))],
            [InlineKeyboardButton("Blank Data", callback_data=str(M3_A_ETSA_OTHER_CREATE_3C))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Ticketing':
        keyboard = [
            [InlineKeyboardButton("Data Site Not Found", callback_data=str(M3_A_ETSA_OTHER_CREATE_4A))],
            [InlineKeyboardButton("Data Ticket", callback_data=str(M3_A_ETSA_OTHER_CREATE_4B))],
            [InlineKeyboardButton("Ticketing Approval", callback_data=str(M3_A_ETSA_OTHER_CREATE_4C))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Other Problems':
        query.message.reply_text(f"Masukkan detail problem :")
        return END_ETSA



def m3_a_etsa_other_create_ticket(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'ETSA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'ETS' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ETSA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_ETSA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ETSA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di ETSA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_etsa()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_ETSA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ETSA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ETSA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ETSA
        
def get_summary_etsa():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'ETSA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_etsa(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_ETSA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_ETSA
def end_etsa(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "ETS"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'ETSA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'ETSA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'ETSA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "ETS"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'ETSA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','AGATA','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'ETSA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'ETSA')
    return ConversationHandler.END

def m3_a_etsa(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Dashboard", callback_data=str(M3_A_ETSA_D))],
            [InlineKeyboardButton("SPMS (Returnable) >>", callback_data=str(M3_A_ETSA_SP))],
            [InlineKeyboardButton("Consumable >>", callback_data=str(M3_A_ETSA_C))],
            [InlineKeyboardButton("OSS >>", callback_data=str(M3_A_ETSA_O))],
            [InlineKeyboardButton("Material Support >>", callback_data=str(M3_A_ETSA_MS))],
            [InlineKeyboardButton("Recovery >>", callback_data=str(M3_A_ETSA_R))],
            [InlineKeyboardButton("SRSM >>", callback_data=str(M3_A_ETSA_S))],
            [InlineKeyboardButton("Preventive Maintenance >>", callback_data=str(M3_A_ETSA_PM))],
            [InlineKeyboardButton("Repair Module >>", callback_data=str(M3_A_ETSA_RM))],
            [InlineKeyboardButton("Manual Guide for Vendor >>", callback_data=str(M3_A_ETSA_MGV))],
            [InlineKeyboardButton("FAQ >>", callback_data=str(M3_A_ETSA_F))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_ETSA_OTHER))],
            [InlineKeyboardButton("REQUESTS USER ETSA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *ETSA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Dashboard", callback_data=str(M3_A_ETSA_D))],
            [InlineKeyboardButton("SPMS (Returnable) >>", callback_data=str(M3_A_ETSA_SP))],
            [InlineKeyboardButton("Consumable >>", callback_data=str(M3_A_ETSA_C))],
            [InlineKeyboardButton("OSS >>", callback_data=str(M3_A_ETSA_O))],
            [InlineKeyboardButton("Material Support >>", callback_data=str(M3_A_ETSA_MS))],
            [InlineKeyboardButton("Recovery >>", callback_data=str(M3_A_ETSA_R))],
            [InlineKeyboardButton("SRSM >>", callback_data=str(M3_A_ETSA_S))],
            [InlineKeyboardButton("Preventive Maintenance >>", callback_data=str(M3_A_ETSA_PM))],
            [InlineKeyboardButton("Repair Module >>", callback_data=str(M3_A_ETSA_RM))],
            [InlineKeyboardButton("Manual Guide for Vendor >>", callback_data=str(M3_A_ETSA_MGV))],
            [InlineKeyboardButton("FAQ >>", callback_data=str(M3_A_ETSA_F))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_ETSA_OTHER))],
            [InlineKeyboardButton("REQUESTS USER ETSA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *ETSA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_etsa_d(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Dashboard*",parse_mode=telegram.ParseMode.MARKDOWN)
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/dashboard',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/dashboard',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup) 
def m3_a_etsa_sp(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *SPMS (Returnable)*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_SP_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_SP_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_sp_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/spms/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/spms/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_sp_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/spms/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/spms/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EATP_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_c(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Consumable*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_C_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_C_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_c_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/consumable/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/consumable/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_c_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/consumable/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/consumable/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_o(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *OSS*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_O_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_O_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_o_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/oss/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/oss/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_o_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/oss/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/oss/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_ms(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Material Support*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_MS_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_MS_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_ms_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/material-support/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/material-support/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_ms_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/material-support/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/material-support/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_r(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Recovery*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_R_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_R_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_r_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/recovery/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/recovery/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_r_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/recovery/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/recovery/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_s(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *SRSM*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_S_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_S_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_s_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/srsm/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/srsm/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_s_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/srsm/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/srsm/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_pm(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Preventive Maintenance*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_S_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_S_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_pm_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/preventive-maintenance/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/preventive-maintenance/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_pm_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/preventive-maintenance/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/preventive-maintenance/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Repair Module*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Site to DOP Nagita >>", callback_data=str(M3_A_ETSA_RM_STD))],
        [InlineKeyboardButton("DOP Nagita to Lab Nagita >>", callback_data=str(M3_A_ETSA_RM_DTL))],
        [InlineKeyboardButton("DOP Nagita to Site >>", callback_data=str(M3_A_ETSA_RM_DTS))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_rm_std(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Site to DOP Nagita*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Ticket Movement Site to DOP", callback_data=str(M3_A_ETSA_RM_STD_CT))],
        [InlineKeyboardButton("Working on Ticket Asset Dismantle", callback_data=str(M3_A_ETSA_RM_STD_W))],
        [InlineKeyboardButton("Approval Ticket Asset Dismantle", callback_data=str(M3_A_ETSA_RM_STD_A))],
        [InlineKeyboardButton("Working on Ticket Asset Store", callback_data=str(M3_A_ETSA_RM_STD_WT))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_RM))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_rm_std_ct(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Ticket Movement Site to DOP*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/site-to-dop-nagita/create-ticket-movement-site-to-dop',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/site-to-dop-nagita/create-ticket-movement-site-to-dop',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm_std_w(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket Asset Dismantle*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/site-to-dop-nagita/working-on-ticket-asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/site-to-dop-nagita/working-on-ticket-asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm_std_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval Ticket Asset Dismantle*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/site-to-dop-nagita/approval-ticket-asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/site-to-dop-nagita/approval-ticket-asset-dismantle',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm_std_wt(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket Asset Store*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/site-to-dop-nagita/working-on-ticket-asset-store',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/site-to-dop-nagita/working-on-ticket-asset-store',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm_dtl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *DOP Nagita to Lab Nagita*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Ticket DOP to LAB Nagita", callback_data=str(M3_A_ETSA_RM_DTL_C))],
        [InlineKeyboardButton("Working on Ticket Asset Take", callback_data=str(M3_A_ETSA_RM_DTL_W))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_RM))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_rm_dtl_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Ticket DOP to LAB Nagita*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-lab-nagita/create-ticket-dop-to-lab-nagita',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-lab-nagita/create-ticket-dop-to-lab-nagita',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm_dtl_w(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket Asset Take*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-lab-nagita/working-on-ticket-asset-take',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-lab-nagita/working-on-ticket-asset-take',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm_dts(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *DOP Nagita to Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Ticket DOP to Site", callback_data=str(M3_A_ETSA_RM_DTS_C))],
        [InlineKeyboardButton("Working on Ticket Asset Take", callback_data=str(M3_A_ETSA_RM_DTS_W))],
        [InlineKeyboardButton("Working on Ticket Asset Installation", callback_data=str(M3_A_ETSA_RM_DTS_WT))],
        [InlineKeyboardButton("Approval Ticket Installation", callback_data=str(M3_A_ETSA_RM_DTS_A))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_rm_dts_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Ticket DOP to Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-site/create-ticket-dop-to-site',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-site/create-ticket-dop-to-site',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm_dts_w(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket Asset Take*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-site/working-on-ticket-asset-take',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-site/working-on-ticket-asset-take',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm_dts_wt(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket Asset Installation*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-site/working-on-ticket-asset-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-site/working-on-ticket-asset-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_rm_dts_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval Ticket Installation*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-site/approval-ticket-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/repair-module/dop-nagita-to-site/approval-ticket-installation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Manual Guide for Vendor*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("SPMS (Returnable) >>", callback_data=str(M3_A_ETSA_MGV_SR))],
        [InlineKeyboardButton("Consumable >>", callback_data=str(M3_A_ETSA_MGV_C))],
        [InlineKeyboardButton("OSS >>", callback_data=str(M3_A_ETSA_MGV_O))],
        [InlineKeyboardButton("SRSM >>", callback_data=str(M3_A_ETSA_MGV_S))],
        [InlineKeyboardButton("Preventive Maintenance >>", callback_data=str(M3_A_ETSA_MGV_PM))],
        [InlineKeyboardButton("Software Update >>", callback_data=str(M3_A_ETSA_MGV_SU))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_mgv_sr(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *SPMS (Returnable)*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_MGV_SR_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_MGV_SR_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_MGV))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_mgv_sr_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/spms/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/spms/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_sr_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/spms/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/spms/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Consumable*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_MGV_C_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_MGV_C_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_MGV))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_mgv_c_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/consumable/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/consumable/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_c_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/consumable/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/consumable/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_o(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *OSS*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_MGV_O_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_MGV_O_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_MGV))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_mgv_o_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/oss/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/oss/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_o_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/oss/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/oss/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_s(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *SRSM*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_MGV_S_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_MGV_S_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_MGV))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_mgv_s_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/srsm/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/srsm/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_s_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/srsm/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/srsm/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_pm(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Preventive Maintenance*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_MGV_PM_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_MGV_PM_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_MGV))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_mgv_pm_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/preventive-maintenance/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/preventive-maintenance/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_pm_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/preventive-maintenance/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/preventive-maintenance/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_su(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Software Update*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_ETSA_MGV_SU_WEB))],
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_ETSA_MGV_SU_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA_MGV))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_mgv_su_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/software-update/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/software-update/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_mgv_su_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/software-update/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/manual-guide-for-vendor/software-update/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_f(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *FAQ*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Siapa saja yang dapat melakukan approval ticket?", callback_data=str(M3_A_ETSA_F_S))],
        [InlineKeyboardButton("Apa yang dilakukan ketika salah dalam melakukan pemesanan sparepart?", callback_data=str(M3_A_ETSA_F_A))],
        [InlineKeyboardButton("Bagaimana jika gagal close ticket pada tiket dengan status Confirm Close?", callback_data=str(M3_A_ETSA_F_B))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_etsa_f_s(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Siapa saja yang dapat melakukan approval ticket?*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/faq/show-pic-list',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/faq/show-pic-list',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_f_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Apa yang dilakukan ketika salah dalam melakukan pemesanan sparepart?*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/faq/wrong-sparepart-request',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/faq/wrong-sparepart-request',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_f_b(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Bagaimana jika gagal close ticket pada tiket dengan status Confirm Close?*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/faq/show-detail-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/etsa/faq/show-detail-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_ETSA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_etsa_other(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Account >>", callback_data=str(M3_A_ETSA_OTHER_CREATE_1))],
            [InlineKeyboardButton("Loading >>", callback_data=str(M3_A_ETSA_OTHER_CREATE_2))],
            [InlineKeyboardButton("Menu Error >>", callback_data=str(M3_A_ETSA_OTHER_CREATE_3))],
            [InlineKeyboardButton("Ticketing >>", callback_data=str(M3_A_ETSA_OTHER_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_ETSA_OTHER_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Account >>", callback_data=str(M3_A_ETSA_OTHER_CREATE_1))],
            [InlineKeyboardButton("Loading >>", callback_data=str(M3_A_ETSA_OTHER_CREATE_2))],
            [InlineKeyboardButton("Menu Error >>", callback_data=str(M3_A_ETSA_OTHER_CREATE_3))],
            [InlineKeyboardButton("Ticketing >>", callback_data=str(M3_A_ETSA_OTHER_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_ETSA_OTHER_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_ETSA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)

def m3_a_ewonder_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
    log_bot.write("Other Problems")
    log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text("Anda memilih : *BUAT TIKET*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'EWONDER'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'EWD' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EWONDER'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_EWONDER))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EWONDER'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di EWONDER, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ewonder()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_EWONDER
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EWONDER
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EWONDER
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EWONDER
        
def m3_a_ewonder_other_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("Other Problems ➞ {}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'EWONDER'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'EWD' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EWONDER'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_EWONDER))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EWONDER'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di EWONDER, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ewonder()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_EWONDER
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EWONDER
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EWONDER
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EWONDER
        
def get_summary_ewonder():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'EWONDER'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ewonder(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_EWONDER
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_EWONDER
def end_ewonder(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "EWD"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'EWONDER', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'EWONDER'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'EWONDER')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "EWD"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'EWONDER', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','AGATA','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'EWONDER'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'EWONDER')
    return ConversationHandler.END

def m3_a_ewonder(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Application Login", callback_data=str(M3_A_EWONDER_AL))],
            [InlineKeyboardButton("Warehouse >>", callback_data=str(M3_A_EWONDER_W))],
            [InlineKeyboardButton("Warehouse Approval >>", callback_data=str(M3_A_EWONDER_WA))],
            [InlineKeyboardButton("Warehouse Task >>", callback_data=str(M3_A_EWONDER_WT))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_EWONDER_OTHER))],
            [InlineKeyboardButton("REQUESTS USER EWONDER", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *EWONDER*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Application Login", callback_data=str(M3_A_EWONDER_AL))],
            [InlineKeyboardButton("Warehouse >>", callback_data=str(M3_A_EWONDER_W))],
            [InlineKeyboardButton("Warehouse Approval >>", callback_data=str(M3_A_EWONDER_WA))],
            [InlineKeyboardButton("Warehouse Task >>", callback_data=str(M3_A_EWONDER_WT))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_EWONDER_OTHER))],
            [InlineKeyboardButton("REQUESTS USER EWONDER", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *EWONDER*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_ewonder_al(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Application Login*",parse_mode=telegram.ParseMode.MARKDOWN)
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query = update.callback_query
        query.answer()
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/application-login/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/application-login/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_w(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Warehouse*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Guide for Administrator", callback_data=str(M3_A_EWONDER_W_ADM))],
        [InlineKeyboardButton("Guide for Approver", callback_data=str(M3_A_EWONDER_W_APV))],
        [InlineKeyboardButton("Guide for Vendor", callback_data=str(M3_A_EWONDER_W_V))],
        [InlineKeyboardButton("Guide for Warehouse PIC", callback_data=str(M3_A_EWONDER_W_WP))],
        [InlineKeyboardButton("Guide for User (Requestor)", callback_data=str(M3_A_EWONDER_W_U))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EWONDER))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_ewonder_w_adm(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Guide for Administrator*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/administrator',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/administrator',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_w_apv(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Guide for Approver*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/guide-for-approver',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/guide-for-approver',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_w_v(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Guide for Vendor*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/guide-for-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/guide-for-vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_w_wp(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Guide for Warehouse PIC*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/guide-for-warehouse-pi',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/guide-for-warehouse-pi',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_w_u(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Guide for User (Requestor)*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/guide-for-user-requestor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse/guide-for-user-requestor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wa(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Warehouse Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Mobile", callback_data=str(M3_A_EWONDER_WA_MBL))],
        [InlineKeyboardButton("Tablet", callback_data=str(M3_A_EWONDER_WA_TBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EWONDER))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_ewonder_wa_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-approval/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-approval/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wa_tbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Tablet*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-approval/tablet',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-approval/tablet',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wt(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Warehouse Task*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Penyimpanan >>", callback_data=str(M3_A_EWONDER_WT_S))],
        [InlineKeyboardButton("Permintaan >>", callback_data=str(M3_A_EWONDER_WT_P))],
        [InlineKeyboardButton("Penghapusan >>", callback_data=str(M3_A_EWONDER_WT_H))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EWONDER))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_ewonder_wt_s(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text("Anda memilih : *Penyimpanan*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_EWONDER_WT_S_WEB))],
        [InlineKeyboardButton("Tablet", callback_data=str(M3_A_EWONDER_WT_S_TBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EWONDER_WT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_ewonder_wt_s_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penyimpanan/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penyimpanan/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wt_s_tbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Tablet*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penyimpanan/tablet',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penyimpanan/tablet',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wt_p(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Permintaan*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_EWONDER_WT_P_WEB))],
        [InlineKeyboardButton("Tablet", callback_data=str(M3_A_EWONDER_WT_P_TBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EWONDER_WT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_ewonder_wt_p_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/permintaan/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/permintaan/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wt_p_tbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Tablet*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/permintaan/tablet',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/permintaan/tablet',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wt_h(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Penghapusan*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create New Task (Penghapusan)", callback_data=str(M3_A_EWONDER_WT_H_CNT))],
        [InlineKeyboardButton("Equipment Confirmation", callback_data=str(M3_A_EWONDER_WT_H_EC))],
        [InlineKeyboardButton("Submit Work Order", callback_data=str(M3_A_EWONDER_WT_H_SWO))],
        [InlineKeyboardButton("Release Work Order", callback_data=str(M3_A_EWONDER_WT_H_RWO))],
        [InlineKeyboardButton("Approval", callback_data=str(M3_A_EWONDER_WT_H_A))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_EWONDER_WT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_ewonder_wt_h_cnt(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create New Task (Penghapusan)*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/create-new-task-penghapusan',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/create-new-task-penghapusan',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wt_h_ec(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Equipment Confirmation*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/equipment-confirmation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/equipment-confirmation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wt_h_swo(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Submit Work Order*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/submit-work-order',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/submit-work-order',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wt_h_rwo(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Release Work Order*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/release-work-order',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/release-work-order',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_ewonder_wt_h_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/ewonder/warehouse-task/penghapusan/approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_EWONDER_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_ewonder_other(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Role on Ewonder", callback_data=str(M3_A_EWONDER_OTHER_CREATE_1))],
            [InlineKeyboardButton("Permit", callback_data=str(M3_A_EWONDER_OTHER_CREATE_2))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_EWONDER_OTHER_CREATE_3))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_EWONDER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Role on Ewonder", callback_data=str(M3_A_EWONDER_OTHER_CREATE_1))],
            [InlineKeyboardButton("Permit", callback_data=str(M3_A_EWONDER_OTHER_CREATE_2))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_EWONDER_OTHER_CREATE_3))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_EWONDER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)

def m3_a_felisa(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_FELISA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER FELISA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *FELISA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_FELISA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER FELISA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *FELISA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_felisa_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123,username='davina_apps', password='Davina*55?')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'FELISA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'FLS' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'FELISA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_FELISA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Back", callback_data=str(M3_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'FELISA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di FELISA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_felisa()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_FELISA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_FELISA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_FELISA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_FELISA
        
def get_summary_felisa():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'FELISA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_felisa(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_FELISA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_FELISA
def end_felisa(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "FLS"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'FELISA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'FELISA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)   
        log_bot(update, 'FELISA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "FLS"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'FELISA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','AGATA','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'FELISA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'FELISA')
    return ConversationHandler.END

def m3_a_fiola_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
    log_bot.write("Other Problems")
    log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text("Anda memilih : *BUAT TIKET*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'FIOLA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'FLA' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'FIOLA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_FIOLA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'FIOLA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di FIOLA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_fiola()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_FIOLA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_FIOLA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_FIOLA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_FIOLA
    
def m3_a_fiola_other_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("Other Problems ➞ {}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    if data_text in 'Data Can Not Synchron':
        keyboard = [
            [InlineKeyboardButton("Error by Application", callback_data=str(M3_A_FIOLA_OTHER_CREATE_1A))],
            [InlineKeyboardButton("Api Can Not Connect", callback_data=str(M3_A_FIOLA_OTHER_CREATE_1B))],
            [InlineKeyboardButton("Site ID Not Found", callback_data=str(M3_A_FIOLA_OTHER_CREATE_1C))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Environment':
        keyboard = [
            [InlineKeyboardButton("Has Been Take Over by Other Account", callback_data=str(M3_A_FIOLA_OTHER_CREATE_2A))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Error Dual Device':
        keyboard = [
            [InlineKeyboardButton("Find Conflict on Other Device", callback_data=str(M3_A_FIOLA_OTHER_CREATE_3A))],
            [InlineKeyboardButton("Knowladge Takeover", callback_data=str(M3_A_FIOLA_OTHER_CREATE_3B))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Take Over':
        keyboard = [
            [InlineKeyboardButton("Recancel and Refollow Up", callback_data=str(M3_A_FIOLA_OTHER_CREATE_4A))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_OTHER))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Other Problems':
        query.message.reply_text(f"Masukkan detail problem :")
        return END_FIOLA

def m3_a_fiola_other_create_ticket(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'FIOLA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'FLA' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'FIOLA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_FIOLA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Batal", callback_data=str(BATAL_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'FIOLA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di FIOLA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_fiola()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_FIOLA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_FIOLA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_FIOLA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_FIOLA


        
def get_summary_fiola():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'FIOLA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_fiola(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_FIOLA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_FIOLA
def end_fiola(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "FLA"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'FIOLA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'FIOLA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'FIOLA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "FLA"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'FIOLA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001831369226','{ticket}','{problem_title}','{data_select[8]}','open','FIOLA','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'FIOLA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'FIOLA')
    return ConversationHandler.END
def m3_a_fiola(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("BoQ Planning", callback_data=str(M3_A_FIOLA_BP))],
            [InlineKeyboardButton("All PM >> ", callback_data=str(M3_A_FIOLA_AP))],
            [InlineKeyboardButton("All CM >>", callback_data=str(M3_A_FIOLA_AC))],
            [InlineKeyboardButton("BPS Monitoring >>", callback_data=str(M3_A_FIOLA_BM))],
            [InlineKeyboardButton("BBM Fixed Genset Refill >>", callback_data=str(M3_A_FIOLA_BFGR))],
            [InlineKeyboardButton("TS FMS >>", callback_data=str(M3_A_FIOLA_TF))],
            [InlineKeyboardButton("Asset Safeguard", callback_data=str(M3_A_FIOLA_AS))],
            [InlineKeyboardButton("CGL (Imbas Petir) >>", callback_data=str(M3_A_FIOLA_C))],
            [InlineKeyboardButton("eBAPP,  eKPI, eBAST >>", callback_data=str(M3_A_FIOLA_EEE))],
            [InlineKeyboardButton("Command Center >>", callback_data=str(M3_A_FIOLA_CC))],
            [InlineKeyboardButton("General Task", callback_data=str(M3_A_FIOLA_GT))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_FIOLA_OTHER))],
            [InlineKeyboardButton("REQUESTS USER FIOLA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *FIOLA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("BoQ Planning", callback_data=str(M3_A_FIOLA_BP))],
            [InlineKeyboardButton("All PM >> ", callback_data=str(M3_A_FIOLA_AP))],
            [InlineKeyboardButton("All CM >>", callback_data=str(M3_A_FIOLA_AC))],
            [InlineKeyboardButton("BPS Monitoring >>", callback_data=str(M3_A_FIOLA_BM))],
            [InlineKeyboardButton("BBM Fixed Genset Refill >>", callback_data=str(M3_A_FIOLA_BFGR))],
            [InlineKeyboardButton("TS FMS >>", callback_data=str(M3_A_FIOLA_TF))],
            [InlineKeyboardButton("Asset Safeguard", callback_data=str(M3_A_FIOLA_AS))],
            [InlineKeyboardButton("CGL (Imbas Petir) >>", callback_data=str(M3_A_FIOLA_C))],
            [InlineKeyboardButton("eBAPP,  eKPI, eBAST >>", callback_data=str(M3_A_FIOLA_EEE))],
            [InlineKeyboardButton("Command Center >>", callback_data=str(M3_A_FIOLA_CC))],
            [InlineKeyboardButton("General Task", callback_data=str(M3_A_FIOLA_GT))],
            [InlineKeyboardButton("Other Problems >>", callback_data=str(M3_A_FIOLA_OTHER))],
            [InlineKeyboardButton("REQUESTS USER FIOLA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *FIOLA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_fiola_bp(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *BoQ Planning*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/boq-planning/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/boq-planning/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *All PM*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("PM Schedule Planning", callback_data=str(M3_A_FIOLA_AP_SP))],
        [InlineKeyboardButton("PM Site >>", callback_data=str(M3_A_FIOLA_AP_S))],
        [InlineKeyboardButton("PM Genset >>", callback_data=str(M3_A_FIOLA_AP_G))],
        [InlineKeyboardButton("PM Request >>", callback_data=str(M3_A_FIOLA_AP_R))],
        [InlineKeyboardButton("PM Site Sampling >>", callback_data=str(M3_A_FIOLA_AP_PSP))],
        [InlineKeyboardButton("PM Genset Sparepart", callback_data=str(M3_A_FIOLA_AP_GS))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_fiola_ap_sp(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *PM Schedule Planning*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-schedule-planning/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-schedule-planning/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_s(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *PM Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_FIOLA_AP_S_WEB))],
        [InlineKeyboardButton("Approval Ticket Asset", callback_data=str(M3_A_FIOLA_AP_S_ATA))],
        [InlineKeyboardButton("Mobile ", callback_data=str(M3_A_FIOLA_AP_S_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ap_s_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_s_ata(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval Ticket Asset*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site/approval-ticket-asset',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site/approval-ticket-asset',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_s_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup) 
def m3_a_fiola_ap_g(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *PM Genset*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_FIOLA_AP_G_WEB))],
        [InlineKeyboardButton("Mobile ", callback_data=str(M3_A_FIOLA_AP_G_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ap_g_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-genset/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-genset/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_g_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-genset/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-genset/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup) 
def m3_a_fiola_ap_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *PM Request*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_FIOLA_AP_R_WEB))],
        [InlineKeyboardButton("Mobile ", callback_data=str(M3_A_FIOLA_AP_R_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ap_r_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-request/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-request/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_r_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-request/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-request/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_psp(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *PM Site Sampling*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Assessment", callback_data=str(M3_A_FIOLA_AP_PSP_CA))],
        [InlineKeyboardButton("Working on Ticket", callback_data=str(M3_A_FIOLA_AP_PSP_WT))],
        [InlineKeyboardButton("Approval Ticket", callback_data=str(M3_A_FIOLA_AP_PSP_AT))],
        [InlineKeyboardButton("Export Ticket List", callback_data=str(M3_A_FIOLA_AP_PSP_ETL))],
        [InlineKeyboardButton("Download Resume", callback_data=str(M3_A_FIOLA_AP_PSP_DR))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AP))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ap_psp_ca(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Assessment*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/create-assessment',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/create-assessment',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_psp_wt(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/working-on-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/working-on-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_psp_at(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/approval-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/approval-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_psp_etl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Export Ticket List*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/export-ticket-list',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/export-ticket-list',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_psp_dr(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Download Resume*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/download-resume',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-site-sampling/download-resume',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ap_gs(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *PM Genset Sparepart*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-genset-sparepart/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/pm-genset-sparepart/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_fiola_ac(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *All CM*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("CM Site (BSS, Optim, Civil) >>", callback_data=str(M3_A_FIOLA_AC_CS))],
        [InlineKeyboardButton("CM Power System >> ", callback_data=str(M3_A_FIOLA_AC_CPS))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_ac_cs(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *CM Site (BSS, Optim, Civil)*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Ticket >>", callback_data=str(M3_A_FIOLA_AC_CS_CT))],
        [InlineKeyboardButton("Activity Approval >>", callback_data=str(M3_A_FIOLA_AC_CS_AA))],
        [InlineKeyboardButton("Working on Ticket", callback_data=str(M3_A_FIOLA_AC_CS_WT))],
        [InlineKeyboardButton("All Asset >>", callback_data=str(M3_A_FIOLA_AC_CS_A))],
        [InlineKeyboardButton("Work Approval >>", callback_data=str(M3_A_FIOLA_AC_CS_WA))],
        [InlineKeyboardButton("Approval Ticket >>", callback_data=str(M3_A_FIOLA_AC_CS_AT))],
        [InlineKeyboardButton("Download BA", callback_data=str(M3_A_FIOLA_AC_CS_DB))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_ac_cs_ct(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Draft Ticket", callback_data=str(M3_A_FIOLA_AC_CS_CT_C))],
        [InlineKeyboardButton("Approval Draft Ticket", callback_data=str(M3_A_FIOLA_AC_CS_CT_A))],
        [InlineKeyboardButton("Update Draft Ticket", callback_data=str(M3_A_FIOLA_AC_CS_CT_U))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_ac_cs_ct_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Draft Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/create-ticket/create-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/create-ticket/create-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_ct_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval Draft Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/create-ticket/approval-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/create-ticket/approval-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_ct_u(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Update Draft Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/create-ticket/update-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/create-ticket/update-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_aa(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Activity Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("By SQA & NOS", callback_data=str(M3_A_FIOLA_AC_CS_AA_B))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_ac_cs_aa_b(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *By SQA & NOS*",parse_mode=telegram.ParseMode.MARKDOWN)
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/activity-approval/by-sqa-and-nos',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/activity-approval/by-sqa-and-nos',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_wt(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/working-on-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/working-on-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *All Asset*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Asset Replacement >>", callback_data=str(M3_A_FIOLA_AC_CS_A_R))],
        [InlineKeyboardButton("Asset Configuration Change", callback_data=str(M3_A_FIOLA_AC_CS_A_CC))],
        [InlineKeyboardButton("Asset Movement >>", callback_data=str(M3_A_FIOLA_AC_CS_A_M))],
        [InlineKeyboardButton("Asset Lost", callback_data=str(M3_A_FIOLA_AC_CS_A_L))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cs_a_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Replacement*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Default Form/Non eTSA", callback_data=str(M3_A_FIOLA_AC_CS_A_R_D))],
        [InlineKeyboardButton("eTSA Form >>", callback_data=str(M3_A_FIOLA_AC_CS_A_R_E))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS_A))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cs_a_r_d(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Default Form/Non eTSA*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/default-form-non-etsa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/default-form-non-etsa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_r_e(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *eTSA Form*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("TO", callback_data=str(M3_A_FIOLA_AC_CS_A_R_E_T))],
        [InlineKeyboardButton("Manager ENOM", callback_data=str(M3_A_FIOLA_AC_CS_A_R_E_M))],
        [InlineKeyboardButton("Vendor", callback_data=str(M3_A_FIOLA_AC_CS_A_R_E_V))],
        [InlineKeyboardButton("FMS", callback_data=str(M3_A_FIOLA_AC_CS_A_R_E_F))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS_A_R))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cs_a_r_e_t(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TO*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/etsa-form/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/etsa-form/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_r_e_m(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Manager ENOM*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/etsa-form/manager-enom',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/etsa-form/manager-enom',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_r_e_v(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Vendor*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/etsa-form/vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/etsa-form/vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_r_e_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/etsa-form/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-replacement/etsa-form/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_cc(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Configuration Change*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-configuration-change',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-configuration-change',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Movement*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Site/LPS to Site >>", callback_data=str(M3_A_FIOLA_AC_CS_A_M_STS))],
        [InlineKeyboardButton("Site/LPS to WH >>", callback_data=str(M3_A_FIOLA_AC_CS_A_M_STW))],
        [InlineKeyboardButton("WH to Site >>", callback_data=str(M3_A_FIOLA_AC_CS_A_M_WTS))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS_A))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cs_a_m_sts(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Site/LPS to Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("FMS", callback_data=str(M3_A_FIOLA_AC_CS_A_M_STS_F))],
        [InlineKeyboardButton("RTPE", callback_data=str(M3_A_FIOLA_AC_CS_A_M_STS_R))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS_A_M))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cs_a_m_sts_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-site/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-site/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m_sts_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *RTPE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-site/rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-site/rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m_stw(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Site/LPS to WH*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("FMS", callback_data=str(M3_A_FIOLA_AC_CS_A_M_STW_F))],
        [InlineKeyboardButton("RTPE", callback_data=str(M3_A_FIOLA_AC_CS_A_M_STW_R))],
        [InlineKeyboardButton("WH SPV", callback_data=str(M3_A_FIOLA_AC_CS_A_M_STW_W))],
        [InlineKeyboardButton("Inventory SPV & MGR", callback_data=str(M3_A_FIOLA_AC_CS_A_M_STW_I))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS_A_M))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cs_a_m_stw_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-wh/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-wh/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m_stw_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *RTPE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-wh/rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-wh/rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m_stw_w(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *WH SPV*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-wh/wh-spv',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-wh/wh-spv',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m_stw_i(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Inventory SPV & MGR*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-wh/inventory-spv-and-mgr',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/site-lps-to-wh/inventory-spv-and-mgr',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m_wts(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *WH to Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("FMS", callback_data=str(M3_A_FIOLA_AC_CS_A_M_WTS_F))],
        [InlineKeyboardButton("RTPE", callback_data=str(M3_A_FIOLA_AC_CS_A_M_WTS_R))],
        [InlineKeyboardButton("Inventory SPV & MGR", callback_data=str(M3_A_FIOLA_AC_CS_A_M_WTS_I))],
        [InlineKeyboardButton("WH SPV", callback_data=str(M3_A_FIOLA_AC_CS_A_M_WTS_W))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS_A_M))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cs_a_m_wts_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/wh-to-site',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/wh-to-site',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m_wts_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *RTPE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/wh-to-site/rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/wh-to-site/rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m_wts_i(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Inventory SPV & MGR*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/wh-to-site/inventory-spv-and-mgr',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/wh-to-site/inventory-spv-and-mgr',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_m_wts_w(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *WH SPV*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/wh-to-site/wh-spv',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-movement/wh-to-site/wh-spv',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_a_l(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Lost*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-lost',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/asset-lost',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_wa(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Work Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    keyboard = [
        [InlineKeyboardButton("By NOP, DCAA, & NOS", callback_data=str(M3_A_FIOLA_AC_CS_WA_B))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cs_wa_b(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *By NOP, DCAA, & NOS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/work-approval/by-nop-dcaa-and-nos',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/work-approval/by-nop-dcaa-and-nos',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_at(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
         [InlineKeyboardButton("By DCAA", callback_data=str(M3_A_FIOLA_AC_CS_AT_B))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CS))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cs_at_b(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *By DCAA*",parse_mode=telegram.ParseMode.MARKDOWN)
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/approval-ticket/by-dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/approval-ticket/by-dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cs_db(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Download BA*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/download-ba',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-site-bss-optim-civil/download-ba',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cps(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *CM Power System*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Ticket >>", callback_data=str(M3_A_FIOLA_AC_CPS_CT))],
        [InlineKeyboardButton("Budget Approval", callback_data=str(M3_A_FIOLA_AC_CPS_BA))],
        [InlineKeyboardButton("Web", callback_data=str(M3_A_FIOLA_AC_CPS_WEB))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_ac_cps_ct(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Draft Ticket", callback_data=str(M3_A_FIOLA_AC_CPS_CT_C))],
        [InlineKeyboardButton("Approval Draft Ticket", callback_data=str(M3_A_FIOLA_AC_CPS_CT_A))],
        [InlineKeyboardButton("Update Draft Ticket", callback_data=str(M3_A_FIOLA_AC_CPS_CT_U))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_AC_CPS))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_ac_cps_ct_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Draft Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/create-ticket/create-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/create-ticket/create-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cps_ct_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Approval Draft Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/create-ticket/approval-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/create-ticket/approval-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cps_ct_u(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Update Draft Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/create-ticket/update-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/create-ticket/update-draft-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cps_ba(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Budget Approval*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/budget-approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/budget-approval',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_ac_cps_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cm-power-system/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_bm(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *BPS Monitoring*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_FIOLA_BM_WEB))],
        [InlineKeyboardButton("Mobile ", callback_data=str(M3_A_FIOLA_BM_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_bm_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/bps-monitoring/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/bps-monitoring/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_bm_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/bps-monitoring/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/bps-monitoring/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_bfgr(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *BBM Fixed Genset Refill*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_FIOLA_BFGR_WEB))],
        [InlineKeyboardButton("Mobile ", callback_data=str(M3_A_FIOLA_BFGR_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_bfgr_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/bbm-fixed-genset-refill/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/bbm-fixed-genset-refill/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_bfgr_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/bbm-fixed-genset-refill/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/bbm-fixed-genset-refill/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_fiola_tf(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TS FMS*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Create Ticket >>", callback_data=str(M3_A_FIOLA_TF_C))],
        [InlineKeyboardButton("Working on Ticket", callback_data=str(M3_A_FIOLA_TF_W))],
        [InlineKeyboardButton("All Asset >>", callback_data=str(M3_A_FIOLA_TF_A))],
        [InlineKeyboardButton("Aproval Ticket >>", callback_data=str(M3_A_FIOLA_TF_AT))],
        [InlineKeyboardButton("Download BA", callback_data=str(M3_A_FIOLA_TF_DB))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_tf_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Create Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Technical Support Page", callback_data=str(M3_A_FIOLA_TF_C_T))],
        [InlineKeyboardButton("General Task Page", callback_data=str(M3_A_FIOLA_TF_C_G))],
        [InlineKeyboardButton("Command Center Page", callback_data=str(M3_A_FIOLA_TF_C_C))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_TF))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_tf_c_t(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Technical Support Page*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/create-ticket/technical-support-page',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/create-ticket/technical-support-page',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_c_g(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *General Task Page*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/create-ticket/general-task-page',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/create-ticket/general-task-page',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_c_c(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Command Center Page*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/create-ticket/command-center-page',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/create-ticket/command-center-page',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_w(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Working on Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/working-on-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/working-on-ticket',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *All Asset*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Asset Replacement >>", callback_data=str(M3_A_FIOLA_TF_A_R))],
        [InlineKeyboardButton("Asset Movement >>", callback_data=str(M3_A_FIOLA_TF_A_M))],
        [InlineKeyboardButton("Asset Lost", callback_data=str(M3_A_FIOLA_TF_A_L))],
        [InlineKeyboardButton("Asset Validation", callback_data=str(M3_A_FIOLA_TF_A_V))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_TF))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_tf_a_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Replacement*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Default Form/Non eTSA", callback_data=str(M3_A_FIOLA_TF_A_R_D))],
        [InlineKeyboardButton("eTSA Form >>", callback_data=str(M3_A_FIOLA_TF_A_R_E))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_TF_A))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_tf_a_r_d(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Default Form/Non eTSA*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/default-form-non-etsa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/default-form-non-etsa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_r_e(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *eTSA Form*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("TO", callback_data=str(M3_A_FIOLA_TF_A_R_E_T))],
        [InlineKeyboardButton("FMS", callback_data=str(M3_A_FIOLA_TF_A_R_E_F))],
        [InlineKeyboardButton("Manager ENOM", callback_data=str(M3_A_FIOLA_TF_A_R_E_M))],
        [InlineKeyboardButton("Vendor", callback_data=str(M3_A_FIOLA_TF_A_R_E_V))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_TF_A_R))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_tf_a_r_e_t(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TO*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/etsa-form/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/etsa-form/to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_r_e_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/etsa-form/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/etsa-form/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_r_e_m(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Manager ENOM*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/etsa-form/manager-enom',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/etsa-form/manager-enom',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_r_e_v(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Vendor*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/etsa-form/vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-replacement/etsa-form/vendor',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Movement*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Site/LPS to Site >>", callback_data=str(M3_A_FIOLA_TF_A_M_STS))],
        [InlineKeyboardButton("Site/LPS to WH >>", callback_data=str(M3_A_FIOLA_TF_A_M_STW))],
        [InlineKeyboardButton("WH to Site >>", callback_data=str(M3_A_FIOLA_TF_A_M_WTS))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_TF_A))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_tf_a_m_sts(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Site/LPS to Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("FMS", callback_data=str(M3_A_FIOLA_TF_A_M_STS_F))],
        [InlineKeyboardButton("RTPE Staff", callback_data=str(M3_A_FIOLA_TF_A_M_STS_R))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_TF_A_M))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_tf_a_m_sts_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-site/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-site/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m_sts_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *RTPE Staff*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-site/rtpe-staff',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-site/rtpe-staff',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m_stw(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Site/LPS to WH*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("FMS", callback_data=str(M3_A_FIOLA_TF_A_M_STW_F))],
        [InlineKeyboardButton("RTPE Staff", callback_data=str(M3_A_FIOLA_TF_A_M_STW_R))],
        [InlineKeyboardButton("WH SPV", callback_data=str(M3_A_FIOLA_TF_A_M_STW_W))],
        [InlineKeyboardButton("Inventory SPV & MGR", callback_data=str(M3_A_FIOLA_TF_A_M_STW_I))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_TF_A_M))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN) 
def m3_a_fiola_tf_a_m_stw_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-wh/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-wh/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m_stw_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *RTPE Staff*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-wh/rtpe-staff',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-wh/rtpe-staff',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m_stw_w(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *WH SPV*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-wh/wh-spv',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-wh/wh-spv',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m_stw_i(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Inventory SPV & MGR*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-wh/inventory-spv-and-mgr',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/site-lps-to-wh/inventory-spv-and-mgr',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m_wts(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *WH to Site*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("FMS", callback_data=str(M3_A_FIOLA_TF_A_M_WTS_F))],
        [InlineKeyboardButton("RTPE Staff", callback_data=str(M3_A_FIOLA_TF_A_M_WTS_R))],
        [InlineKeyboardButton("WH SPV", callback_data=str(M3_A_FIOLA_TF_A_M_WTS_W))],
        [InlineKeyboardButton("Inventory SPV & MGR", callback_data=str(M3_A_FIOLA_TF_A_M_WTS_I))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_TF_A_M))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_tf_a_m_wts_f(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FMS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/wh-to-site/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/wh-to-site/fms',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m_wts_r(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *RTPE Staff*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/wh-to-site/rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/wh-to-site/rtpe',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m_wts_w(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *WH SPV*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/wh-to-site/wh-spv',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/wh-to-site/wh-spv',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_m_wts_i(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Inventory SPV & MGR*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/wh-to-site/inventory-spv-and-mgr',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-movement/wh-to-site/inventory-spv-and-mgr',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_l(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Lost*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-lost',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-lost',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_a_v(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Validation*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-validation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/asset-validation',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_at(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Aproval Ticket*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("By NOS Manager (Asset Lost Only)", callback_data=str(M3_A_FIOLA_TF_AT_N))],
        [InlineKeyboardButton("By TO", callback_data=str(M3_A_FIOLA_TF_AT_T))],
        [InlineKeyboardButton("By DCAA", callback_data=str(M3_A_FIOLA_TF_AT_D))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA_TF))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)  
def m3_a_fiola_tf_at_n(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *By NOS Manager (Asset Lost Only)*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/approval-ticket/by-nos-manager-asset-lost-only',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/approval-ticket/by-nos-manager-asset-lost-only',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_at_t(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *By TO*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/approval-ticket/by-to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/approval-ticket/by-to',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_at_d(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *By DCAA*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/approval-ticket/by-dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/approval-ticket/by-dcaa',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_tf_db(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Download BA*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/download-ba',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ts-fms/download-ba',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_fiola_as(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Asset Safeguard*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/asset-safeguard/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/asset-safeguard/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_c(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *CGL (Imbas Petir)*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Web", callback_data=str(M3_A_FIOLA_C_WEB))],
        [InlineKeyboardButton("Mobile ", callback_data=str(M3_A_FIOLA_C_MBL))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_fiola_c_web(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Web*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cgl-imbas-petir/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cgl-imbas-petir/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_c_mbl(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Mobile*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cgl-imbas-petir/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/cgl-imbas-petir/mobile',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_fiola_eee(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *eBAPP,  eKPI, eBAST*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("eBAPP", callback_data=str(M3_A_FIOLA_EEE_EBAPP))],
        [InlineKeyboardButton("eKPI", callback_data=str(M3_A_FIOLA_EEE_EKPI))],
        [InlineKeyboardButton("eBAST", callback_data=str(M3_A_FIOLA_EEE_EBAST))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_fiola_eee_ebapp(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *eBAPP*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ebapp/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ebapp/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_eee_ekpi(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *eKPI*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ekpi/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ekpi/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_eee_ebast(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *eBAST*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ebast/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/ebast/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_fiola_cc(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Command Center*",parse_mode=telegram.ParseMode.MARKDOWN)
    keyboard = [
        [InlineKeyboardButton("Acknowledge", callback_data=str(M3_A_FIOLA_CC_A))],
        [InlineKeyboardButton("Dispatch", callback_data=str(M3_A_FIOLA_CC_D))],
        [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text('Pilih :', reply_markup=reply_markup,parse_mode=telegram.ParseMode.MARKDOWN)
def m3_a_fiola_cc_a(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Acknowledge*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/command-center/acknowledge',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/command-center/acknowledge',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
def m3_a_fiola_cc_d(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *Dispatch*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/command-center/dispatch',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/command-center/dispatch',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_fiola_gt(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *General Task*",parse_mode=telegram.ParseMode.MARKDOWN)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/general-task/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)
    except:
        query.message.reply_text('https://docs.ineom-tsel.mit.id/fiola/general-task/web',parse_mode=telegram.ParseMode.HTML)
        keyboard = [
            [InlineKeyboardButton("Sudah (Tutup Proses)", callback_data=str(BATAL_A))],
            [InlineKeyboardButton("Belum (Buat Tiket)", callback_data=str(M3_A_FIOLA_CREATE))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text("Apakah informasi tersebut sudah membantu anda ?",reply_markup=reply_markup)

def m3_a_fiola_other(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Data Can Not Synchron >>", callback_data=str(M3_A_FIOLA_OTHER_CREATE_1))],
            [InlineKeyboardButton("Environment >>", callback_data=str(M3_A_FIOLA_OTHER_CREATE_2))],
            [InlineKeyboardButton("Error Dual Device >>", callback_data=str(M3_A_FIOLA_OTHER_CREATE_3))],
            [InlineKeyboardButton("Take Over >>", callback_data=str(M3_A_FIOLA_OTHER_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_FIOLA_OTHER_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Data Can Not Synchron >>", callback_data=str(M3_A_FIOLA_OTHER_CREATE_1))],
            [InlineKeyboardButton("Environment >>", callback_data=str(M3_A_FIOLA_OTHER_CREATE_2))],
            [InlineKeyboardButton("Error Dual Device >>", callback_data=str(M3_A_FIOLA_OTHER_CREATE_3))],
            [InlineKeyboardButton("Take Over >>", callback_data=str(M3_A_FIOLA_OTHER_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_FIOLA_OTHER_CREATE_5))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_FIOLA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *Other Problems*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)

def m3_a_lolita(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_LOLITA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER LOLITA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *LOLITA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_LOLITA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER LOLITA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *LOLITA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_lolita_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'LOLITA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'LTA' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'LOLITA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_LOLITA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Back", callback_data=str(M3_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'LOLITA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di LOLITA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_lolita()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_LOLITA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_LOLITA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_LOLITA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_LOLITA
        
def get_summary_lolita():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'LOLITA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_lolita(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_LOLITA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_LOLITA
def end_lolita(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "LTA"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'LOLITA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'LOLITA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'LOLITA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "LTA"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'LOLITA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','LOLITA','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'LOLITA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'LOLITA')
    return ConversationHandler.END
def m3_a_scarlet(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Extend SSL", callback_data=str(M3_A_SCARLET_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_SCARLET_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER SCARLETT", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *SCARLETT*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Extend SSL", callback_data=str(M3_A_SCARLET_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_SCARLET_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER SCARLETT", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *SCARLETT*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_scarlet_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'SCARLETT'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'SCL' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SCARLETT'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_SCARLET))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Back", callback_data=str(M3_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SCARLETT'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di SCARLETT, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_scarlet()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_SCARLET
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SCARLET
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SCARLET
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SCARLET
        
def get_summary_scarlet():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'SCARLETT'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_scarlet(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SCARLET
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SCARLET
def end_scarlet(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "SCL"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'SCARLETT', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SCARLETT'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SCARLETT')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "SCL"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'SCARLETT', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','SCARLETT','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SCARLETT'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SCARLETT')
    return ConversationHandler.END
def m3_a_smartkey(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Extend SSL", callback_data=str(M3_A_SMARTKEY_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_SMARTKEY_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER SMARTKEY", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *SMARTKEY*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Extend SSL", callback_data=str(M3_A_SMARTKEY_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_SMARTKEY_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER SMARTKEY", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *SMARTKEY*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_smartkey_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'SMARTKEY'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'SMK' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SMARTKEY'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_SMARTKEY))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Back", callback_data=str(M3_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SMARTKEY'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di SMARTKEY, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_smartkey()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_SMARTKEY
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SMARTKEY
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SMARTKEY
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SMARTKEY
        
def get_summary_smartkey():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'SMARTKEY'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_smartkey(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SMARTKEY
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SMARTKEY
def end_smartkey(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "SMK"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'SMARTKEY', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTKEY'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SMARTKEY'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SMARTKEY')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "SMK"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'SMARTKEY', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','SMARTKEY','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTKEY'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SMARTKEY'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SMARTKEY')
    return ConversationHandler.END
def m3_a_tiara(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_TIARA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TIARA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *TIARA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_TIARA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TIARA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *TIARA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_tiara_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'TIARA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'TRA' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TIARA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_TIARA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Back", callback_data=str(M3_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TIARA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di TIARA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_tiara()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_TIARA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TIARA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TIARA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TIARA
        
def get_summary_tiara():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'TIARA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_tiara(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TIARA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TIARA
def end_tiara(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "TRA"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TIARA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TIARA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TIARA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "TRA"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TIARA', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','TIARA','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TIARA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TIARA')
    return ConversationHandler.END

def m3_a_tpas(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Check List CTDO Role >>", callback_data=str(M3_A_TPAS_LISTCTDO))],
            [InlineKeyboardButton("Account >>", callback_data=str(M3_A_TPAS_CREATE_1))],
            [InlineKeyboardButton("Loading >>", callback_data=str(M3_A_TPAS_CREATE_2))],
            [InlineKeyboardButton("Menu Error >>", callback_data=str(M3_A_TPAS_CREATE_3))],
            [InlineKeyboardButton("Not Found >>", callback_data=str(M3_A_TPAS_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_TPAS_CREATE_5))],
            [InlineKeyboardButton("REQUESTS USER TPAS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *TPAS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Check List CTDO Role >>", callback_data=str(M3_A_TPAS_LISTCTDO))],
            [InlineKeyboardButton("Account >>", callback_data=str(M3_A_TPAS_CREATE_1))],
            [InlineKeyboardButton("Loading >>", callback_data=str(M3_A_TPAS_CREATE_2))],
            [InlineKeyboardButton("Menu Error >>", callback_data=str(M3_A_TPAS_CREATE_3))],
            [InlineKeyboardButton("Not Found >>", callback_data=str(M3_A_TPAS_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_TPAS_CREATE_5))],
            [InlineKeyboardButton("REQUESTS USER TPAS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *TPAS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_tpas_listctdo(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("REGIONAL 1", callback_data=str(M3_A_TPAS_LISTCTDO_1))],
            [InlineKeyboardButton("REGIONAL 2", callback_data=str(M3_A_TPAS_LISTCTDO_2))],
            [InlineKeyboardButton("REGIONAL 3", callback_data=str(M3_A_TPAS_LISTCTDO_3))],
            [InlineKeyboardButton("REGIONAL 4", callback_data=str(M3_A_TPAS_LISTCTDO_4))],
            [InlineKeyboardButton("REGIONAL 5", callback_data=str(M3_A_TPAS_LISTCTDO_5))],
            [InlineKeyboardButton("REGIONAL 6", callback_data=str(M3_A_TPAS_LISTCTDO_6))],
            [InlineKeyboardButton("REGIONAL 7", callback_data=str(M3_A_TPAS_LISTCTDO_7))],
            [InlineKeyboardButton("REGIONAL 8", callback_data=str(M3_A_TPAS_LISTCTDO_8))],
            [InlineKeyboardButton("REGIONAL 9", callback_data=str(M3_A_TPAS_LISTCTDO_9))],
            [InlineKeyboardButton("REGIONAL 10", callback_data=str(M3_A_TPAS_LISTCTDO_10))],
            [InlineKeyboardButton("REGIONAL 11", callback_data=str(M3_A_TPAS_LISTCTDO_11))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_TPAS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *Check List CTDO Role*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("REGIONAL 1", callback_data=str(M3_A_TPAS_LISTCTDO_1))],
            [InlineKeyboardButton("REGIONAL 2", callback_data=str(M3_A_TPAS_LISTCTDO_2))],
            [InlineKeyboardButton("REGIONAL 3", callback_data=str(M3_A_TPAS_LISTCTDO_3))],
            [InlineKeyboardButton("REGIONAL 4", callback_data=str(M3_A_TPAS_LISTCTDO_4))],
            [InlineKeyboardButton("REGIONAL 5", callback_data=str(M3_A_TPAS_LISTCTDO_5))],
            [InlineKeyboardButton("REGIONAL 6", callback_data=str(M3_A_TPAS_LISTCTDO_6))],
            [InlineKeyboardButton("REGIONAL 7", callback_data=str(M3_A_TPAS_LISTCTDO_7))],
            [InlineKeyboardButton("REGIONAL 8", callback_data=str(M3_A_TPAS_LISTCTDO_8))],
            [InlineKeyboardButton("REGIONAL 9", callback_data=str(M3_A_TPAS_LISTCTDO_9))],
            [InlineKeyboardButton("REGIONAL 10", callback_data=str(M3_A_TPAS_LISTCTDO_10))],
            [InlineKeyboardButton("REGIONAL 11", callback_data=str(M3_A_TPAS_LISTCTDO_11))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_TPAS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *Check List CTDO Role*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_tpas_listctdo_create(update: Update, _: CallbackContext) -> None:
    now = datetime.now() # current date and time
    username = update.callback_query.from_user.username
    username_telegram = 'https://t.me/{}'.format(username)
    fullname_telegram = username
    date_time = now.strftime("%d-%m-%Y %H:%M:%S WIB")
    query_date = now.strftime("%Y-%m-%d")
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            query = update.callback_query
            query.answer()
            query.edit_message_text(text=f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
            regional_parameter = data_text.title()
            file_path = '/home/dimas/baru/helpdeskbot_v2/data_log/ListCTDO.xlsx'
            df = pd.read_excel(file_path)

            filtered_data = df[df['regional_code'] == regional_parameter]
            filtered_data.rename(columns={'username': 'Username', 'sub_name': 'Sub Name','company_name / division' : 'Company Name / Department','no_hp' : 'No HP','regional_code' : 'Regional Code'}, inplace=True)

            ## Output excel
            regional_output = regional_parameter.replace(' ','_')
            nama_file_excel = '/home/dimas/baru/helpdeskbot_v2/data_log/listctdo_.xlsx'
            filtered_data.to_excel(nama_file_excel, index=False)  

            query = update.callback_query
            query.answer()
            query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/listctdo_.xlsx', 'rb'),caption="Detail List CTDO {}".format(data_text),filename="LIST_CTDO_{}.xlsx".format(data_text).replace(' ','_'))
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"INSERT INTO production.data_helpdesk_auto_command select 'TPAS','{date_time}','-','{username_telegram}','CHECK LIST CTDO ROLE'"
            client.command(query)
            query = f"SELECT count(*) as `count` FROM production.data_helpdesk_auto_command dhac WHERE toDate(parseDateTime32BestEffortOrNull(REPLACE(date, 'WIB', ''))) = '{query_date}' and app_name = 'TPAS'"
            data_count = client.command(query)
            chatid_log = '-1001822752629'
            bot_log.send_message(chat_id=chatid_log,text=f'🔎 Check List CTDO Role with total *({data_count})* in TPAS based on today by [{fullname_telegram}]({username_telegram})',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
            return ConversationHandler.END
def m3_a_tpas_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    if data_text in 'Account':
        keyboard = [
            [InlineKeyboardButton("Expired", callback_data=str(M3_A_TPAS_CREATE_1A))],
            [InlineKeyboardButton("OTP", callback_data=str(M3_A_TPAS_CREATE_1B))],
            [InlineKeyboardButton("Role", callback_data=str(M3_A_TPAS_CREATE_1C))],
            [InlineKeyboardButton("PIC Already Exist", callback_data=str(M3_A_TPAS_CREATE_1D))],
            [InlineKeyboardButton("Wrong Password", callback_data=str(M3_A_TPAS_CREATE_1E))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_TPAS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Loading':
        keyboard = [
            [InlineKeyboardButton("Freeze Menu", callback_data=str(M3_A_TPAS_CREATE_2A))],
            [InlineKeyboardButton("Server Error", callback_data=str(M3_A_TPAS_CREATE_2B))],
            [InlineKeyboardButton("Timeout", callback_data=str(M3_A_TPAS_CREATE_2C))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_TPAS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Menu Error':
        keyboard = [
            [InlineKeyboardButton("Create CRQ", callback_data=str(M3_A_TPAS_CREATE_3A))],
            [InlineKeyboardButton("Data Not Synchron", callback_data=str(M3_A_TPAS_CREATE_3B))],
            [InlineKeyboardButton("Detail Ticket", callback_data=str(M3_A_TPAS_CREATE_3C))],
            [InlineKeyboardButton("Create WO", callback_data=str(M3_A_TPAS_CREATE_3D))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_TPAS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Not Found':
        keyboard = [
            [InlineKeyboardButton("Not Update", callback_data=str(M3_A_TPAS_CREATE_4A))],
            [InlineKeyboardButton("Tracking Approval", callback_data=str(M3_A_TPAS_CREATE_4B))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A_TPAS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Other Problems':
        query.message.reply_text(f"Masukkan detail problem :")
        return END_TPAS
    
def m3_a_tpas_create_ticket(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'TPAS'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'TPS' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TPAS'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_TPAS))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Back", callback_data=str(M3_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TPAS'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di TPAS, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_tpas()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_TPAS
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TPAS
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TPAS
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TPAS
        
def get_summary_tpas():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'TPAS'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_tpas(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TPAS
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TPAS
def end_tpas(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "TPS"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TPAS', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TPAS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TPAS')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "TPS"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'TPAS', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','TPAS','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TPAS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TPAS')
    return ConversationHandler.END
def m3_a_tpower(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_TPOWER_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TPOWER", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *TPOWER*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M3_A_TPOWER_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TPOWER", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M3_A))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *TPOWER*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m3_a_tpower_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'TPOWER'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'TPW' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TPOWER'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_TPOWER))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_A))],
                    [InlineKeyboardButton("Back", callback_data=str(M3_A))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TPOWER'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di TPOWER, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_tpower()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_TPOWER
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TPOWER
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TPOWER
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TPOWER
        
def get_summary_tpower():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'TPOWER'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_tpower(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TPOWER
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TPOWER
def end_tpower(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "TPW"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TPOWER', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TPOWER'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TPOWER')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "TPW"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001822752629', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TPOWER', status = 'open', fcaps = 'ADMINISTRATION' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001822752629','{ticket}','{problem_title}','{data_select[8]}','open','TPOWER','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+eVVKJ6e6Qgk2NzI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Fault Management", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TPOWER'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Administration", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TPOWER')
    return ConversationHandler.END

def m4_pm(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("ARTHEMIS >>", callback_data=str(M4_PM_ARTHEMIS))],
                [InlineKeyboardButton("CSON", callback_data=str(M4_PM_CSONE))],
                [InlineKeyboardButton("CYCLOPS", callback_data=str(M4_PM_CYCLOPS))],
                [InlineKeyboardButton("EVITA", callback_data=str(M4_PM_EVITA))],
                [InlineKeyboardButton("IPDM", callback_data=str(M4_PM_IPDM))],
                [InlineKeyboardButton("IRONMAN", callback_data=str(M4_PM_IRONMAN))],
                [InlineKeyboardButton("KALIX >>", callback_data=str(M4_PM_KALIX))],
                [InlineKeyboardButton("OOKLA >>", callback_data=str(M4_PM_OOKLA))],
                [InlineKeyboardButton("SMARTCARE >>", callback_data=str(M4_PM_SMARTCARE))],
                [InlineKeyboardButton("SUROPATI >>", callback_data=str(M4_PM_SUROPATI))],
                [InlineKeyboardButton("TWAMP", callback_data=str(M4_PM_TWAMP))],
                [InlineKeyboardButton("ZABBIX >>", callback_data=str(M4_PM_ZABBIX))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_PM))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *PERFORMANCE*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*ARTHEMIS* : -\n*CSON* : -\n*CYCLOPS* : -\n*EVITA* : -\n*IPDM* : -\n*IRONMAN* : -\n*KALIX* : -\n*OOKLA* : -\n*SMARTCARE* : -\n*SUROPATI* : -\n*TWAMP* : -\n*ZABBIX* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("ARTHEMIS >>", callback_data=str(M4_PM_ARTHEMIS))],
                [InlineKeyboardButton("CSON", callback_data=str(M4_PM_CSONE))],
                [InlineKeyboardButton("CYCLOPS", callback_data=str(M4_PM_CYCLOPS))],
                [InlineKeyboardButton("EVITA", callback_data=str(M4_PM_EVITA))],
                [InlineKeyboardButton("IPDM", callback_data=str(M4_PM_IPDM))],
                [InlineKeyboardButton("IRONMAN", callback_data=str(M4_PM_IRONMAN))],
                [InlineKeyboardButton("KALIX >>", callback_data=str(M4_PM_KALIX))],
                [InlineKeyboardButton("OOKLA >>", callback_data=str(M4_PM_OOKLA))],
                [InlineKeyboardButton("SMARTCARE >>", callback_data=str(M4_PM_SMARTCARE))],
                [InlineKeyboardButton("SUROPATI >>", callback_data=str(M4_PM_SUROPATI))],
                [InlineKeyboardButton("TWAMP", callback_data=str(M4_PM_TWAMP))],
                [InlineKeyboardButton("ZABBIX >>", callback_data=str(M4_PM_ZABBIX))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_PM))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *PERFORMANCE*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*ARTHEMIS* : -\n*CSON* : -\n*CYCLOPS* : -\n*EVITA* : -\n*IPDM* : -\n*IRONMAN* : -\n*KALIX* : -\n*OOKLA* : -\n*SMARTCARE* : -\n*SUROPATI* : -\n*TWAMP* : -\n*ZABBIX* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("ARTHEMIS >>", callback_data=str(M4_PM_ARTHEMIS))],
                [InlineKeyboardButton("CSON", callback_data=str(M4_PM_CSONE))],
                [InlineKeyboardButton("CYCLOPS", callback_data=str(M4_PM_CYCLOPS))],
                [InlineKeyboardButton("EVITA", callback_data=str(M4_PM_EVITA))],
                [InlineKeyboardButton("IPDM", callback_data=str(M4_PM_IPDM))],
                [InlineKeyboardButton("IRONMAN", callback_data=str(M4_PM_IRONMAN))],
                [InlineKeyboardButton("KALIX >>", callback_data=str(M4_PM_KALIX))],
                [InlineKeyboardButton("OOKLA >>", callback_data=str(M4_PM_OOKLA))],
                [InlineKeyboardButton("SMARTCARE >>", callback_data=str(M4_PM_SMARTCARE))],
                [InlineKeyboardButton("SUROPATI >>", callback_data=str(M4_PM_SUROPATI))],
                [InlineKeyboardButton("TWAMP", callback_data=str(M4_PM_TWAMP))],
                [InlineKeyboardButton("ZABBIX >>", callback_data=str(M4_PM_ZABBIX))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_PM))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *PERFORMANCE*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*ARTHEMIS* : -\n*CSON* : -\n*CYCLOPS* : -\n*EVITA* : -\n*IPDM* : -\n*IRONMAN* : -\n*KALIX* : -\n*OOKLA* : -\n*SMARTCARE* : -\n*SUROPATI* : -\n*TWAMP* : -\n*ZABBIX* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("ARTHEMIS >>", callback_data=str(M4_PM_ARTHEMIS))],
                [InlineKeyboardButton("CSON", callback_data=str(M4_PM_CSONE))],
                [InlineKeyboardButton("CYCLOPS", callback_data=str(M4_PM_CYCLOPS))],
                [InlineKeyboardButton("EVITA", callback_data=str(M4_PM_EVITA))],
                [InlineKeyboardButton("IPDM", callback_data=str(M4_PM_IPDM))],
                [InlineKeyboardButton("IRONMAN", callback_data=str(M4_PM_IRONMAN))],
                [InlineKeyboardButton("KALIX >>", callback_data=str(M4_PM_KALIX))],
                [InlineKeyboardButton("OOKLA >>", callback_data=str(M4_PM_OOKLA))],
                [InlineKeyboardButton("SMARTCARE >>", callback_data=str(M4_PM_SMARTCARE))],
                [InlineKeyboardButton("SUROPATI >>", callback_data=str(M4_PM_SUROPATI))],
                [InlineKeyboardButton("TWAMP", callback_data=str(M4_PM_TWAMP))],
                [InlineKeyboardButton("ZABBIX >>", callback_data=str(M4_PM_ZABBIX))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_PM))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *PERFORMANCE*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*ARTHEMIS* : -\n*CSON* : -\n*CYCLOPS* : -\n*EVITA* : -\n*IPDM* : -\n*IRONMAN* : -\n*KALIX* : -\n*OOKLA* : -\n*SMARTCARE* : -\n*SUROPATI* : -\n*TWAMP* : -\n*ZABBIX* : -\n*MY TICKET* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
def m4_pm_arthemis(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Healthy Check Hypervisor", callback_data=str(M4_PM_ARTHEMIS_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_ARTHEMIS_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER ARTHEMIS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *ARTHEMIS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Healthy Check Hypervisor", callback_data=str(M4_PM_ARTHEMIS_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_ARTHEMIS_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER ARTHEMIS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *ARTHEMIS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_arthemis_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'ARTHEMIS'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'ATM' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ARTHEMIS'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_ARTHEMIS))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ARTHEMIS'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di ARTHEMIS, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_arthemis()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_ARTHEMIS
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ARTHEMIS
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ARTHEMIS
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ARTHEMIS
        
def get_summary_arthemis():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'ARTHEMIS'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_arthemis(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_ARTHEMIS
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_ARTHEMIS
def end_arthemis(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "ATM"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'ARTHEMIS', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'ARTHEMIS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'ARTHEMIS')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "ATM"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'ARTHEMIS', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','ARTHEMIS','{date_time}','None','ADMINISTRATION','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'ARTHEMIS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'ARTHEMIS')
    return ConversationHandler.END
def m9_covmo(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("Can Not Access >>", callback_data=str(M9_COVMO_CREATE_1))],
                [InlineKeyboardButton("Data >>", callback_data=str(M9_COVMO_CREATE_2))],
                [InlineKeyboardButton("Query >>", callback_data=str(M9_COVMO_CREATE_3))],
                [InlineKeyboardButton("Other Problems", callback_data=str(M9_COVMO_CREATE_4))],
                [InlineKeyboardButton("REQUESTS USER COVMO", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_COVMO))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *COVMO*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
        except:
            keyboard = [
                [InlineKeyboardButton("Can Not Access >>", callback_data=str(M9_COVMO_CREATE_1))],
                [InlineKeyboardButton("Data >>", callback_data=str(M9_COVMO_CREATE_2))],
                [InlineKeyboardButton("Query >>", callback_data=str(M9_COVMO_CREATE_3))],
                [InlineKeyboardButton("Other Problems", callback_data=str(M9_COVMO_CREATE_4))],
                [InlineKeyboardButton("REQUESTS USER COVMO", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_COVMO))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *COVMO*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("Can Not Access >>", callback_data=str(M9_COVMO_CREATE_1))],
                [InlineKeyboardButton("Data >>", callback_data=str(M9_COVMO_CREATE_2))],
                [InlineKeyboardButton("Query >>", callback_data=str(M9_COVMO_CREATE_3))],
                [InlineKeyboardButton("Other Problems", callback_data=str(M9_COVMO_CREATE_4))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_COVMO))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *COVMO*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
        except:
            keyboard = [
                [InlineKeyboardButton("Can Not Access >>", callback_data=str(M9_COVMO_CREATE_1))],
                [InlineKeyboardButton("Data >>", callback_data=str(M9_COVMO_CREATE_2))],
                [InlineKeyboardButton("Query >>", callback_data=str(M9_COVMO_CREATE_3))],
                [InlineKeyboardButton("Other Problems", callback_data=str(M9_COVMO_CREATE_4))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_COVMO))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *COVMO*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)

def m9_covmo_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    if data_text in 'Can Not Access':
        keyboard = [
            [InlineKeyboardButton("Server Down", callback_data=str(M9_COVMO_CREATE_1A))],
            [InlineKeyboardButton("Hardware Disturbance", callback_data=str(M9_COVMO_CREATE_1B))],
            [InlineKeyboardButton("Back", callback_data=str(M9_COVMO))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Data':
        keyboard = [
            [InlineKeyboardButton("Timestamp Discrepancy", callback_data=str(M9_COVMO_CREATE_2A))],
            [InlineKeyboardButton("Data Format Changed", callback_data=str(M9_COVMO_CREATE_2B))],
            [InlineKeyboardButton("Missing Site", callback_data=str(M9_COVMO_CREATE_2C))],
            [InlineKeyboardButton("Back", callback_data=str(M9_COVMO))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Query':
        keyboard = [
            [InlineKeyboardButton("Long Queue", callback_data=str(M9_COVMO_CREATE_3A))],
            [InlineKeyboardButton("Query Fail", callback_data=str(M9_COVMO_CREATE_3B))],
            [InlineKeyboardButton("Upnormal Data Process", callback_data=str(M9_COVMO_CREATE_3C))],
            [InlineKeyboardButton("Back", callback_data=str(M9_COVMO))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Other Problems':
        query.message.reply_text(f"Masukkan detail problem :")
        return END_COVMO
    
def m9_covmo_create_ticket(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'COVMO'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'CVM' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'COVMO'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_COVMO))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'COVMO'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di COVMO, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_covmo()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_COVMO
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_COVMO
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_COVMO
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_COVMO
        
def get_summary_covmo():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'COVMO'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_covmo(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_COVMO
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_COVMO
def end_covmo(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "CVM"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1002024885361', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'COVMO', status = 'open', fcaps = 'COVMO' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/covmo10"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk COVMO", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'COVMO'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk COVMO", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'COVMO')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "CVM"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1002024885361', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'COVMO', status = 'open', fcaps = 'COVMO' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1002024885361','{ticket}','{problem_title}','{data_select[8]}','open','COVMO','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/covmo10"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk COVMO", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'COVMO'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk COVMO", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'COVMO')
    return ConversationHandler.END
def m4_pm_csone(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_CSONE_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER CSON", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *CSON*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_CSONE_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER CSON", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *CSON*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_csone_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'CSON'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'CSN' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CSON'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_CSONE))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CSON'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di CSON, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_csone()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_CSONE
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CSONE
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CSONE
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CSONE

def get_summary_csone():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'CSON'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_csone(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CSONE
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CSONE
def end_csone(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "CSN"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CSON', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CSON'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)   
        log_bot(update, 'CSON')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "CSN"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CSON', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','CSON','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CSON'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'CSON')
    return ConversationHandler.END
def m4_pm_cyclops(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_CYCLOPS_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER CYCLOPS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *CYCLOPS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_CYCLOPS_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER CYCLOPS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *CYCLOPS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_cyclops_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'CYCLOPS'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'CYP' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CYCLOPS'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_CYCLOPS))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CYCLOPS'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di CYCLOPS, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_cyclops()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_CYCLOPS
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CYCLOPS
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CYCLOPS
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CYCLOPS
        
def get_summary_cyclops():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'CYCLOPS'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_cyclops(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CYCLOPS
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CYCLOPS
def end_cyclops(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "CYP"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CYCLOPS', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CYCLOPS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CYCLOPS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)   
        log_bot(update, 'CYCLOPS')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "CYP"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CYCLOPS', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','CYCLOPS','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CYCLOPS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CYCLOPS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'CYCLOPS')
    return ConversationHandler.END
def m4_pm_evita(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_EVITA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER EVITA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *EVITA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_EVITA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER EVITA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *EVITA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_evita_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'EVITA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'EVT' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EVITA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_EVITA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'EVITA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di EVITA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_evita()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_EVITA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EVITA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EVITA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_EVITA
        
def get_summary_evita():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'EVITA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_evita(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_EVITA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_EVITA
def end_evita(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "EVT"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'EVITA', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'EVITA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'EVITA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "EVT"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'EVITA', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','EVITA','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'EVITA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'EVITA')
    return ConversationHandler.END
def m4_pm_ipdm(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_IPDM_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER IPDM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *IPDM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_IPDM_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER IPDM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *IPDM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_ipdm_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'IPDM'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'IPD' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'IPDM'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_IPDM))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'IPDM'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di IPDM, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ipdm()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_IPDM
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_IPDM
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_IPDM
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_IPDM
        
def get_summary_ipdm():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'IPDM'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ipdm(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return end_del_pm_ipdm
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_IPDM
def end_ipdm(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "IPD"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'IPDM', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'IPDM'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'IPDM')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "IPD"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'IPDM', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','IPDM','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'IPDM'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard) 
        log_bot(update, 'IPDM')
    return ConversationHandler.END
def m4_pm_ironman(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_IRONMAN_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER IRONMAN", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *IRONMAN*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_IRONMAN_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER IRONMAN", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *IRONMAN*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_ironman_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'IRONMAN'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'IRM' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'IRONMAN'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_IRONMAN))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'IRONMAN'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di IRONMAN, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ironman()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_IRONMAN
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_IRONMAN
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_IRONMAN
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_IRONMAN
        
def get_summary_ironman():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'IRONMAN'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ironman(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_IRONMAN
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_IRONMAN
def end_ironman(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "IRM"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'IRONMAN', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'IRONMAN'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)   
        log_bot(update, 'IRONMAN')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "IRM"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'IRONMAN', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001919380650','{ticket}','{problem_title}','{data_select[8]}','open','IRONMAN','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'IRONMAN'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)   
        log_bot(update, 'IRONMAN')
    return ConversationHandler.END

def m4_pm_kalix(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Can Not Access >>", callback_data=str(M4_PM_KALIX_CREATE_1))],
            [InlineKeyboardButton("Can Not Filter >>", callback_data=str(M4_PM_KALIX_CREATE_2))],
            [InlineKeyboardButton("Unable to Load Data >>", callback_data=str(M4_PM_KALIX_CREATE_3))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_KALIX_CREATE_4))],
            [InlineKeyboardButton("REQUESTS USER KALIX", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *KALIX*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Can Not Access >>", callback_data=str(M4_PM_KALIX_CREATE_1))],
            [InlineKeyboardButton("Can Not Filter >>", callback_data=str(M4_PM_KALIX_CREATE_2))],
            [InlineKeyboardButton("Unable to Load Data >>", callback_data=str(M4_PM_KALIX_CREATE_3))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_KALIX_CREATE_4))],
            [InlineKeyboardButton("REQUESTS USER KALIX", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *KALIX*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_kalix_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    if data_text in 'Can Not Access':
        keyboard = [
            [InlineKeyboardButton("Storage Degrade", callback_data=str(M4_PM_KALIX_CREATE_1A))],
            [InlineKeyboardButton("Fan Porblem", callback_data=str(M4_PM_KALIX_CREATE_1B))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM_KALIX))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Can Not Filter':
        keyboard = [
            [InlineKeyboardButton("Region", callback_data=str(M4_PM_KALIX_CREATE_2A))],
            [InlineKeyboardButton("Inbound Device", callback_data=str(M4_PM_KALIX_CREATE_2B))],
            [InlineKeyboardButton("Outbound Device", callback_data=str(M4_PM_KALIX_CREATE_2C))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM_KALIX))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Unable to Load Data':
        keyboard = [
            [InlineKeyboardButton("Can Not Connect Server", callback_data=str(M4_PM_KALIX_CREATE_3A))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM_KALIX))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Other Problems':
        query.message.reply_text(f"Masukkan detail problem :")
        return END_KALIX

def m4_pm_kalix_create_create(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'KALIX'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'KLX' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'KALIX'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_KALIX))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'KALIX'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di KALIX, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_kalix()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_KALIX
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_KALIX
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_KALIX
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_KALIX
        
def get_summary_kalix():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'KALIX'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_kalix(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_KALIX
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_KALIX
def end_kalix(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "KLX"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'KALIX', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'KALIX'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'KALIX')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "KLX"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'KALIX', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','KALIX','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'KALIX'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'KALIX')
    return ConversationHandler.END

def m4_pm_ookla(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("OOKLA Palembang ", callback_data=str(M4_PM_OOKLA_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_OOKLA_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER OOKLA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *OOKLA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("OOKLA Palembang ", callback_data=str(M4_PM_OOKLA_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_OOKLA_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER OOKLA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *OOKLA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_ookla_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'OOKLA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'OKL' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'OOKLA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_OOKLA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'OOKLA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di OOKLA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ookla()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_ARTHEMIS
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OOKLA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OOKLA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OOKLA
        
def get_summary_ookla():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'OOKLA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ookla(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_OOKLA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_OOKLA
def end_ookla(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "OKL"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'OOKLA', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'OOKLA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'OOKLA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "OKL"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'OOKLA', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','OOKLA','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'OOKLA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'OOKLA')
    return ConversationHandler.END

def m4_pm_smartcare(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Activity Instalasi Smartcare Platform TTC HRM", callback_data=str(M4_PM_SMARTCARE_CREATE_1))],
            [InlineKeyboardButton("Activity Power off PS Platform Smartcare TTC HRM", callback_data=str(M4_PM_SMARTCARE_CREATE_2))],
            [InlineKeyboardButton("Activity Interconnection between new Probes and Platforms", callback_data=str(M4_PM_SMARTCARE_CREATE_3))],
            [InlineKeyboardButton("Activity Power off PS Platform Smartcare TTC HRM", callback_data=str(M4_PM_SMARTCARE_CREATE_4))],
            [InlineKeyboardButton("Activity restart CAU TTC HRM", callback_data=str(M4_PM_SMARTCARE_CREATE_5))],
            [InlineKeyboardButton("Missing Traffic Gx Gy TBS BRN", callback_data=str(M4_PM_SMARTCARE_CREATE_6))],
            [InlineKeyboardButton("Missing Traffic", callback_data=str(M4_PM_SMARTCARE_CREATE_7))],
            [InlineKeyboardButton("Request feeding data new", callback_data=str(M4_PM_SMARTCARE_CREATE_8))],
            [InlineKeyboardButton("Request feeding data old", callback_data=str(M4_PM_SMARTCARE_CREATE_9))],
            [InlineKeyboardButton("Restart the CAU Service Process", callback_data=str(M4_PM_SMARTCARE_CREATE_10))],
            [InlineKeyboardButton("Smartcare platform Hadoop server Expansion", callback_data=str(M4_PM_SMARTCARE_CREATE_11))],
            [InlineKeyboardButton("Smartcare Platform IMC CAU CEP NAIE Server Expansiaon", callback_data=str(M4_PM_SMARTCARE_CREATE_12))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_SMARTCARE_CREATE_13))],
            [InlineKeyboardButton("REQUESTS USER SMARTCARE", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *SMARTCARE*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Activity Instalasi Smartcare Platform TTC HRM", callback_data=str(M4_PM_SMARTCARE_CREATE_1))],
            [InlineKeyboardButton("Activity Power off PS Platform Smartcare TTC HRM", callback_data=str(M4_PM_SMARTCARE_CREATE_2))],
            [InlineKeyboardButton("Activity Interconnection between new Probes and Platforms", callback_data=str(M4_PM_SMARTCARE_CREATE_3))],
            [InlineKeyboardButton("Activity Power off PS Platform Smartcare TTC HRM", callback_data=str(M4_PM_SMARTCARE_CREATE_4))],
            [InlineKeyboardButton("Activity restart CAU TTC HRM", callback_data=str(M4_PM_SMARTCARE_CREATE_5))],
            [InlineKeyboardButton("Missing Traffic Gx Gy TBS BRN", callback_data=str(M4_PM_SMARTCARE_CREATE_6))],
            [InlineKeyboardButton("Missing Traffic", callback_data=str(M4_PM_SMARTCARE_CREATE_7))],
            [InlineKeyboardButton("Request feeding data new", callback_data=str(M4_PM_SMARTCARE_CREATE_8))],
            [InlineKeyboardButton("Request feeding data old", callback_data=str(M4_PM_SMARTCARE_CREATE_9))],
            [InlineKeyboardButton("Restart the CAU Service Process", callback_data=str(M4_PM_SMARTCARE_CREATE_10))],
            [InlineKeyboardButton("Smartcare platform Hadoop server Expansion", callback_data=str(M4_PM_SMARTCARE_CREATE_11))],
            [InlineKeyboardButton("Smartcare Platform IMC CAU CEP NAIE Server Expansiaon", callback_data=str(M4_PM_SMARTCARE_CREATE_12))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_SMARTCARE_CREATE_13))],
            [InlineKeyboardButton("REQUESTS USER SMARTCARE", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *SMARTCARE*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_smartcare_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("Other Problems ➞ {}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'SMARTCARE'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'SCR' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SMARTCARE'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_SMARTCARE))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SMARTCARE'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di SMARTCARE, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_smartcare()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_SMARTCARE
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SMARTCARE
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SMARTCARE
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SMARTCARE
        
def get_summary_smartcare():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'SMARTCARE'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_smartcare(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SMARTCARE
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SMARTCARE
def end_smartcare(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "SCR"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'SMARTCARE', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SMARTCARE'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SMARTCARE')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "SCR"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'SMARTCARE', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','SMARTCARE','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SMARTCARE'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SMARTCARE')
    return ConversationHandler.END

def m4_pm_suropati(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Healthy Check Hypervisor", callback_data=str(M4_PM_SUROPATI_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_SUROPATI_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER SUROPATI", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *SUROPATI*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Healthy Check Hypervisor", callback_data=str(M4_PM_SUROPATI_CREATE_1))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_SUROPATI_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER SUROPATI", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *SUROPATI*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_suropati_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'SUROPATI'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'SPT' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SUROPATI'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_SUROPATI))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SUROPATI'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di SUROPATI, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_suropati()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_SUROPATI
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SUROPATI
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SUROPATI
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SUROPATI
        
def get_summary_suropati():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'SUROPATI'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_suropati(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SUROPATI
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SUROPATI
def end_suropati(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "SPT"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'SUROPATI', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SUROPATI'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SUROPATI')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "SPT"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'SUROPATI', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','SUROPATI','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SUROPATI'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SUROPATI')
    return ConversationHandler.END

def m10_traffica(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("Application >>", callback_data=str(M10_TRAFFICA_CREATE_1))],
                [InlineKeyboardButton("Can Not Access >>", callback_data=str(M10_TRAFFICA_CREATE_2))],
                [InlineKeyboardButton("Query >>", callback_data=str(M10_TRAFFICA_CREATE_3))],
                [InlineKeyboardButton("User >>", callback_data=str(M10_TRAFFICA_CREATE_4))],
                [InlineKeyboardButton("Other Problems", callback_data=str(M10_TRAFFICA_CREATE_5))],
                [InlineKeyboardButton("REQUESTS USER TRAFFICA", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_TRAFFICA))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *TRAFFICA*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
        except:
            keyboard = [
                [InlineKeyboardButton("Application >>", callback_data=str(M10_TRAFFICA_CREATE_1))],
                [InlineKeyboardButton("Can Not Access >>", callback_data=str(M10_TRAFFICA_CREATE_2))],
                [InlineKeyboardButton("Query >>", callback_data=str(M10_TRAFFICA_CREATE_3))],
                [InlineKeyboardButton("User >>", callback_data=str(M10_TRAFFICA_CREATE_4))],
                [InlineKeyboardButton("Other Problems", callback_data=str(M10_TRAFFICA_CREATE_5))],
                [InlineKeyboardButton("REQUESTS USER TRAFFICA", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_TRAFFICA))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *TRAFFICA*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("Application >>", callback_data=str(M10_TRAFFICA_CREATE_1))],
                [InlineKeyboardButton("Can Not Access >>", callback_data=str(M10_TRAFFICA_CREATE_2))],
                [InlineKeyboardButton("Query >>", callback_data=str(M10_TRAFFICA_CREATE_3))],
                [InlineKeyboardButton("User >>", callback_data=str(M10_TRAFFICA_CREATE_4))],
                [InlineKeyboardButton("Other Problems", callback_data=str(M10_TRAFFICA_CREATE_5))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_TRAFFICA))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *TRAFFICA*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
        except:
            keyboard = [
                [InlineKeyboardButton("Application >>", callback_data=str(M10_TRAFFICA_CREATE_1))],
                [InlineKeyboardButton("Can Not Access >>", callback_data=str(M10_TRAFFICA_CREATE_2))],
                [InlineKeyboardButton("Query >>", callback_data=str(M10_TRAFFICA_CREATE_3))],
                [InlineKeyboardButton("User >>", callback_data=str(M10_TRAFFICA_CREATE_4))],
                [InlineKeyboardButton("Other Problems", callback_data=str(M10_TRAFFICA_CREATE_5))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_TRAFFICA))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *TRAFFICA*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m10_traffica_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    print(data)
    data = json.loads(data)
    print(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+eVVKJ6e6Qgk2NzI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    if data_text in 'Application':
        keyboard = [
            [InlineKeyboardButton("Graph Unmonitoring", callback_data=str(M10_TRAFFICA_CREATE_1A))],
            [InlineKeyboardButton("Connection Lost To CUS", callback_data=str(M10_TRAFFICA_CREATE_1B))],
            [InlineKeyboardButton("Back", callback_data=str(M10_TRAFFICA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Can Not Access':
        keyboard = [
            [InlineKeyboardButton("Server Power Off", callback_data=str(M10_TRAFFICA_CREATE_2A))],
            [InlineKeyboardButton("Disk Error", callback_data=str(M10_TRAFFICA_CREATE_2B))],
            [InlineKeyboardButton("Back", callback_data=str(M10_TRAFFICA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Query':
        keyboard = [
            [InlineKeyboardButton("Missing External Storage", callback_data=str(M10_TRAFFICA_CREATE_3A))],
            [InlineKeyboardButton("Workspace Shutdown", callback_data=str(M10_TRAFFICA_CREATE_3B))],
            [InlineKeyboardButton("Traffica Service Watch Stop Running", callback_data=str(M10_TRAFFICA_CREATE_3C))],
            [InlineKeyboardButton("Back", callback_data=str(M10_TRAFFICA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'User':
        keyboard = [
            [InlineKeyboardButton("Can Not Access Client", callback_data=str(M10_TRAFFICA_CREATE_4A))],
            [InlineKeyboardButton("Back", callback_data=str(M10_TRAFFICA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Other Problems':
        query.message.reply_text(f"Masukkan detail problem :")
        return END_TRAFFICA
    
def m10_traffica_create_ticket(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'TRAFFICA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'TFC' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TRAFFICA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_TRAFFICA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TRAFFICA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di TRAFFICA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_traffica()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_TRAFFICA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TRAFFICA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TRAFFICA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TRAFFICA
        
def get_summary_traffica():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'TRAFFICA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_traffica(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TRAFFICA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TRAFFICA
def end_traffica(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "TFC"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1002145240120', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TRAFFICA', status = 'open', fcaps = 'TRAFFICA' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+seFEEq6wNC8xNTU1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk TRAFFICA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TRAFFICA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk TRAFFICA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TRAFFICA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "TFC"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1002145240120', ticket = {ticket},, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'TRAFFICA', status = 'open', fcaps = 'TRAFFICA' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1002145240120','{ticket}','{problem_title}','{data_select[8]}','open','TRAFFICA','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+seFEEq6wNC8xNTU1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk TRAFFICA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TRAFFICA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk TRAFFICA", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TRAFFICA')
    return ConversationHandler.END

def m4_pm_zabbix(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_ZABBIX_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER ZABBIX", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *ZABBIX*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_ZABBIX_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER ZABBIX", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *ZABBIX*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_zabbix_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'ZABBIX'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'ZBX' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ZABBIX'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_ZABBIX))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'ZABBIX'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di ZABBIX, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_zabbix()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_ZABBIX
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ZABBIX
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ZABBIX
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_ZABBIX
        
def get_summary_zabbix():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'ZABBIX'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_zabbix(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_ZABBIX
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_ZABBIX
def end_zabbix(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "ZBX"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'ZABBIX', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'ZABBIX'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)   
        log_bot(update, 'ZABBIX')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "ZBX"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'ZABBIX', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','ZABBIX','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'ZABBIX'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'ZABBIX')
    return ConversationHandler.END

def m4_pm_twamp(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_TWAMP_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TWAMP", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *TWAMP*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M4_PM_TWAMP_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER TWAMP", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *TWAMP*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m4_pm_twamp_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+GbTeJqdGN_w3MGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'TWAMP'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'TWP' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TWAMP'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_TWAMP))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'TWAMP'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di TWAMP, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_twamp()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_TWAMP
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TWAMP
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TWAMP
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_TWAMP
        
def get_summary_twamp():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'TWAMP'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_twamp(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TWAMP
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_TWAMP
def end_twamp(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "TWP"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TWAMP', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TWAMP'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)   
        log_bot(update, 'TWAMP')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "TWP"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001986144957', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'TWAMP', status = 'open', fcaps = 'PERFORMANCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001986144957','{ticket}','{problem_title}','{data_select[8]}','open','TWAMP','{date_time}','None','PERFORMANCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+GbTeJqdGN_w3MGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'TWAMP'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Performance", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'TWAMP')
    return ConversationHandler.END

def m5_sm(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("UAM", callback_data=str(M5_SM_UAM))],
                [InlineKeyboardButton("PAM", callback_data=str(M5_SM_PAM))],
                [InlineKeyboardButton("EXPERT TEAM >>", callback_data=str(M5_SM_EXPERT))],
                # [InlineKeyboardButton("REQUESTS USER", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("CLOSED REQ USER", callback_data=str(M5_SM_CLOSEDREQUSER))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *SECURITY*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*UAM* : -\n*PAM* : -\n*EXPERT TEAM* : Management Expert\n*CLOSED REQ USER* : -",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("UAM", callback_data=str(M5_SM_UAM))],
                [InlineKeyboardButton("PAM", callback_data=str(M5_SM_PAM))],
                [InlineKeyboardButton("EXPERT TEAM >>", callback_data=str(M5_SM_EXPERT))],
                # [InlineKeyboardButton("REQUESTS USER", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("CLOSED REQ USER", callback_data=str(M5_SM_CLOSEDREQUSER))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *SECURITY*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*UAM* : -\n*PAM* : -\n*EXPERT TEAM* : Management Expert",parse_mode=telegram.ParseMode.MARKDOWN)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("UAM", callback_data=str(M5_SM_UAM))],
                [InlineKeyboardButton("PAM", callback_data=str(M5_SM_PAM))],
                # [InlineKeyboardButton("REQUESTS USER", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *SECURITY*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*UAM* : -\n*PAM* : -",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("UAM", callback_data=str(M5_SM_UAM))],
                [InlineKeyboardButton("PAM", callback_data=str(M5_SM_PAM))],
                # [InlineKeyboardButton("REQUESTS USER", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *SECURITY*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*UAM* : -\n*PAM* : -",parse_mode=telegram.ParseMode.MARKDOWN)
def m5_sm_uam(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    query.edit_message_text(text="*On Mantaince*\nklik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END
def m5_sm_pam(update: Update, _: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    query.edit_message_text(text="*On Mantaince*\nklik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END

def m5_sm_req_user(update: Update, _: CallbackContext) -> None:
    try:
        if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/requser_ctgapp.txt"):
            os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/requser_ctgapp.txt")
            os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/requser_usd.txt")
            os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/requser_url.txt")
        else:
            pass
    except FileNotFoundError:
        pass
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace("REQUESTS USER ","")
            log_ = str(data['text'])
    problem = "{}".format(data_text)
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/requser_ctgapp.txt','a')
    data.write(problem)
    data.close()
    try:
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text=f"Anda memilih : *{log_}*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Ketik *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1",parse_mode=telegram.ParseMode.MARKDOWN)
        return M5_SM_REQ_USER_USD
    except:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text=f"Anda memilih : *{log_}*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Ketik *<user>spasi<pwd>* userdomain (LDAP)\nContoh : rosady D4ril4hir#1",parse_mode=telegram.ParseMode.MARKDOWN)
        return M5_SM_REQ_USER_USD


def m5_sm_req_user_usd(update: Update, _: CallbackContext) -> None:
    
    try:
        data_text = update.message.text.split(' ')
        split_user = data_text[0]
        split_pwd = data_text[1]

        url = "http://10.53.193.98/api-ldap-auth/login.php?api_key=WWmbkWSyQgJqeZvVQE8CgXZ33ZWCp8Be"
        payload='username={}&password={}'.format(split_user,split_pwd)
        headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
        }
        response = requests.request("POST", url, headers=headers, data=payload)
        status_ldap = response.json()

        if status_ldap['status'] == 'success':
            problem = "{}".format(split_user)
            data = open('/home/dimas/baru/helpdeskbot_v2/data_log/requser_usd.txt','a')
            data.write(problem)
            data.close()
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text(f"Ketik URL :",parse_mode=telegram.ParseMode.MARKDOWN)
            return M5_SM_REQ_USER_URL
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text(f"Userdomain dan password salah, mohon ketik kembali /menu",parse_mode=telegram.ParseMode.MARKDOWN)
            return ConversationHandler.END
    except IndexError:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text(f"Userdomain dan password salah, mohon ketik kembali /menu",parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
# def m5_sm_req_user_ctgapp(update: Update, _: CallbackContext) -> None:
#     data_text = update.message.text
#     problem = "{}".format(data_text)
#     data = open('/home/dimas/baru/helpdeskbot_v2/data_log/requser_ctgapp.txt','a')
#     data.write(problem)
#     data.close()
#     update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
#     update.message.reply_text(f"Ketik URL :",parse_mode=telegram.ParseMode.MARKDOWN)
#     return M5_SM_REQ_USER_URL
def m5_sm_req_user_url(update: Update, _: CallbackContext) -> None:
    data_text = update.message.text
    problem = "{}".format(data_text)
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/requser_url.txt','a')
    data.write(problem)
    data.close()
    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
    update.message.reply_text(f"Ketik keterangan, contoh requests user dsb :",parse_mode=telegram.ParseMode.MARKDOWN)
    return M5_SM_REQ_USER_DSP
def m5_sm_req_user_dsp(update: Update, _: CallbackContext) -> None:
    chatid_telegram  = update.message.from_user.id
    data_usd = open('/home/dimas/baru/helpdeskbot_v2/data_log/requser_usd.txt','r')
    data_usd = data_usd.read()
    data_ctgapp = open('/home/dimas/baru/helpdeskbot_v2/data_log/requser_ctgapp.txt','r')
    data_ctgapp = data_ctgapp.read()
    data_url = open('/home/dimas/baru/helpdeskbot_v2/data_log/requser_url.txt','r')
    data_url = data_url.read()
    data_ket = update.message.text
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"INSERT INTO production.helpdesk_requser select '{chatid_telegram}','{data_usd}','{data_ctgapp}','{data_url}','{data_ket}','open'"
    data = client.command(query)
    telegram_channel = 'https://t.me/+s6bhzUo52M5iNjFl'
    button1 = InlineKeyboardButton("#Helpdesk Requests User", url=telegram_channel)
    buttons = [[button1]]
    keyboard = InlineKeyboardMarkup(buttons)
    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
    update.message.reply_text(f'✅ Requests Userdomain telah berhasil dibuat dengan URL Link Request',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
    log_bot(update, 'REQ_USER')
    return ConversationHandler.END

def m5_sm_closedrequser(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/chatid_requser.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/chatid_requser.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/chatid_requser.txt','a')
    log_bot.write("{}".format(chat_id))
    log_bot.close()
    bot_log.delete_message(chat_id,message_id)
    query.edit_message_text(text="Anda memilih : *CLOSED REQ USER*",parse_mode=telegram.ParseMode.MARKDOWN)
    try:
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select position from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        collection = client.command(query)
        position = collection == 'user'
        if position is False: ##ADMIN
            query = f"select * from production.helpdesk_requser where status = 'open'"
            data = client.command(query)
            data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
            for data in data_list:
                data = str(data).split(', ')
        elif position is True: ##USER
            query = f"select * from production.helpdesk_requser where status = 'open' and chatid_telegram = '{chat_id}'"
            data = client.command(query)
            data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
            for data in data_list:
                data = str(data).split(', ')
        query = update.callback_query
        query.answer()
        return_text = get_m5_sm_closedrequser_usd()
        for cmdOUT in splitting(return_text):
            query = update.callback_query
            query.answer()
            query.message.reply_text(cmdOUT, parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
        return M5_SM_CLOSEDREQUSER_USD
    except:
        query = update.callback_query
        query.answer()
        query.message.reply_text('Maaf Requests user tidak ditemukan', parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
        return ConversationHandler.END
    
def get_m5_sm_closedrequser_usd():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    chatid_requser = open('/home/dimas/baru/helpdeskbot_v2/data_log/chatid_requser.txt','r')
    chatid_requser = chatid_requser.read()
    query = f"select position from production.helpdesk_bot where chatid_telegram = '{chatid_requser}'"
    collection = client.command(query)
    position = collection == 'user'
    if position is False: ##ADMIN
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_requser where status = 'open'"
        data = client.command(query)
        text = ''
        text += 'REQUESTS USER :'
        text += '\n'
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            usd = data[1]
            cat = data[2]
            url = data[3]
            text += f'├ Request userdomain : *{usd}* ({cat}) - {url}'
            text += '\n'
        text += '\n'
        text += 'Ketik userdomain jika sudah closed. Klik /cancel untuk membatalkan'
    elif position is True: ##USER
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_requser where status = 'open' and chatid_telegram = '{chatid_requser}'"
        data = client.command(query)
        text = ''
        text += 'REQUESTS USER :'
        text += '\n'
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            usd = data[1]
            cat = data[2]
            url = data[3]
            text += f'├ Request userdomain : *{usd}* ({cat}) - {url}'
            text += '\n'
        text += '\n'
        text += 'Ketik userdomain jika sudah closed. Klik /cancel untuk membatalkan'
    return text




def m5_sm_closedrequser_usd(update: Update, _: CallbackContext) -> None:
    userdomain = update.message.text
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_requser where userdomain = '{userdomain}'"
    check_status = client.command(query)
    check_status = check_status == 0
    if check_status is True:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text(f'Requests Userdomain yang anda masukan salah\nKlik /menu',parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        query = f"ALTER TABLE production.helpdesk_requser update status = 'closed' where userdomain = '{userdomain}'"
        client.command(query)
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text(f'✅ Requests Userdomain telah berhasil dan dapat mengakses Dashboard sesuai URL Link Request\nKlik /menu',parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END


def m5_sm_expert(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("REGISTRASI >>", callback_data=str(REG_EXPERT))],
            [InlineKeyboardButton("HAPUS >>", callback_data=str(DEL_EXPERT))],
            [InlineKeyboardButton("Back", callback_data=str(M5_SM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *EXPERT TEAM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("REGISTRASI", callback_data=str(REG_EXPERT))],
            [InlineKeyboardButton("HAPUS", callback_data=str(DEL_EXPERT))],
            [InlineKeyboardButton("Back", callback_data=str(M5_SM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *EXPERT TEAM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def reg_expert(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("FAULT >>", callback_data=str(REG_FM))],
        [InlineKeyboardButton("CONFIGURATION >>", callback_data=str(REG_C))],
        [InlineKeyboardButton("ADMINISTRATION >>", callback_data=str(REG_A))],
        [InlineKeyboardButton("PERFORMANCE >>", callback_data=str(REG_PM))],
        [InlineKeyboardButton("DATA SOURCE >>", callback_data=str(REG_DS))],
        [InlineKeyboardButton("TICKETING SYSTEM >>", callback_data=str(REG_TS))],
        [InlineKeyboardButton("DASHBOARD AVP >>", callback_data=str(REG_DAVP))],
        [InlineKeyboardButton("Back", callback_data=str(M5_SM_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *REGISTRASI*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def reg_fm(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("DAVINA", callback_data=str(REG_FM_DAVINA))],
        [InlineKeyboardButton("GRAFANA", callback_data=str(REG_FM_GRAFANA))],
        [InlineKeyboardButton("INAP", callback_data=str(REG_FM_INAP))],
        [InlineKeyboardButton("INEOM/NICE", callback_data=str(REG_FM_INEOM))],
        [InlineKeyboardButton("NACEL", callback_data=str(REG_FM_NACEL))],
        [InlineKeyboardButton("NADIN", callback_data=str(REG_FM_NADIN))],
        [InlineKeyboardButton("SYANTIC", callback_data=str(REG_FM_SYANTIC))],
        [InlineKeyboardButton("TABLUE", callback_data=str(REG_FM_TABLUE))],
        [InlineKeyboardButton("OSSERA", callback_data=str(REG_FM_OSSERA))],
        [InlineKeyboardButton("Back", callback_data=str(REG_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FAULT*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def reg_fm_davina(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *DAVINA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_FM_DAVINA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_FM_DAVINA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_FM_DAVINA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_fm_davina(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'DAVINA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_fm_grafana(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *GRAFANA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_FM_GRAFANA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_FM_GRAFANA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_FM_GRAFANA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_fm_grafana(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'GRAFANA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_fm_inap(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *INAP*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_FM_INAP
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_FM_INAP
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_FM_INAP
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_fm_inap(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'INAP', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                    update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                    update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_fm_ineom(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *INEOM*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_FM_INEOM
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_FM_INEOM
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_FM_INEOM
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_fm_ineom(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'INEOM', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    return ConversationHandler.END
def reg_fm_nacel(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NACEL*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_FM_NACEL
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_FM_NACEL
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_FM_NACEL
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_fm_nacel(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NACEL', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_fm_nadin(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NADIN*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_FM_NADIN
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_FM_NADIN
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_FM_NADIN
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_fm_nadin(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NADIN', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_fm_syantic(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SYANTIC*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_FM_SYANTIC
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_FM_SYANTIC
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_FM_SYANTIC
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_fm_syantic(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SYANTIC', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_fm_tablue(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TABLUE*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_FM_TABLUE
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_FM_TABLUE
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_FM_TABLUE
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_fm_tablue(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TABLUE', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_fm_ossera(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *OSSERA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_FM_OSSERA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_FM_OSSERA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_FM_OSSERA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_fm_ossera(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'OSSERA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END

def reg_c(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("CHRONO", callback_data=str(REG_C_CHRONO))],
        [InlineKeyboardButton("CRQ", callback_data=str(REG_C_CRQ))],
        [InlineKeyboardButton("LACIMA", callback_data=str(REG_C_LACIMA))],
        [InlineKeyboardButton("NAVA", callback_data=str(REG_C_NAVA))],
        [InlineKeyboardButton("TRAVERSA", callback_data=str(REG_C_TRAVERSA))],
        [InlineKeyboardButton("Back", callback_data=str(REG_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *CONFIGURATION*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def reg_c_chrono(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *CHRONO*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_C_CHRONO
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_C_CHRONO
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_C_CHRONO
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_c_chrono(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'CHRONO', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_c_crq(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *CRQ*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_C_CRQ
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_C_CRQ
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_C_CRQ
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_c_crq(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'CRQ', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_c_lacima(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *LACIMA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_C_LACIMA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_C_LACIMA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_C_LACIMA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_c_lacima(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'LACIMA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_c_nava(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NAVA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_C_NAVA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_C_NAVA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_C_NAVA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_c_nava(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NAVA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_c_traversa(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TRAVERSA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_C_TRAVERSA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_C_TRAVERSA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_C_TRAVERSA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_c_traversa(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TRAVERSA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END

def reg_a(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("AGATA", callback_data=str(REG_A_AGATA))],
        [InlineKeyboardButton("AMESTY", callback_data=str(REG_A_AMESTY))],
        [InlineKeyboardButton("DAVINCI", callback_data=str(REG_A_DAVINCI))],
        [InlineKeyboardButton("EATP", callback_data=str(REG_A_EATP))],
        [InlineKeyboardButton("ETSA", callback_data=str(REG_A_ETSA))],
        [InlineKeyboardButton("EWONDER", callback_data=str(REG_A_EWONDER))],
        [InlineKeyboardButton("FELISA", callback_data=str(REG_A_FELISA))],
        [InlineKeyboardButton("FIOLA", callback_data=str(REG_A_FIOLA))],
        [InlineKeyboardButton("LOLITA", callback_data=str(REG_A_LOLITA))],
        [InlineKeyboardButton("SCARLETT", callback_data=str(REG_A_SCARLET))],
        [InlineKeyboardButton("SMARTKEY", callback_data=str(REG_A_SMARTKEY))],
        [InlineKeyboardButton("TIARA", callback_data=str(REG_A_TIARA))],
        [InlineKeyboardButton("TPAS", callback_data=str(REG_A_TPAS))],
        [InlineKeyboardButton("TPOWER", callback_data=str(REG_A_TPOWER))],
        [InlineKeyboardButton("Back", callback_data=str(REG_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *ADMINISTRATION*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def reg_a_agata(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *AGATA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_AGATA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_AGATA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_AGATA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_agata(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'AGATA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_amesty(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *AMESTY*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_AMESTY
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_AMESTY
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_AMESTY
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_amesty(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'AMESTY', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_davinci(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINCI'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *DAVINCI*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_DAVINCI
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_DAVINCI
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_DAVINCI
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_davinci(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINCI'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'DAVINCI', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_eatp(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *EATP*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_EATP
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_EATP
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_EATP
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_eatp(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'EATP', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_etsa(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *ETSA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_ETSA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_ETSA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_ETSA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_etsa(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'ETSA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_ewonder(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *EWONDER*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_EWONDER
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_EWONDER
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_EWONDER
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_ewonder(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'EWONDER', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_felisa(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *FELISA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_FELISA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_FELISA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_FELISA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_felisa(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'FELISA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_fiola(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *FIOLA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_FIOLA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_FIOLA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_FIOLA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_fiola(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'FIOLA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_lolita(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *LOLITA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_LOLITA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_LOLITA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_LOLITA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_lolita(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'LOLITA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_scarlet(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SCARLETT*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_SCARLET
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_SCARLET
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_SCARLET
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_scarlet(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SCARLETT', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_smartkey(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTKEY'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SMARTKEY*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_SMARTKEY
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_SMARTKEY
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_SMARTKEY
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_smartkey(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTKEY'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SMARTKEY', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_tiara(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TIARA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_TIARA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_TIARA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_TIARA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_tiara(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TIARA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_tpas(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TPAS*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_TPAS
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_TPAS
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_TPAS
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_tpas(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TPAS', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_a_tpower(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TPOWER*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_A_TPOWER
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_A_TPOWER
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_A_TPOWER
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_a_tpower(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TPOWER', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END

def reg_pm(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("ARTHEMIS", callback_data=str(REG_PM_ARTHEMIS))],
        [InlineKeyboardButton("COVMO", callback_data=str(REG_PM_COVMO))],
        [InlineKeyboardButton("CSON", callback_data=str(REG_PM_CSONE))],
        [InlineKeyboardButton("EVITA", callback_data=str(REG_PM_EVITA))],
        [InlineKeyboardButton("IPDM", callback_data=str(REG_PM_IPDM))],
        [InlineKeyboardButton("KALIX", callback_data=str(REG_PM_KALIX))],
        [InlineKeyboardButton("OOKLA", callback_data=str(REG_PM_OOKLA))],
        [InlineKeyboardButton("IRONMAN", callback_data=str(REG_PM_IRONMAN))],
        [InlineKeyboardButton("SMARTCARE", callback_data=str(REG_PM_SMARTCARE))],
        [InlineKeyboardButton("SUROPATI", callback_data=str(REG_PM_SUROPATI))],
        [InlineKeyboardButton("TRAFFICA", callback_data=str(REG_PM_TRAFFICA))],
        [InlineKeyboardButton("TWAMP", callback_data=str(REG_PM_TWAMP))],
        [InlineKeyboardButton("ZABBIX", callback_data=str(REG_PM_ZABBIX))],
        [InlineKeyboardButton("Back", callback_data=str(REG_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *PERFORMANCE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def reg_pm_arthemis(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *ARTHEMIS*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_ARTHEMIS
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_ARTHEMIS
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_ARTHEMIS
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_arthemis(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'ARTHEMIS', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_covmo(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *COVMO*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_COVMO
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_COVMO
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_COVMO
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_covmo(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'COVMO', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_csone(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *CSON*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_CSONE
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_CSONE
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_CSONE
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_csone(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'CSON', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'CSON', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CSON', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'CSON', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CSON', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CSON', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'COSNE', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'COSNE', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'COSNE', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'CSON', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_evita(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *EVITA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_EVITA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_EVITA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_EVITA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_evita(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'EVITA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_ipdm(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *IPDM*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_IPDM
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_IPDM
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_IPDM
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_ipdm(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'IPDM', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_ironman(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *IRONMAN*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_IRONMAN
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_IRONMAN
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_IRONMAN
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_ironman(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'IRONMAN', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_kalix(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *KALIX*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_KALIX
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_KALIX
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_KALIX
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_kalix(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'KALIX', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_ookla(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *OOKLA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_OOKLA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_OOKLA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_OOKLA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_ookla(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'OOKLA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_smartcare(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SMARTCARE*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_SMARTCARE
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_SMARTCARE
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_SMARTCARE
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_smartcare(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SMARTCARE', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_suropati(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SUROPATI*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_SUROPATI
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_SUROPATI
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_SUROPATI
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_suropati(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SUROPATI', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_traffica(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TRAFFICA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_TRAFFICA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_TRAFFICA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_TRAFFICA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_traffica(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TRAFFICA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_twamp(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TWAMP*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_TWAMP
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_TWAMP
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_TWAMP
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_twamp(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'TWAMP', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_pm_zabbix(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *ZABBIX*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_PM_ZABBIX
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_PM_ZABBIX
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_PM_ZABBIX
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_pm_zabbix(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'ZABBIX', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END

def reg_ds(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("KAFKA", callback_data=str(REG_DS_KAFKA))],
        [InlineKeyboardButton("NDL", callback_data=str(REG_DS_NDL))],
        [InlineKeyboardButton("NDM", callback_data=str(REG_DS_NDM))],
        [InlineKeyboardButton("OSS", callback_data=str(REG_DS_OSS))],
        [InlineKeyboardButton("IXIA", callback_data=str(REG_DS_IXIA))],
        [InlineKeyboardButton("Back", callback_data=str(REG_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *DATA SOURCE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def reg_ds_kafka(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *KAFKA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_DS_KAFKA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_DS_KAFKA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_DS_KAFKA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_ds_kafka(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'KAFKA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_ds_ndl(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NDL*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_DS_NDL
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_DS_NDL
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_DS_NDL
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_ds_ndl(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NDL', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_ds_ndm(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NDM*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_DS_NDM
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_DS_NDM
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_DS_NDM
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_ds_ndm(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'NDM', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_ds_oss(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *OSS*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_DS_OSS
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_DS_OSS
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_DS_OSS
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_ds_oss(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'OSS', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_ds_ixia(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *IXIA*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_DS_IXIA
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_DS_IXIA
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_DS_IXIA
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_ds_ixia(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'IXIA', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END

def reg_ts(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("CTS", callback_data=str(REG_TS_CTS))],
        [InlineKeyboardButton("REMEDY", callback_data=str(REG_TS_REMEDY))],
        [InlineKeyboardButton("SDM", callback_data=str(REG_TS_SDM))],
        [InlineKeyboardButton("Back", callback_data=str(REG_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TICKETING SYSTEM*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def reg_ts_cts(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *CTS*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_TS_CTS
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_TS_CTS
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_TS_CTS
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_ts_cts(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'CTS', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_ts_remedy(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *REMEDY*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_TS_REMEDY
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_TS_REMEDY
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_TS_REMEDY
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_ts_remedy(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'REMEDY', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END
def reg_ts_sdm(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SDM*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_TS_SDM
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_TS_SDM
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_TS_SDM
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_ts_sdm(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'SDM', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END

def reg_davp(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("DASHBOARD AVP", callback_data=str(REG_DAVP_AVP))],
        [InlineKeyboardButton("Back", callback_data=str(REG_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *DASHBOARD AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def reg_davp_avp(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP'"
    count_data = client.command(query)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 3\nKlik /cancel untuk membatalkan")
        return END_REG_DAVP_AVP
    elif count_data == 8:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 2\nKlik /cancel untuk membatalkan")
        return END_REG_DAVP_AVP
    elif count_data == 9:
        query.message.reply_text("Ketik username ID telegram tanpa @ dan gunakan spasi setiap user jika lebih dari satu. Maksimal 1\nKlik /cancel untuk membatalkan")
        return END_REG_DAVP_AVP
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        query.message.reply_text("Registrasi Expert telah mencapai maksimum\nKlik /menu")
        return ConversationHandler.END
def end_reg_davp_avp(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP'"
    count_data = client.command(query)
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_data == 0 or count_data == 1 or count_data == 2 or count_data == 3 or count_data == 4 or count_data == 5 or count_data == 6 or count_data == 7:
        if count_user == 1:
            query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 2:
            query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        elif count_user == 3:
            query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[0]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[1]}'"
            client.command(query)
            query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
        else:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 3\nKlik /menu")
    elif count_data == 8:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            elif count_user == 2:
                query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[0]}'"
                client.command(query)
                query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[1]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 2\nKlik /menu")
    elif count_data == 9:
        try:
            if count_user == 1:
                query = f"INSERT INTO production.helpdesk_expert select 'AVP', '{parameter_user[0]}'"
                client.command(query)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("✅ Berhasil Registrasi\nKlik /menu")
            else:
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
        except:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Registrasi gagal, ketik username ID Telegram Maximal 1\nKlik /menu")
    elif count_data == 10 or count_data == 11 or count_data == 12 or count_data == 13:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Registrasi gagal, Username ID telah mencapai maksimum 10\nKlik /menu")
    return ConversationHandler.END

def del_expert(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("FAULT >>", callback_data=str(DEL_FM))],
        [InlineKeyboardButton("CONFIGURATION >>", callback_data=str(DEL_C))],
        [InlineKeyboardButton("ADMINISTRATION >>", callback_data=str(DEL_A))],
        [InlineKeyboardButton("PERFORMANCE >>", callback_data=str(DEL_PM))],
        [InlineKeyboardButton("DATA SOURCE >>", callback_data=str(DEL_DS))],
        [InlineKeyboardButton("TICKETING SYSTEM >>", callback_data=str(DEL_TS))],
        [InlineKeyboardButton("DASHBOARD AVP >>", callback_data=str(DEL_DAVP))],
        [InlineKeyboardButton("Back", callback_data=str(M5_SM_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *HAPUS*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def del_fm(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("DAVINA", callback_data=str(DEL_FM_DAVINA))],
        [InlineKeyboardButton("GRAFANA", callback_data=str(DEL_FM_GRAFANA))],
        [InlineKeyboardButton("INAP", callback_data=str(DEL_FM_INAP))],
        [InlineKeyboardButton("INEOM/NICE", callback_data=str(DEL_FM_INEOM))],
        [InlineKeyboardButton("NACEL", callback_data=str(DEL_FM_NACEL))],
        [InlineKeyboardButton("NADIN", callback_data=str(DEL_FM_NADIN))],
        [InlineKeyboardButton("SYANTIC", callback_data=str(DEL_FM_SYANTIC))],
        [InlineKeyboardButton("TABLUE", callback_data=str(DEL_FM_TABLUE))],
        [InlineKeyboardButton("OSSERA", callback_data=str(DEL_FM_OSSERA))],
        [InlineKeyboardButton("Back", callback_data=str(DEL_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *FAULT*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def del_fm_davina(update: Update, _: CallbackContext) -> None:
    return_text = get_del_fm_davina()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *DAVINA*",parse_mode=telegram.ParseMode.MARKDOWN)

    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_FM_DAVINA
def get_del_fm_davina():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'DAVINA'"
    data = client.command(query)
    # data_list = str(data)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_fm_davina(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAVINA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAVINA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAVINA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAVINA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAVINA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAVINA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_fm_grafana(update: Update, _: CallbackContext) -> None:
    return_text = get_del_fm_grafana()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *GRAFANA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_FM_GRAFANA
def get_del_fm_grafana():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'GRAFANA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_fm_grafana(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'GRAFANA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'GRAFANA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'GRAFANA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'GRAFANA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'GRAFANA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'GRAFANA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'GRAFANA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_fm_inap(update: Update, _: CallbackContext) -> None:
    return_text = get_del_fm_inap()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *INAP*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_FM_INAP
def get_del_fm_inap():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'INAP'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_fm_inap(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INAP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INAP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INAP' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INAP' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INAP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INAP' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INAP' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_fm_ineom(update: Update, _: CallbackContext) -> None:
    return_text = get_del_fm_ineom()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *INEOM*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_FM_INEOM
def get_del_fm_ineom():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'INEOM'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_fm_ineom(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INEOM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INEOM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INEOM' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'INEOM' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INEOM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INEOM' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'INEOM' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_fm_nacel(update: Update, _: CallbackContext) -> None:
    return_text = get_del_fm_nacel()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NACEL*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_FM_NACEL
def get_del_fm_nacel():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'NACEL'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_fm_nacel(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NACEL' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NACEL' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NACEL' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NACEL' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NACEL' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NACEL' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NACEL' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_fm_nadin(update: Update, _: CallbackContext) -> None:
    return_text = get_del_fm_nadin()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NADIN*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_FM_NADIN
def get_del_fm_nadin():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'NADIN'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_fm_nadin(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NADIN' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NADIN' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NADIN' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NADIN' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NADIN' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NADIN' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NADIN' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_fm_syantic(update: Update, _: CallbackContext) -> None:
    return_text = get_del_fm_syantic()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SYANTIC*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_FM_SYANTIC
def get_del_fm_syantic():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'SYANTIC'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_fm_syantic(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SYANTIC' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SYANTIC' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SYANTIC' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SYANTIC' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SYANTIC' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SYANTIC' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SYANTIC' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_fm_tablue(update: Update, _: CallbackContext) -> None:
    return_text = get_del_fm_tablue()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TABLUE*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_FM_TABLUE
def get_del_fm_tablue():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'TABLUE'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_fm_tablue(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TABLUE' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TABLUE' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TABLUE' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TABLUE' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TABLUE' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TABLUE' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TABLUE' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_fm_ossera(update: Update, _: CallbackContext) -> None:
    return_text = get_del_fm_ossera()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *OSSERA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_FM_OSSERA
def get_del_fm_ossera():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'OSSERA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_fm_ossera(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSSERA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSSERA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSSERA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSSERA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSSERA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSSERA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSSERA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_c(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("CHRONO", callback_data=str(DEL_C_CHRONO))],
        [InlineKeyboardButton("CRQ", callback_data=str(DEL_C_CRQ))],
        [InlineKeyboardButton("LACIMA", callback_data=str(DEL_C_LACIMA))],
        [InlineKeyboardButton("NAVA", callback_data=str(DEL_C_NAVA))],
        [InlineKeyboardButton("TRAVERSA", callback_data=str(DEL_C_TRAVERSA))],
        [InlineKeyboardButton("Back", callback_data=str(DEL_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *CONFIGURATION*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def del_c_chrono(update: Update, _: CallbackContext) -> None:
    return_text = get_del_c_chrono()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *CHRONO*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_C_CHRONO
def get_del_c_chrono():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'CHRONO'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_c_chrono(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CHRONO' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CHRONO' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CHRONO' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CHRONO' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CHRONO' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CHRONO' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CHRONO' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_c_crq(update: Update, _: CallbackContext) -> None:
    return_text = get_del_c_crq()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *CRQ*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_C_CRQ
def get_del_c_crq():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'CRQ'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_c_crq(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CRQ' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CRQ' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CRQ' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CRQ' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CRQ' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CRQ' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CRQ' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_c_lacima(update: Update, _: CallbackContext) -> None:
    return_text = get_del_c_lacima()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *LACIMA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_C_LACIMA
def get_del_c_lacima():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'LACIMA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_c_lacima(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LACIMA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LACIMA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LACIMA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LACIMA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LACIMA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LACIMA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LACIMA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_c_nava(update: Update, _: CallbackContext) -> None:
    return_text = get_del_c_nava()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NAVA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_C_NAVA
def get_del_c_nava():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'NAVA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_c_nava(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NAVA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NAVA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NAVA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NAVA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NAVA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NAVA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NAVA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_c_traversa(update: Update, _: CallbackContext) -> None:
    return_text = get_del_c_traversa()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TRAVERSA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_C_TRAVERSA
def get_del_c_traversa():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'TRAVERSA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_c_traversa(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAVERSA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAVERSA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAVERSA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAVERSA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAVERSA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAVERSA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAVERSA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END

def del_a(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("AGATA", callback_data=str(DEL_A_AGATA))],
        [InlineKeyboardButton("AMESTY", callback_data=str(DEL_A_AMESTY))],
        [InlineKeyboardButton("DAVINCI", callback_data=str(DEL_A_DAVINCI))],
        [InlineKeyboardButton("EATP", callback_data=str(DEL_A_EATP))],
        [InlineKeyboardButton("ETSA", callback_data=str(DEL_A_ETSA))],
        [InlineKeyboardButton("EWONDER", callback_data=str(DEL_A_EWONDER))],
        [InlineKeyboardButton("FELISA", callback_data=str(DEL_A_FELISA))],
        [InlineKeyboardButton("FIOLA", callback_data=str(DEL_A_FIOLA))],
        [InlineKeyboardButton("LOLITA", callback_data=str(DEL_A_LOLITA))],
        [InlineKeyboardButton("SCARLETT", callback_data=str(DEL_A_SCARLET))],
        [InlineKeyboardButton("SMARTKEY", callback_data=str(DEL_A_SMARTKEY))],
        [InlineKeyboardButton("TIARA", callback_data=str(DEL_A_TIARA))],
        [InlineKeyboardButton("TPAS", callback_data=str(DEL_A_TPAS))],
        [InlineKeyboardButton("TPOWER", callback_data=str(DEL_A_TPOWER))],
        [InlineKeyboardButton("Back", callback_data=str(DEL_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *ADMINISTRATION*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup) 
def del_a_agata(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_agata()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *AGATA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_AGATA
def get_del_a_agata():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'AGATA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_agata(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AGATA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AGATA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AGATA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AGATA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AGATA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AGATA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AGATA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_amesty(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_amesty()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *AMESTY*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_AMESTY
def get_del_a_amesty():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'AMESTY'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_amesty(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AMESTY' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AMESTY' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AMESTY' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AMESTY' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AMESTY' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AMESTY' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AMESTY' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_davinci(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_davinci()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *DAVINCI*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAVINCI'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_DAVINCI
def get_del_a_davinci():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'DAVINCI'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_davinci(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAINCI' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAINCI' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAINCI' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAINCI' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAINCI' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAINCI' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAINCI' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAINCI' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'DAINCI' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAINCI' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAINCI' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'DAINCI' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_eatp(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_eatp()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *EATP*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_EATP
def get_del_a_eatp():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'EATP'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_eatp(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EATP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EATP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EATP' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EATP' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EATP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EATP' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EATP' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_etsa(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_etsa()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *ETSA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_ETSA
def get_del_a_etsa():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'ETSA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_etsa(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ETSA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ETSA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ETSA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ETSA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ETSA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ETSA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ETSA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_ewonder(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_ewonder()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *EWONDER*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_EWONDER
def get_del_a_ewonder():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'EWONDER'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_ewonder(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EWONDER' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EWONDER' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EWONDER' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EWONDER' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EWONDER' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EWONDER' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EWONDER' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_felisa(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_felisa()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *FELISA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_FELISA
def get_del_a_felisa():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'FELISA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_felisa(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FELISA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FELISA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FELISA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FELISA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FELISA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FELISA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FELISA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_fiola(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_fiola()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *FIOLA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_FIOLA
def get_del_a_fiola():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'FIOLA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_fiola(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FIOLA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FIOLA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FIOLA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'FIOLA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FIOLA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FIOLA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'FIOLA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_lolita(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_lolita()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *LOLITA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_LOLITA
def get_del_a_lolita():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'LOLITA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_lolita(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LOLITA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LOLITA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LOLITA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'LOLITA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LOLITA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LOLITA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'LOLITA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_scarlet(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_scarlet()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SCARLETT*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_SCARLET
def get_del_a_scarlet():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'SCARLETT'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_scarlet(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_smartkey(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_smartkey()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SCARLETT*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_SMARTKEY
def get_del_a_smartkey():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'SCARLETT'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_smartkey(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SCARLETT' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SCARLETT' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_tiara(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_tiara()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TIARA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_TIARA
def get_del_a_tiara():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'TIARA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_tiara(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TIARA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TIARA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TIARA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TIARA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TIARA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TIARA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TIARA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_tpas(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_tpas()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TPAS*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_TPAS
def get_del_a_tpas():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'TPAS'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_tpas(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPAS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPAS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPAS' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPAS' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPAS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPAS' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPAS' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_a_tpower(update: Update, _: CallbackContext) -> None:
    return_text = get_del_a_tpower()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TPOWER*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_A_TPOWER
def get_del_a_tpower():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'TPOWER'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_a_tpower(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPOWER' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPOWER' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPOWER' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TPOWER' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPOWER' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPOWER' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TPOWER' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("ARTHEMIS", callback_data=str(DEL_PM_ARTHEMIS))],
        [InlineKeyboardButton("COVMO", callback_data=str(DEL_PM_COVMO))],
        [InlineKeyboardButton("CSON", callback_data=str(DEL_PM_CSONE))],
        [InlineKeyboardButton("EVITA", callback_data=str(DEL_PM_EVITA))],
        [InlineKeyboardButton("IPDM", callback_data=str(DEL_PM_IPDM))],
        [InlineKeyboardButton("IRONMAN", callback_data=str(DEL_PM_IRONMAN))],
        [InlineKeyboardButton("KALIX", callback_data=str(DEL_PM_KALIX))],
        [InlineKeyboardButton("OOKLA", callback_data=str(DEL_PM_OOKLA))],
        [InlineKeyboardButton("SMARTCARE", callback_data=str(DEL_PM_SMARTCARE))],
        [InlineKeyboardButton("SUROPATI", callback_data=str(DEL_PM_SUROPATI))],
        [InlineKeyboardButton("TRAFFICA", callback_data=str(DEL_PM_TRAFFICA))],
        [InlineKeyboardButton("TWAMP", callback_data=str(DEL_PM_TWAMP))],
        [InlineKeyboardButton("ZABBIX", callback_data=str(DEL_PM_ZABBIX))],
        [InlineKeyboardButton("Back", callback_data=str(DEL_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *PERFORMANCE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup) 
def del_pm_arthemis(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_arthemis()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *ARTHEMIS*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_ARTHEMIS
def get_del_pm_arthemis():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'ARTHEMIS'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_arthemis(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ARTHEMIS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ARTHEMIS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ARTHEMIS' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ARTHEMIS' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ARTHEMIS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ARTHEMIS' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ARTHEMIS' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_covmo(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_covmo()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *COVMO*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_COVMO
def get_del_pm_covmo():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'COVMO'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_covmo(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'COVMO' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'COVMO' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'COVMO' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'COVMO' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'COVMO' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'COVMO' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'COVMO' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_csone(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_csone()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *CSON*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_CSONE
def get_del_pm_csone():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'CSON'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_csone(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CSON' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CSON' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CSON' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CSON' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CSON' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CSON' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CSON' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_evita(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_evita()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *EVITA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_EVITA
def get_del_pm_evita():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'EVITA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_evita(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EVITA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EVITA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EVITA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'EVITA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EVITA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EVITA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'EVITA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_ipdm(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_ipdm()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *IPDM*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_IPDM
def get_del_pm_ipdm():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'IPDM'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_ipdm(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IPDM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IPDM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IPDM' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IPDM' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IPDM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IPDM' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IPDM' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_kalix(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_kalix()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *KALIX*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_KALIX
def get_del_pm_kalix():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'KALIX'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_kalix(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KALIX' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KALIX' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KALIX' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KALIX' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KALIX' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KALIX' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KALIX' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_ookla(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_ookla()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *OOKLA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_OOKLA
def get_del_pm_ookla():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'OOKLA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_ookla(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OOKLA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OOKLA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OOKLA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OOKLA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OOKLA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OOKLA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OOKLA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_ironman(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_ironman()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *IRONMAN*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_IRONMAN
def get_del_pm_ironman():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'IRONMAN'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_ironman(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IRONMAN' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IRONMAN' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IRONMAN' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IRONMAN' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IRONMAN' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IRONMAN' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IRONMAN' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_smartcare(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_smartcare()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SMARTCARE*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_SMARTCARE
def get_del_pm_smartcare():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'SMARTCARE'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_smartcare(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SMARTCARE' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SMARTCARE' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SMARTCARE' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SMARTCARE' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SMARTCARE' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SMARTCARE' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SMARTCARE' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_suropati(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_suropati()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SUROPATI*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_SUROPATI
def get_del_pm_suropati():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'SUROPATI'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_suropati(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SUROPATI' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SUROPATI' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SUROPATI' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SUROPATI' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SUROPATI' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SUROPATI' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SUROPATI' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_traffica(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_traffica()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TRAFFICA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_TRAFFICA
def get_del_pm_traffica():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'TRAFFICA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_traffica(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAFFICA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAFFICA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAFFICA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TRAFFICA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAFFICA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAFFICA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TRAFFICA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_twamp(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_twamp()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *TWAMP*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_TWAMP
def get_del_pm_twamp():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'TWAMP'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_twamp(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TWAMP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TWAMP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TWAMP' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'TWAMP' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TWAMP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TWAMP' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'TWAMP' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_pm_zabbix(update: Update, _: CallbackContext) -> None:
    return_text = get_del_pm_zabbix()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *ZABBIX*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_PM_ZABBIX
def get_del_pm_zabbix():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'ZABBIX'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_pm_zabbix(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ZABBIX' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ZABBIX' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ZABBIX' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'ZABBIX' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ZABBIX' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ZABBIX' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'ZABBIX' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_ds(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("KAFKA", callback_data=str(DEL_DS_KAFKA))],
        [InlineKeyboardButton("NDL", callback_data=str(DEL_DS_NDL))],
        [InlineKeyboardButton("NDM", callback_data=str(DEL_DS_NDM))],
        [InlineKeyboardButton("OSS", callback_data=str(DEL_DS_OSS))],
        [InlineKeyboardButton("IXIA", callback_data=str(DEL_DS_IXIA))],
        [InlineKeyboardButton("Back", callback_data=str(DEL_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *DATA SOURCE*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup) 
def del_ds_kafka(update: Update, _: CallbackContext) -> None:
    return_text = get_del_ds_kafka()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *KAFKA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_DS_KAFKA
def get_del_ds_kafka():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'KAFKA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_ds_kafka(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KAFKA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KAFKA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KAFKA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KAFKA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KAFKA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'KAFKA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_ds_ndl(update: Update, _: CallbackContext) -> None:
    return_text = get_del_ds_ndl()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NDL*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_DS_NDL
def get_del_ds_ndl():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'NDL'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_ds_ndl(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDL' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDL' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDL' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDL' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDL' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDL' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_ds_ndm(update: Update, _: CallbackContext) -> None:
    return_text = get_del_ds_ndm()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *NDM*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_DS_NDM
def get_del_ds_ndm():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'NDM'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_ds_ndm(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDM' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDM' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'NDM' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_ds_oss(update: Update, _: CallbackContext) -> None:
    return_text = get_del_ds_oss()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *OSS*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_DS_OSS
def get_del_ds_oss():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'OSS'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_ds_oss(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSS' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSS' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'OSS' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_ds_ixia(update: Update, _: CallbackContext) -> None:
    return_text = get_del_ds_ixia()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *IXIA*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_DS_IXIA
def get_del_ds_ixia():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'IXIA'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_ds_ixia(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IXIA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IXIA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IXIA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IXIA' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IXIA' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'IXIA' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_ts(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("CTS", callback_data=str(DEL_TS_CTS))],
        [InlineKeyboardButton("REMEDY", callback_data=str(DEL_TS_REMEDY))],
        [InlineKeyboardButton("SDM", callback_data=str(DEL_TS_SDM))],
        [InlineKeyboardButton("Back", callback_data=str(DEL_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *TICKETING SYSTEM*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def del_ts_cts(update: Update, _: CallbackContext) -> None:
    return_text = get_del_ts_cts()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *CTS*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_TS_CTS
def get_del_ts_cts():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'CTS'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_ts_cts(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CTS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CTS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CTS' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CTS' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CTS' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'CTS' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_ts_remedy(update: Update, _: CallbackContext) -> None:
    return_text = get_del_ts_remedy()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *REMEDY*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_TS_REMEDY
def get_del_ts_remedy():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'REMEDY'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_ts_remedy(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'REMEDY' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'REMEDY' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'REMEDY' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'REMEDY' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'REMEDY' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'REMEDY' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_ts_sdm(update: Update, _: CallbackContext) -> None:
    return_text = get_del_ts_sdm()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *SDM*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_TS_SDM
def get_del_ts_sdm():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'SDM'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_ts_sdm(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SDM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SDM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SDM' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SDM' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SDM' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'SDM' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END
def del_davp(update: Update, _: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("DASHBOARD AVP", callback_data=str(DEL_DAVP_AVP))],
        [InlineKeyboardButton("Back", callback_data=str(DEL_EXPERT))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih : *DASHBOARD AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
    query.message.reply_text("Pilih :",reply_markup=reply_markup)
def del_davp_avp(update: Update, _: CallbackContext) -> None:
    return_text = get_del_avp_avp()
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Anda memilih: *AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP'"
    check_status = client.command(query)
    check_status = check_status == 0
    query = update.callback_query
    query.answer()
    if check_status is True:
        query.message.reply_text("Username ID telegram tidak ditemukan\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        for cmdOUT in splitting(return_text):
            query.message.reply_text(cmdOUT, disable_web_page_preview=True)
        query.message.reply_text("Hapus username ID telegram dan gunakan spasi setiap user jika lebih dari satu, maksimal 3 user\nKlik /cancel untuk membatalkan")
        return END_DEL_DAVP_AVP
def get_del_avp_avp():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    text = ''
    text += 'Expert Aktif :'
    text += '\n'
    query = f"select expert from production.helpdesk_expert where application_name = 'AVP'"
    data = client.command(query)
    data_list = str(data).split('\\n')
    data_list = str(data_list).replace("['","").replace("']","").split('\\n')
    for data in data_list:
        check_username = f"├ {data}"
        text += check_username
        text += '\n'
    text += '\n'
    return text
def end_del_davp_avp(update: Update, _: CallbackContext) -> None:
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    parameter_user =  update.message.text.split()
    count_user =  len(update.message.text.split())
    if count_user == 1:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        if check_status_1 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AVP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 2:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        if check_status_1 is True and check_status_2 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AVP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AVP' AND expert = '{parameter_user[1]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    elif count_user == 3:
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP' AND expert = '{parameter_user[0]}'"
        check_status = client.command(query)
        check_status_1 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP' AND expert = '{parameter_user[1]}'"
        check_status = client.command(query)
        check_status_2 = check_status == 0
        query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP' AND expert = '{parameter_user[2]}'"
        check_status = client.command(query)
        check_status_3 = check_status == 0
        if check_status_1 is True and check_status_2 is True and check_status_3 is True:
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan\nKlik /menu")
        else:
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AVP' AND expert = '{parameter_user[0]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AVP' AND expert = '{parameter_user[1]}'"
            client.command(query)
            query = f"ALTER TABLE production.helpdesk_expert delete where application_name = 'AVP' AND expert = '{parameter_user[2]}'"
            client.command(query)
            update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
            update.message.reply_text("✅ Berhasil dihapus\nKlik /menu")
    else:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text("Username ID telegram yang dihapus tidak ditemukan")
    return ConversationHandler.END

def m6_ds(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("KAFKA", callback_data=str(M6_DS_KAFKA))],
                [InlineKeyboardButton("NDM >>", callback_data=str(M6_DS_NDM))],
                [InlineKeyboardButton("NDL DASHBOARD ETL BIG DATA >>", callback_data=str(M6_DS_NDL))],
                [InlineKeyboardButton("OSS", callback_data=str(M6_DS_OSS))],
                [InlineKeyboardButton("IXIA TAP AGGREGATOR >>", callback_data=str(M6_DS_IXIA))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_DS))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *DATA SOURCE*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*KAFKA* : -\n*NDM* : Tools Storage Data KPI setelah dari NDL\n*NDL DASHBOARD ETL BIG DATA* : Tools Storage Data sebelum NDM\n*OSS* : -\n*IXIA TAP AGGREGATOR* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("KAFKA", callback_data=str(M6_DS_KAFKA))],
                [InlineKeyboardButton("NDM >>", callback_data=str(M6_DS_NDM))],
                [InlineKeyboardButton("NDL DASHBOARD ETL BIG DATA >>", callback_data=str(M6_DS_NDL))],
                [InlineKeyboardButton("OSS", callback_data=str(M6_DS_OSS))],
                [InlineKeyboardButton("IXIA TAP AGGREGATOR >>", callback_data=str(M6_DS_IXIA))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_DS))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *DATA SOURCE*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*KAFKA* : -\n*NDM* : Tools Storage Data KPI setelah dari NDL\n*NDL DASHBOARD ETL BIG DATA* : Tools Storage Data sebelum NDM\n*OSS* : -\n*IXIA TAP AGGREGATOR* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("KAFKA", callback_data=str(M6_DS_KAFKA))],
                [InlineKeyboardButton("NDM >>", callback_data=str(M6_DS_NDM))],
                [InlineKeyboardButton("NDL DASHBOARD ETL BIG DATA >>", callback_data=str(M6_DS_NDL))],
                [InlineKeyboardButton("OSS", callback_data=str(M6_DS_OSS))],
                [InlineKeyboardButton("IXIA TAP AGGREGATOR", callback_data=str(M6_DS_IXIA))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_DS))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *DATA SOURCE*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*KAFKA* : -\n*NDM* : Tools Storage Data KPI setelah dari NDL\n*NDL DASHBOARD ETL BIG DATA* : Tools Storage Data sebelum NDM\n*OSS* : -\n*IXIA TAP AGGREGATOR* : -\n*MY TICKET (ADMIN)* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("KAFKA", callback_data=str(M6_DS_KAFKA))],
                [InlineKeyboardButton("NDM >>", callback_data=str(M6_DS_NDM))],
                [InlineKeyboardButton("NDL DASHBOARD ETL BIG DATA >>", callback_data=str(M6_DS_NDL))],
                [InlineKeyboardButton("OSS", callback_data=str(M6_DS_OSS))],
                [InlineKeyboardButton("IXIA TAP AGGREGATOR", callback_data=str(M6_DS_IXIA))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_DS))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *DATA SOURCE*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*KAFKA* : -\n*NDM* : Tools Storage Data KPI setelah dari NDL\n*NDL DASHBOARD ETL BIG DATA* : Tools Storage Data sebelum NDM\n*OSS* : -\n*IXIA TAP AGGREGATOR* : -\n*MY TICKET (ADMIN)* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
def m6_ds_kafka(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_KAFKA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER KAFKA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *KAFKA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_KAFKA_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER KAFKA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *KAFKA*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m6_ds_kafka_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+BTI-04Iares4ZWU9'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'KAFKA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'KFK' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'KAFKA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_KAFKA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_DS))],
                    [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'KAFKA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di KAFKA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_kafka()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_KAFKA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_KAFKA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_KAFKA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_KAFKA
        
def get_summary_kafka():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'KAFKA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_kafka(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_KAFKA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_KAFKA
def end_kafka(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "KFK"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'KAFKA', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)


        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'KAFKA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'KAFKA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "KFK"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'KAFKA', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001904921465','{ticket}','{problem_title}','{data_select[8]}','open','KAFKA','{date_time}','None','DATA SOURCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'KAFKA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'KAFKA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'KAFKA')
    return ConversationHandler.END
def m6_ds_ndm(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Speed Layer", callback_data=str(M6_DS_NDM_CREATE_1))],
            [InlineKeyboardButton("Low Layer", callback_data=str(M6_DS_NDM_CREATE_2))],
            [InlineKeyboardButton("REQUESTS USER NDM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *NDM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Speed Layer", callback_data=str(M6_DS_NDM_CREATE_1))],
            [InlineKeyboardButton("Low Layer", callback_data=str(M6_DS_NDM_CREATE_2))]
            [InlineKeyboardButton("REQUESTS USER NDM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *NDM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m6_ds_ndm_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+BTI-04Iares4ZWU9'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'NDM'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'NDM' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NDM'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_NDM))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_DS))],
                    [InlineKeyboardButton("Back", callback_data=str(M6_DS_NDM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NDM'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di NDM, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ndm()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem anda :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_NDM
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDM
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDM
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem anda :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDM
def get_summary_ndm():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'NDM'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ndm(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NDM
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NDM
def end_ndm(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "NDM"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'NDM', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NDM'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NDM')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "NDM"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'NDM', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001904921465','{ticket}','{problem_title}','{data_select[8]}','open','NDM','{date_time}','None','DATA SOURCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NDM'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NDM')
    return ConversationHandler.END
def m6_ds_ndl(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Technical Query >>", callback_data=str(M6_DS_NDL_TQ))],
            [InlineKeyboardButton("Trouble Resolution >>", callback_data=str(M6_DS_NDL_TR))],
            [InlineKeyboardButton("REQUESTS USER NDL", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *NDL*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Technical Query", callback_data=str(M6_DS_NDL_TQ))],
            [InlineKeyboardButton("Trouble Resolution", callback_data=str(M6_DS_NDL_TR))],
            [InlineKeyboardButton("REQUESTS USER NDL", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *NDL*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m6_ds_ndl_tq(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("API Dump", callback_data=str(M6_DS_NDL_TQ_CREATE_1))],
            [InlineKeyboardButton("API Dump Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_2))],
            [InlineKeyboardButton("Cell Count Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_3))],
            [InlineKeyboardButton("Data Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_4))],
            [InlineKeyboardButton("Data Completeness Issue", callback_data=str(M6_DS_NDL_TQ_CREATE_5))],
            [InlineKeyboardButton("Data Ingestion to Hadoop", callback_data=str(M6_DS_NDL_TQ_CREATE_6))],
            [InlineKeyboardButton("Data Quality", callback_data=str(M6_DS_NDL_TQ_CREATE_7))],
            [InlineKeyboardButton("Empty API Dump Result", callback_data=str(M6_DS_NDL_TQ_CREATE_8))],
            [InlineKeyboardButton("Empty Hadoop Data", callback_data=str(M6_DS_NDL_TQ_CREATE_9))],
            [InlineKeyboardButton("ETL Logic for 4G RAN ZTE", callback_data=str(M6_DS_NDL_TQ_CREATE_10))],
            [InlineKeyboardButton("Incomplete Parquet Files", callback_data=str(M6_DS_NDL_TQ_CREATE_11))],
            [InlineKeyboardButton("KPI 4G RAN File Template", callback_data=str(M6_DS_NDL_TQ_CREATE_12))],
            [InlineKeyboardButton("KPI Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_13))],
            [InlineKeyboardButton("KPI Null or Blank", callback_data=str(M6_DS_NDL_TQ_CREATE_14))],
            [InlineKeyboardButton("LAC CI Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_15))],
            [InlineKeyboardButton("Latest Data is not Available", callback_data=str(M6_DS_NDL_TQ_CREATE_16))],
            [InlineKeyboardButton("Performance KPI", callback_data=str(M6_DS_NDL_TQ_CREATE_17))],
            [InlineKeyboardButton("Weekly KPI 2G 3G RAN", callback_data=str(M6_DS_NDL_TQ_CREATE_18))],
            [InlineKeyboardButton("Weekly KPI Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_19))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_NDL_TQ_CREATE_20))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS_NDM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *Technical Query*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("API Dump", callback_data=str(M6_DS_NDL_TQ_CREATE_1))],
            [InlineKeyboardButton("API Dump Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_2))],
            [InlineKeyboardButton("Cell Count Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_3))],
            [InlineKeyboardButton("Data Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_4))],
            [InlineKeyboardButton("Data Completeness Issue", callback_data=str(M6_DS_NDL_TQ_CREATE_5))],
            [InlineKeyboardButton("Data Ingestion to Hadoop", callback_data=str(M6_DS_NDL_TQ_CREATE_6))],
            [InlineKeyboardButton("Data Quality", callback_data=str(M6_DS_NDL_TQ_CREATE_7))],
            [InlineKeyboardButton("Empty API Dump Result", callback_data=str(M6_DS_NDL_TQ_CREATE_8))],
            [InlineKeyboardButton("Empty Hadoop Data", callback_data=str(M6_DS_NDL_TQ_CREATE_9))],
            [InlineKeyboardButton("ETL Logic for 4G RAN ZTE", callback_data=str(M6_DS_NDL_TQ_CREATE_10))],
            [InlineKeyboardButton("Incomplete Parquet Files", callback_data=str(M6_DS_NDL_TQ_CREATE_11))],
            [InlineKeyboardButton("KPI 4G RAN File Template", callback_data=str(M6_DS_NDL_TQ_CREATE_12))],
            [InlineKeyboardButton("KPI Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_13))],
            [InlineKeyboardButton("KPI Null or Blank", callback_data=str(M6_DS_NDL_TQ_CREATE_14))],
            [InlineKeyboardButton("LAC CI Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_15))],
            [InlineKeyboardButton("Latest Data is not Available", callback_data=str(M6_DS_NDL_TQ_CREATE_16))],
            [InlineKeyboardButton("Performance KPI", callback_data=str(M6_DS_NDL_TQ_CREATE_17))],
            [InlineKeyboardButton("Weekly KPI 2G 3G RAN", callback_data=str(M6_DS_NDL_TQ_CREATE_18))],
            [InlineKeyboardButton("Weekly KPI Anomaly", callback_data=str(M6_DS_NDL_TQ_CREATE_19))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_NDL_TQ_CREATE_20))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS_NDM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *Technical Query*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m6_ds_ndl_tr(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("API Timeout", callback_data=str(M6_DS_NDL_TR_CREATE_1))],
            [InlineKeyboardButton("API Dump Error", callback_data=str(M6_DS_NDL_TR_CREATE_2))],
            [InlineKeyboardButton("Cell Count Anomaly", callback_data=str(M6_DS_NDL_TR_CREATE_3))],
            [InlineKeyboardButton("Corrupted Parquet File", callback_data=str(M6_DS_NDL_TR_CREATE_4))],
            [InlineKeyboardButton("Data Completeness Issue", callback_data=str(M6_DS_NDL_TR_CREATE_5))],
            [InlineKeyboardButton("Empty API Dump Result", callback_data=str(M6_DS_NDL_TR_CREATE_6))],
            [InlineKeyboardButton("EMS to UME Migration (ZTE)", callback_data=str(M6_DS_NDL_TR_CREATE_7))],
            [InlineKeyboardButton("Incomplete Parquet Files", callback_data=str(M6_DS_NDL_TR_CREATE_8))],
            [InlineKeyboardButton("KPI Anomaly", callback_data=str(M6_DS_NDL_TR_CREATE_9))],
            [InlineKeyboardButton("KPI Null or Blank", callback_data=str(M6_DS_NDL_TR_CREATE_10))],
            [InlineKeyboardButton("Latest Data is not Available", callback_data=str(M6_DS_NDL_TR_CREATE_11))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_NDL_TR_CREATE_12))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS_NDM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *Trouble Resolution*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("API Timeout", callback_data=str(M6_DS_NDL_TR_CREATE_1))],
            [InlineKeyboardButton("API Dump Error", callback_data=str(M6_DS_NDL_TR_CREATE_2))],
            [InlineKeyboardButton("Cell Count Anomaly", callback_data=str(M6_DS_NDL_TR_CREATE_3))],
            [InlineKeyboardButton("Corrupted Parquet File", callback_data=str(M6_DS_NDL_TR_CREATE_4))],
            [InlineKeyboardButton("Data Completeness Issue", callback_data=str(M6_DS_NDL_TR_CREATE_5))],
            [InlineKeyboardButton("Empty API Dump Result", callback_data=str(M6_DS_NDL_TR_CREATE_6))],
            [InlineKeyboardButton("EMS to UME Migration (ZTE)", callback_data=str(M6_DS_NDL_TR_CREATE_7))],
            [InlineKeyboardButton("Incomplete Parquet Files", callback_data=str(M6_DS_NDL_TR_CREATE_8))],
            [InlineKeyboardButton("KPI Anomaly", callback_data=str(M6_DS_NDL_TR_CREATE_9))],
            [InlineKeyboardButton("KPI Null or Blank", callback_data=str(M6_DS_NDL_TR_CREATE_10))],
            [InlineKeyboardButton("Latest Data is not Available", callback_data=str(M6_DS_NDL_TR_CREATE_11))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_NDL_TR_CREATE_12))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS_NDM))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *Trouble Resolution*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)

def m6_ds_ndl_tq_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("Technical Query ➞ {}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+BTI-04Iares4ZWU9'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'NDL'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'NDL' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NDL'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_NDL))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_DS))],
                    [InlineKeyboardButton("Back", callback_data=str(M6_DS_NDL))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NDL'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di NDL, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ndl()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_NDL
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDL
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDL
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDL

def m6_ds_ndl_tr_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("Trouble Resolution ➞ {}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+BTI-04Iares4ZWU9'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'NDL'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'NDL' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NDL'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_NDL))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_DS))],
                    [InlineKeyboardButton("Back", callback_data=str(M6_DS_NDL))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'NDL'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di NDL, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ndl()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_NDL
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDL
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDL
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_NDL
def get_summary_ndl():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'NDL'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ndl(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NDL
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_NDL
def end_ndl(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "NDL"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'NDL', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NDL'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NDL')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "NDL"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = {ticket}, problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = {date_time}, category = 'NDL', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001904921465','{ticket}','{problem_title}','{data_select[8]}','open','NDL','{date_time}','None','DATA SOURCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'NDL'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'NDL'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'NDL')
    return ConversationHandler.END
def m6_ds_oss(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_OSS_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER OSS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *OSS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_OSS_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER OSS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *OSS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m6_ds_oss_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+BTI-04Iares4ZWU9'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'OSS'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'OSS' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'OSS'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_OSS))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_DS))],
                    [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'OSS'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di OSS, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_oss()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_OSS
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OSS
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OSS
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_OSS
        
def get_summary_oss():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'OSS'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_oss(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_OSS
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_OSS
def end_oss(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "OSS"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'OSS', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'OSS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'OSS')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "OSS"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'OSS', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001904921465','{ticket}','{problem_title}','{data_select[8]}','open','OSS','{date_time}','None','DATA SOURCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'OSS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'OSS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'OSS')
    return ConversationHandler.END

def m6_ds_ixia(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("CRC Error >>", callback_data=str(M6_DS_IXIA_CREATE_1))],
            [InlineKeyboardButton("Device Off >>", callback_data=str(M6_DS_IXIA_CREATE_2))],
            [InlineKeyboardButton("Drop Traffic >>", callback_data=str(M6_DS_IXIA_CREATE_3))],
            [InlineKeyboardButton("Port Down >>", callback_data=str(M6_DS_IXIA_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_IXIA_CREATE_5))],
            [InlineKeyboardButton("REQUESTS USER IXIA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *IXIA TAP AGGREGATOR*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("CRC Error >>", callback_data=str(M6_DS_IXIA_CREATE_1))],
            [InlineKeyboardButton("Device Off >>", callback_data=str(M6_DS_IXIA_CREATE_2))],
            [InlineKeyboardButton("Drop Traffic >>", callback_data=str(M6_DS_IXIA_CREATE_3))],
            [InlineKeyboardButton("Port Down >>", callback_data=str(M6_DS_IXIA_CREATE_4))],
            [InlineKeyboardButton("Other Problems", callback_data=str(M6_DS_IXIA_CREATE_5))],
            [InlineKeyboardButton("REQUESTS USER IXIA", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *IXIA TAP AGGREGATOR*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m6_ds_ixia_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+BTI-04Iares4ZWU9'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    if data_text in 'CRC Error':
        keyboard = [
            [InlineKeyboardButton("Patch Card Damage", callback_data=str(M6_DS_IXIA_CREATE_1A))],
            [InlineKeyboardButton("Invalid Data", callback_data=str(M6_DS_IXIA_CREATE_1B))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS_IXIA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Device Off':
        keyboard = [
            [InlineKeyboardButton("FCan Not Access", callback_data=str(M6_DS_IXIA_CREATE_2A))],
            [InlineKeyboardButton("Ping RTO", callback_data=str(M6_DS_IXIA_CREATE_2B))],
            [InlineKeyboardButton("Alarm Appears", callback_data=str(M6_DS_IXIA_CREATE_2C))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS_IXIA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Drop Traffic':
        keyboard = [
            [InlineKeyboardButton("Incomplete Data Feeding", callback_data=str(M6_DS_IXIA_CREATE_3A))],
            [InlineKeyboardButton("Wrong Config Filter Data", callback_data=str(M6_DS_IXIA_CREATE_3B))],
            [InlineKeyboardButton("Expand Link Input", callback_data=str(M6_DS_IXIA_CREATE_3C))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS_IXIA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Port Down':
        keyboard = [
            [InlineKeyboardButton("Lisence", callback_data=str(M6_DS_IXIA_CREATE_4A))],
            [InlineKeyboardButton("Incompatible SFP", callback_data=str(M6_DS_IXIA_CREATE_4B))],
            [InlineKeyboardButton("Error Config", callback_data=str(M6_DS_IXIA_CREATE_4C))],
            [InlineKeyboardButton("Physical Damage", callback_data=str(M6_DS_IXIA_CREATE_4D))],
            [InlineKeyboardButton("Back", callback_data=str(M6_DS_IXIA))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(f"Pilih :",reply_markup=reply_markup)
    elif data_text in 'Other Problems':
        query.message.reply_text(f"Masukkan detail problem :")
        return END_IXIA
    
def m6_ds_ixia_create_ticket(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write(" ➞ {}".format(data_text))
            log_bot.close()
    query = update.callback_query
    query.answer()
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'IXIA'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'IXA' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'IXIA'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_IXIA))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_PM))],
                    [InlineKeyboardButton("Back", callback_data=str(M4_PM))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'IXIA'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di IXIA, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_ixia()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_IXIA
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_IXIA
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_IXIA
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_IXIA
        
def get_summary_ixia():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'IXIA'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_ixia(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_IXIA
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_IXIA
def end_ixia(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    ticket = "IXA"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'IXIA', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'IXIA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'IXIA')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "AMT"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001904921465', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'IXIA', status = 'open', fcaps = 'DATA SOURCE' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001904921465','{ticket}','{problem_title}','{data_select[8]}','open','IXIA','{date_time}','None','DATA SOURCE','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+BTI-04Iares4ZWU9"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'IXIA'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'IXIA'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Data Source", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'IXIA')
    return ConversationHandler.END

def m7_ts(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("CTS", callback_data=str(M7_TS_CTS))],
                [InlineKeyboardButton("REMEDY", callback_data=str(M7_TS_REMEDY))],
                [InlineKeyboardButton("SDM", callback_data=str(M7_TS_SDM))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_TS))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *TICKETING SYSTEM*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*CTS* : -\n*REMEDY* : -\n*SDM* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("CTS", callback_data=str(M7_TS_CTS))],
                [InlineKeyboardButton("REMEDY", callback_data=str(M7_TS_REMEDY))],
                [InlineKeyboardButton("SDM", callback_data=str(M7_TS_SDM))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_TS))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *TICKETING SYSTEM*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*CTS* : -\n*REMEDY* : -\n*SDM* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("CTS", callback_data=str(M7_TS_CTS))],
                [InlineKeyboardButton("REMEDY", callback_data=str(M7_TS_REMEDY))],
                [InlineKeyboardButton("SDM", callback_data=str(M7_TS_SDM))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_TS))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Anda memilih : *TICKETING SYSTEM*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*CTS* : -\n*REMEDY* : -\n*SDM* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("CTS", callback_data=str(M7_TS_CTS))],
                [InlineKeyboardButton("REMEDY", callback_data=str(M7_TS_REMEDY))],
                [InlineKeyboardButton("SDM", callback_data=str(M7_TS_SDM))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_TS))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text(text="Anda memilih : *TICKETING SYSTEM*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*CTS* : -\n*REMEDY* : -\n*SDM* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
def m7_ts_cts(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M7_TS_CTS_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER CTS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M7_TS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *CTS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M7_TS_CTS_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER CTS", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M7_TS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *CTS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m7_ts_cts_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+Myi-MQxu3Ao0OGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'CTS'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'CTS' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CTS'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_CTS))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_TS))],
                    [InlineKeyboardButton("Back", callback_data=str(M7_TS))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'CTS'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di CTS, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_cts()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_CTS
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CTS
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CTS
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_CTS
        
def get_summary_cts():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'CTS'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_cts(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CTS
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_CTS
def end_cts(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "CTS"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001921854494', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CTS', status = 'open', fcaps = 'TICKETING SYSTEM' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+Myi-MQxu3Ao0OGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CTS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'CTS')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "CTS"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001921854494', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'CTS', status = 'open', fcaps = 'TICKETING SYSTEM' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001921854494','{ticket}','{problem_title}','{data_select[8]}','open','CTS','{date_time}','None','TICKETING SYSTEM','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+Myi-MQxu3Ao0OGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'CTS'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'CTS'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'CTS')
    return ConversationHandler.END
def m7_ts_remedy(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M7_TS_REMEDY_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER REMEDY", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M7_TS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *REMEDY*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M7_TS_REMEDY_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER REMEDY", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M7_TS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *REMEDY*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m7_ts_remedy_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+Myi-MQxu3Ao0OGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'REMEDY'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'RMD' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'REMEDY'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_REMEDY))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_TS))],
                    [InlineKeyboardButton("Back", callback_data=str(M7_TS))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'REMEDY'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di REMEDY, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_remedy()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_REMEDY
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_REMEDY
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_REMEDY
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_REMEDY
        
def get_summary_remedy():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'REMEDY'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_remedy(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_REMEDY
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_REMEDY
def end_remedy(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "RMD"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001921854494', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'REMEDY', status = 'open', fcaps = 'TICKETING SYSTEM' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+Myi-MQxu3Ao0OGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'REMEDY'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'REMEDY')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "RMD"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001921854494', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'REMEDY', status = 'open', fcaps = 'TICKETING SYSTEM' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001921854494','{ticket}','{problem_title}','{data_select[8]}','open','REMEDY','{date_time}','None','TICKETING SYSTEM','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+Myi-MQxu3Ao0OGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'REMEDY'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'REMEDY'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'REMEDY')
    return ConversationHandler.END
def m7_ts_sdm(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M7_TS_SDM_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER SDM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M7_TS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *SDM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M7_TS_SDM_CREATE_1))],
            [InlineKeyboardButton("REQUESTS USER SDM", callback_data=str(M5_SM_REQ_USER))],
            [InlineKeyboardButton("Back", callback_data=str(M7_TS))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *SDM*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m7_ts_sdm_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+Myi-MQxu3Ao0OGI1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'SDM'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'SDM' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SDM'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_SDM))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_TS))],
                    [InlineKeyboardButton("Back", callback_data=str(M7_TS))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'SDM'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di SDM, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_sdm()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_SDM
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SDM
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SDM
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_SDM
        
def get_summary_sdm():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'SDM'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_sdm(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SDM
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_SDM
def end_sdm(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "SDM"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001921854494', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'SDM', status = 'open', fcaps = 'TICKETING SYSTEM' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+Myi-MQxu3Ao0OGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SDM'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SDM')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "SDM"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001921854494', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'SDM', status = 'open', fcaps = 'TICKETING SYSTEM' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001921854494','{ticket}','{problem_title}','{data_select[8]}','open','SDM','{date_time}','None','TICKETING SYSTEM','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+Myi-MQxu3Ao0OGI1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'SDM'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'SDM'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Ticketing System", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'SDM')
    return ConversationHandler.END
def m8_davp(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'user'
    if position is False: ##ADMIN
        try:
            keyboard = [
                [InlineKeyboardButton("AVP", callback_data=str(M8_DAVP_AVP))],
                [InlineKeyboardButton("REQUESTS USER AVP", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_DAVP))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text("Anda memilih : *DASHBOARD AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AVP* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("AVP", callback_data=str(M8_DAVP_AVP))],
                [InlineKeyboardButton("REQUESTS USER AVP", callback_data=str(M5_SM_REQ_USER))],
                [InlineKeyboardButton("MY TICKET (ADMIN)", callback_data=str(CLOSED_TICKET_DAVP))],
                # [InlineKeyboardButton("FEEDBACK USERS", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text("Anda memilih : *DASHBOARD AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AVP* : -\n*MY TICKET (ADMIN)* : management Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
    elif position is True: ##USER
        try:
            keyboard = [
                [InlineKeyboardButton("AVP", callback_data=str(M8_DAVP_AVP))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_DAVP))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)

            query.edit_message_text("Anda memilih : *DASHBOARD AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AVP* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            keyboard = [
                [InlineKeyboardButton("AVP", callback_data=str(M8_DAVP_AVP))],
                [InlineKeyboardButton("MY TICKET", callback_data=str(CLOSED_TICKET_DAVP))],
                # [InlineKeyboardButton("FEEDBACK", callback_data=str(FEEDBACK_ACC))],
                [InlineKeyboardButton("HELP", callback_data=str(MENU_HELP))],
                [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query = update.callback_query
            query.answer()
            query.edit_message_text("Anda memilih : *DASHBOARD AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
            query.message.reply_text("Pilih :",reply_markup=reply_markup)
            query.message.reply_text("Penjelasan :\n*AVP* : -\n*MY TICKET* : Closed Ticket\n*HELP* : Menu Bantuan",parse_mode=telegram.ParseMode.MARKDOWN)
    
def m8_davp_avp(update: Update, _: CallbackContext) -> None:
    try:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M8_DAVP_AVP_CREATE_1))],
            [InlineKeyboardButton("Back", callback_data=str(M8_DAVP))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Anda memilih : *AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
    except:
        keyboard = [
            [InlineKeyboardButton("Other Problems", callback_data=str(M8_DAVP_AVP_CREATE_1))],
            [InlineKeyboardButton("Back", callback_data=str(M8_DAVP))],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *AVP*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text("Pilih :",reply_markup=reply_markup)
def m8_davp_avp_create(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    query = update.callback_query
    select_data = query.data
    data = "{}".format(query.message.reply_markup).replace("'",'"').replace("[[","[").replace("]]","]").replace("], [",",")
    data = json.loads(data)
    for data in data['inline_keyboard']:
        if data['callback_data'] == select_data:
            data_text = str(data['text']).replace(" >>","")
            log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','a')
            log_bot.write("{}".format(data_text))
            log_bot.close()
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    channel_telegram = 'https://t.me/+yzTXsznnQ_NjOTU1'
    query.edit_message_text(f"Anda memilih : *{data_text}*",parse_mode=telegram.ParseMode.MARKDOWN)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_report where status = 'open' or category = 'AVP'"
    check_ticket = client.command(query)
    try:
        data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        x = []
        for data in data_list:
            data = str(data).split(', ')
            x.append(data[6][:3])
        if 'AVP' in x:
            query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'AVP'"
            check_status = client.command(query)
            check_status = check_status == 0
            if check_status is False:
                keyboard = [
                    [InlineKeyboardButton("Problem berbeda", callback_data=str(ASK_DAVP))],
                    [InlineKeyboardButton("Problem sama", callback_data=str(BATAL_DAVP))],
                    [InlineKeyboardButton("Back", callback_data=str(MENU_UTAMA))],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query = f"select count(*) as `count` from production.helpdesk_report where status = 'open' and category = 'AVP'"
                check_status = client.command(query)
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Total ada {check_status} tiket problem yang aktif di Dashboard AVP, dengan detail keterangan dibawah tombol konfirmasi. silahkan pilih salah satu :",reply_markup=reply_markup)
                get_summary_davp()
                query = update.callback_query
                query.answer()
                query.message.reply_document(open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt', 'rb'),caption="Detail Keterangan Tiket Aktif",filename="Detail.txt")
            else:
                client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
                query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
                client.command(query)
                query = update.callback_query
                query.answer()
                message_id = query.message.message_id+1
                chat_id = update.callback_query.from_user.id
                bot_log.delete_message(chat_id,message_id)
                query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
                return END_DAVP
        else:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DAVP
    except:
        # pass
        try:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DAVP
        except:
            client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
            query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
            client.command(query)
            query = update.callback_query
            query.answer()
            query.message.reply_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
            return END_DAVP
        
def get_summary_davp():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt")
    else:
        pass
    query = f"select chatid_telegram,channel_chatid,fullname_telegram,ticket,category,username_telegram,open_ticket_date,problem_title,problem_summary from production.helpdesk_report where status = 'open' and category = 'AVP'"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')
        problem_note = []
        index_array = len(data)
        range_case = list(range(7,index_array,1))
        for i in range_case:
            problem_note.append(data[i])
        problem = '{}'.format(str(problem_note)).replace('[','').replace(']','').replace("'",'')
        problem = "{} - {}".format(data[3],problem)
        x.append(problem)
    problem = str(x).replace("['","").replace("']","").replace("', '","\n")
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/summary_ticket.txt','a')
    data.write(problem)
    data.close()
def ask_davp(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', problem_title = 'None',problem_summary = 'None',image = 'None', status = 'None', category = 'None', open_ticket_date = 'None', fcaps = 'None'  WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    try:
        message_id = query.message.message_id+2
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        message_id = query.message.message_id+1
        chat_id = update.callback_query.from_user.id
        bot_log.delete_message(chat_id,message_id)
        query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_DAVP
    except:
        try:
            message_id = query.message.message_id+1
            chat_id = update.callback_query.from_user.id
            bot_log.delete_message(chat_id,message_id)
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        except:
            query.edit_message_text(text="Masukkan detail problem :",parse_mode=telegram.ParseMode.MARKDOWN)
        return END_DAVP
def end_davp(update: Update, _: CallbackContext) -> None:
    username = update.message.from_user.username
    chatid_telegram  = update.message.from_user.id 
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    keterangan = update.message.text
    ##Create Ticket
    characters = list(string.digits)
    length = 10
    random.shuffle(characters)
    password = []
    for i in range(length):
        password.append(random.choice(characters))
    random.shuffle(password)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')

    ticket = "AVP"+"".join(password)
    status = []
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    val_check_ticket = data[6] == ticket
    status.append(val_check_ticket)
    problem_title = open('/home/dimas/baru/helpdeskbot_v2/data_log/problem_title.txt','r')
    problem_title = problem_title.read()
    if status[0] is False:
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001844897124', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'AVP', status = 'open', fcaps = 'DASHBOARD AVP' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)
 
        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)

        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','{data_select[5]}','{data_select[6]}','{data_select[7]}','{data_select[8]}','{data_select[9]}','{data_select[10]}','{data_select[11]}','{data_select[12]}','{data_select[13]}','{data_select[14]}','{data_select[15]}','{data_select[16]}'"
        client.command(query)

        sleep(2)

        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+yzTXsznnQ_NjOTU1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Dashboard", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'AVP'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Dashboard", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'AVP')
    elif status[0] is True:
        characters = list(string.digits)
        length = 10
        random.shuffle(characters)
        password = []
        for i in range(length):
            password.append(random.choice(characters))
        random.shuffle(password)
        ticket = "AVP"+"".join(password)
        query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = '-1001844897124', ticket = '{ticket}', problem_title = '{problem_title}', problem_summary = '{keterangan}', open_ticket_date = '{date_time}', category = 'AVP', status = 'open', fcaps = 'DASHBOARD AVP' WHERE chatid_telegram = '{chatid_telegram}'"
        client.command(query)

        client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
        query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data_select = client.command(query)
        query = f"INSERT INTO production.helpdesk_report select '{data_select[0]}','{data_select[1]}','{data_select[2]}','{data_select[3]}','{data_select[4]}','-1001844897124','{ticket}','{problem_title}','{data_select[8]}','open','AVP','{date_time}','None','DASHBOARD AVP','{keterangan}','None','{data_select[16]}'"
        client.command(query)

        sleep(2)


        query = f"select ticket,image from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        ticket_status = data[1] == 'None'
        if ticket_status is False:
            pass
        else:
            telegram_channel = "https://t.me/+yzTXsznnQ_NjOTU1"
            ticket_status = data[0]
            query = f"select count(*) as `count` from production.helpdesk_expert where application_name = 'AVP'"
            check_count = client.command(query)
            check_count = check_count == 0
            if check_count is True:
                username_expert = 'https://t.me/puang_ocha'
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Dashboard", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : Rosady" , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
            else:
                expert = []
                query = f"select expert from production.helpdesk_expert where application_name = 'AVP'"
                data = client.command(query)
                expert.append(data)          
                expert = str(expert).replace('[','').replace(']','').replace("'",'').split('\\n')
                expert = expert[0]
                username_expert = 'https://t.me/{}'.format(expert)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                button1 = InlineKeyboardButton("#Helpdesk Dashboard", url=telegram_channel)
                button2 = InlineKeyboardButton("Expert : {}".format(expert) , url=username_expert)
                buttons = [[button1], [button2]]
                keyboard = InlineKeyboardMarkup(buttons)
                update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
                update.message.reply_text(f'✅ Tiket problem sebagai berikut *{ticket_status}*\nKlik channel dan approved channel melalui admin dibawah ini',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=keyboard)
        log_bot(update, 'AVP')
    return ConversationHandler.END

def closed_ticket_fm(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'admin'
    if position is True:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET (ADMIN)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_inp = data[6][:3] == 'INP'
                ticket_inm = data[6][:3] == 'INM'
                ticket_sya = data[6][:3] == 'SYA'
                ticket_dav = data[6][:3] == 'DAV'
                ticket_gra = data[6][:3] == 'GRA'
                ticket_tab = data[6][:3] == 'TAB'
                ticket_ncl = data[6][:3] == 'NCL'
                ticket_ndn = data[6][:3] == 'NDN'
                ticket_ossera = data[6][:3] == 'OSR'
                ticket_psmossera = data[6][:3] == 'PSR'
                query = update.callback_query
                query.answer()
                if ticket_inp is True or ticket_inm is True or ticket_sya is True or ticket_dav is True or ticket_gra is True or ticket_tab is True or ticket_ncl is True or ticket_ndn is True or ticket_ossera is True or ticket_psmossera is True:
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* :\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
    elif position is False:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open' and chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_inp = data[6][:3] == 'INP'
                ticket_inm = data[6][:3] == 'INM'
                ticket_sya = data[6][:3] == 'SYA'
                ticket_dav = data[6][:3] == 'DAV'
                ticket_gra = data[6][:3] == 'GRA'
                ticket_tab = data[6][:3] == 'TAB'
                ticket_ncl = data[6][:3] == 'NCL'
                ticket_ndn = data[6][:3] == 'NDN'
                ticket_ossera = data[6][:3] == 'OSR'
                ticket_psmossera = data[6][:3] == 'PSR'
                query = update.callback_query
                query.answer()
                if ticket_inp is True or ticket_inm is True or ticket_sya is True or ticket_dav is True or ticket_gra is True or ticket_tab is True or ticket_ncl is True or ticket_ndn is True or ticket_ossera is True or ticket_psmossera is True:
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* anda:\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
def get_closed_ticket_fm_user():
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_ticket_user.txt','r')
    data = data.read()
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    data = data.replace("[","").replace("]","").replace("'","").split(', ')
    for data1 in data:
        text += f'├ {data1}\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text

def get_closed_ticket_fm():
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram,ticket,problem_title,problem_summary from production.helpdesk_report where status = 'open'"
    data = client.command(query)
    try:
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            ticket_check = data[2] == 'None'
            if ticket_check is False:
                requests = 'https://t.me/{}'.format(data[0])
                full_name = str(data[1]).title()
                ticket = data[2]
                ket = data[3]
                ticket_syantic = data[2][:3] == 'SYA'
                ticket_davina = data[2][:3] == 'DAV'
                ticket_grafana = data[2][:3] == 'GRA'
                ticket_tablue = data[2][:3] == 'TAB'
                ticket_inap = data[2][:3] == 'INP'
                ticket_ineom = data[2][:3] == 'INM'
                ticket_nacel = data[2][:3] == 'NCL'
                ticket_nadin = data[2][:3] == 'NDN'
                if ticket_syantic is True or ticket_davina is True or ticket_grafana is True or ticket_tablue is True or ticket_inap is True or ticket_ineom is True or ticket_nacel is True or ticket_nadin is True:
                    text += f'├ {ticket} *({ket})* ➞ [{full_name}]({requests})\n'
    except:
        text += 'Tidak ada ticket'
    text += '\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def closed_ticket_c(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'admin'
    if position is True:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET (ADMIN)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_chrono = data[6][:3] == 'CHR'
                ticket_crq = data[6][:3] == 'CRQ'
                ticket_nava = data[6][:3] == 'NAV'
                ticket_traversa = data[6][:3] == 'TVS'
                ticket_lacima = data[6][:3] == 'LCM'
                if ticket_chrono is True or ticket_crq is True or ticket_nava is True or ticket_traversa is True or ticket_lacima is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif*:\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
    elif position is False:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open' and chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_chrono = data[6][:3] == 'CHR'
                ticket_crq = data[6][:3] == 'CRQ'
                ticket_nava = data[6][:3] == 'NAV'
                ticket_traversa = data[6][:3] == 'TVS'
                ticket_lacima = data[6][:3] == 'LCM'
                if ticket_chrono is True or ticket_crq is True or ticket_nava is True or ticket_traversa is True or ticket_lacima is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* anda:\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
def get_closed_ticket_c_user():
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_ticket_user.txt','r')
    data = data.read()
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    data = data.replace("[","").replace("]","").replace("'","").split(', ')
    for data1 in data:
        text += f'├ {data1}\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def get_closed_ticket_c():
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram,ticket,problem_title,problem_summary from production.helpdesk_report where status = 'open'"
    data = client.command(query)
    try:
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            ticket_check = data[2] == 'None'
            if ticket_check is False:
                requests = 'https://t.me/{}'.format(data[0])
                full_name = str(data[1]).title()
                ticket = data[2]
                ket = data[3]
                ticket_chrono = data[2][:3] == 'CHR'
                ticket_crq = data[2][:3] == 'CRQ'
                ticket_nava = data[2][:3] == 'NAV'
                ticket_traversa = data[2][:3] == 'TVS'
                ticket_lacima = data[2][:3] == 'LCM'
                if ticket_chrono is True or ticket_crq is True or ticket_nava is True or ticket_traversa is True or ticket_lacima is True :
                    text += f'├ {ticket} *({ket})* ➞ [{full_name}]({requests})\n'
    except:
        text += 'Tidak ada ticket'
    text += '\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def closed_ticket_a(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'admin'
    if position is True:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET (ADMIN)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_agata = data[6][:3] == 'AGT'
                ticket_amesty = data[6][:3] == 'AMT'
                ticket_eatp = data[6][:3] == 'ETP'
                ticket_etsa = data[6][:3] == 'ETS'
                ticket_ewonder = data[6][:3] == 'EWD'
                ticket_felisa = data[6][:3] == 'FLS'
                ticket_fiola = data[6][:3] == 'FLA'
                ticket_lolita = data[6][:3] == 'LTA'
                ticket_scarlet = data[6][:3] == 'SCL'
                ticket_smartkey = data[6][:3] == 'SMK'
                ticket_tiara = data[6][:3] == 'TRA'
                ticket_tpas = data[6][:3] == 'TPS'
                ticket_tpower = data[6][:3] == 'TPW'
                if ticket_agata is True or ticket_amesty is True or ticket_eatp is True or ticket_etsa is True or ticket_ewonder is True or ticket_felisa is True or ticket_fiola is True or ticket_lolita is True or ticket_scarlet is True or ticket_smartkey is True or ticket_tiara is True or ticket_tpas is True or ticket_tpower is True:
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* :\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
    elif position is False:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open' and chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_agata = data[6][:3] == 'AGT'
                ticket_amesty = data[6][:3] == 'AMT'
                ticket_eatp = data[6][:3] == 'ETP'
                ticket_etsa = data[6][:3] == 'ETS'
                ticket_ewonder = data[6][:3] == 'EWD'
                ticket_felisa = data[6][:3] == 'FLS'
                ticket_fiola = data[6][:3] == 'FLA'
                ticket_lolita = data[6][:3] == 'LTA'
                ticket_scarlet = data[6][:3] == 'SCL'
                ticket_smartkey = data[6][:3] == 'SMK'
                ticket_tiara = data[6][:3] == 'TRA'
                ticket_tpas = data[6][:3] == 'TPS'
                ticket_tpower = data[6][:3] == 'TPW'
                if ticket_agata is True or ticket_amesty is True or ticket_eatp is True or ticket_etsa is True or ticket_ewonder is True or ticket_felisa is True or ticket_fiola is True or ticket_lolita is True or ticket_scarlet is True or ticket_smartkey is True or ticket_tiara is True or ticket_tpas is True or ticket_tpower is True:
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* anda:\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
def get_closed_ticket_a_user():
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_ticket_user.txt','r')
    data = data.read()
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    data = data.replace("[","").replace("]","").replace("'","").split(', ')
    for data1 in data:
        text += f'├ {data1}\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def get_closed_ticket_a():
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram,ticket,problem_title,problem_summary from production.helpdesk_report where status = 'open'"
    data = client.command(query)
    try:
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            ticket_check = data[2] == 'None'
            if ticket_check is False:
                requests = 'https://t.me/{}'.format(data[0])
                full_name = str(data[1]).title()
                ticket = data[2]
                ket = data[3]
                ticket_agata = data[2][:3] == 'AGT'
                ticket_amesty = data[2][:3] == 'AMT'
                ticket_eatp = data[2][:3] == 'ETP'
                ticket_etsa = data[2][:3] == 'ETS'
                ticket_ewonder = data[2][:3] == 'EWD'
                ticket_felisa = data[2][:3] == 'FLS'
                ticket_fiola = data[2][:3] == 'FLA'
                ticket_lolita = data[2][:3] == 'LTA'
                ticket_scarlet = data[2][:3] == 'SCL'
                ticket_smartkey = data[6][:3] == 'SMK'
                ticket_tiara = data[2][:3] == 'TRA'
                ticket_tpas = data[2][:3] == 'TPS'
                ticket_tpower = data[2][:3] == 'TPW'
                if ticket_agata is True or ticket_amesty is True or ticket_eatp is True or ticket_etsa is True or ticket_ewonder is True or ticket_felisa is True or ticket_fiola is True or ticket_lolita is True or ticket_scarlet is True or ticket_smartkey is True or ticket_tiara is True or ticket_tpas is True or ticket_tpower is True:
                    text += f'├ {ticket} *({ket})* ➞ [{full_name}]({requests})\n'
    except:
        text += 'Tidak ada ticket'
    text += '\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def closed_ticket_pm(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'admin'
    if position is True:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET (ADMIN)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_csone = data[6][:3] == 'CSN'
                ticket_evita = data[6][:3] == 'EVT'
                ticket_ipdm = data[6][:3] == 'IPD'
                ticket_ironman = data[6][:3] == 'IRM'
                ticket_smartcare = data[6][:3] == 'SCR'
                ticket_arthemis = data[6][:3] == 'ATM'
                ticket_kalix = data[6][:3] == 'KLX'
                ticket_ookla = data[6][:3] == 'OKL'
                ticket_suropati = data[6][:3] == 'SPT'  
                ticket_zabbix = data[6][:3] == 'ZBX'
                ticket_twamp = data[6][:3] == 'TWP'
                if ticket_csone is True or ticket_evita is True or ticket_ipdm is True or ticket_ironman is True or ticket_smartcare is True or ticket_arthemis is True or ticket_kalix is True or ticket_ookla is True or ticket_suropati is True or ticket_zabbix is True or ticket_twamp is True: 
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* :\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
    elif position is False:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open' and chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_csone = data[6][:3] == 'CSN'
                ticket_evita = data[6][:3] == 'EVT'
                ticket_ipdm = data[6][:3] == 'IPD'
                ticket_ironman = data[6][:3] == 'IRM'
                ticket_smartcare = data[6][:3] == 'SCR'
                ticket_arthemis = data[6][:3] == 'ATM'
                ticket_kalix = data[6][:3] == 'KLX'
                ticket_ookla = data[6][:3] == 'OKL'
                ticket_suropati = data[6][:3] == 'SPT'  
                ticket_zabbix = data[6][:3] == 'ZBX'
                ticket_twamp = data[6][:3] == 'TWP'
                if ticket_csone is True or ticket_evita is True or ticket_ipdm is True or ticket_ironman is True or ticket_smartcare is True or ticket_arthemis is True or ticket_kalix is True or ticket_ookla is True or ticket_suropati is True or ticket_zabbix is True or ticket_twamp is True:
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* anda:\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
def get_closed_ticket_pm_user():
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_ticket_user.txt','r')
    data = data.read()
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    data = data.replace("[","").replace("]","").replace("'","").split(', ')
    for data1 in data:
        text += f'├ {data1}\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def get_closed_ticket_pm():
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'

    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram,ticket,problem_title,problem_summary from production.helpdesk_report where status = 'open'"
    data = client.command(query)
    try:
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            ticket_check = data[2] == 'None'
            if ticket_check is False:
                requests = 'https://t.me/{}'.format(data[0])
                full_name = str(data[1]).title()
                ticket = data[2]
                ket = data[3]
                ticket_covmo = data[2][:3] == 'CVM'
                ticket_csone = data[2][:3] == 'CSN'
                ticket_evita = data[2][:3] == 'EVT'
                ticket_ipdm = data[2][:3] == 'IPD'
                ticket_ironman = data[2][:3] == 'IRM'
                ticket_smartcare = data[2][:3] == 'SCR'
                if ticket_covmo is True or ticket_csone is True or ticket_evita is True or ticket_ipdm is True or ticket_ironman is True or ticket_smartcare is True:
                    text += f'├ {ticket} *({ket})* ➞ [{full_name}]({requests})\n'
    except:
        text += 'Tidak ada ticket'
    text += '\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def closed_ticket_ds(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'admin'
    if position is True:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET (ADMIN)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_kafka = data[6][:3] == 'KFK'
                ticket_ndl = data[6][:3] == 'NDL'
                ticket_ndm = data[6][:3] == 'NDM'
                ticket_oss = data[6][:3] == 'OSS'
                ticket_ixia = data[6][:3] == 'IXA'
                if ticket_kafka is True or ticket_ndl is True or ticket_ndm is True or ticket_oss is True or ticket_ixia is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* :\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
    elif position is False:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open' and chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_kafka = data[6][:3] == 'KFK'
                ticket_ndl = data[6][:3] == 'NDL'
                ticket_ndm = data[6][:3] == 'NDM'
                ticket_oss = data[6][:3] == 'OSS'
                ticket_ixia = data[6][:3] == 'IXA'
                if ticket_kafka is True or ticket_ndl is True or ticket_ndm is True or ticket_oss is True or ticket_ixia is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* :\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
def get_closed_ticket_ds_user():
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_ticket_user.txt','r')
    data = data.read()
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    data = data.replace("[","").replace("]","").replace("'","").split(', ')
    for data1 in data:
        text += f'├ {data1}\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def get_closed_ticket_ds():
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram,ticket,problem_title,problem_summary from production.helpdesk_report where status = 'open'"
    data = client.command(query)
    try:
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            ticket_check = data[2] == 'None'
            if ticket_check is False:
                requests = 'https://t.me/{}'.format(data[0])
                full_name = str(data[1]).title()
                ticket = data[2]
                ket = data[3]
                ticket_kafka = data[2][:3] == 'KFK'
                ticket_ndl = data[2][:3] == 'NDL'
                ticket_ndm = data[2][:3] == 'NDM'
                ticket_oss = data[2][:3] == 'OSS'
                if ticket_kafka is True or ticket_ndl is True or ticket_ndm is True or ticket_oss is True :
                    text += f'├ {ticket} *({ket})* ➞ [{full_name}]({requests})\n'
    except:
        text += 'Tidak ada ticket'
    text += '\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def closed_ticket_ts(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'admin'
    if position is True:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET (ADMIN)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_cts = data[6][:3] == 'CTS'
                ticket_remedy = data[6][:3] == 'RMD'
                ticket_sdm = data[6][:3] == 'SDM'
                if ticket_cts is True or ticket_remedy is True or ticket_sdm is True:
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* :\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
    elif position is False:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open' and chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_cts = data[6][:3] == 'CTS'
                ticket_remedy = data[6][:3] == 'RMD'
                ticket_sdm = data[6][:3] == 'SDM'
                if ticket_cts is True or ticket_remedy is True or ticket_sdm is True:
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* anda:\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
def get_closed_ticket_ts_user():
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_ticket_user.txt','r')
    data = data.read()
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    data = data.replace("[","").replace("]","").replace("'","").split(', ')
    for data1 in data:
        text += f'├ {data1}\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def get_closed_ticket_ts():
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram,ticket,problem_title,problem_summary from production.helpdesk_report where status = 'open'"
    data = client.command(query)
    try:
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            ticket_check = data[2] == 'None'
            if ticket_check is False:
                requests = 'https://t.me/{}'.format(data[0])
                full_name = str(data[1]).title()
                ticket = data[2]
                ket = data[3]
                ticket_cts = data[2][:3] == 'CTS'
                ticket_remedy = data[2][:3] == 'RMD'
                ticket_sdm = data[2][:3] == 'SDM'
                if ticket_cts is True or ticket_remedy is True or ticket_sdm is True:
                    text += f'├ {ticket} *({ket})* ➞ [{full_name}]({requests})\n'
    except:
        text += 'Tidak ada ticket'
    text += '\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def closed_ticket_davp(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'admin'
    if position is True:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET (ADMIN)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_avp = data[6][:3] == 'AVP'
                if ticket_avp is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* :\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
    elif position is False:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open' and chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_avp = data[6][:3] == 'AVP'
                if ticket_avp is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* anda:\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
def get_closed_ticket_davp_user():
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_ticket_user.txt','r')
    data = data.read()
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    data = data.replace("[","").replace("]","").replace("'","").split(', ')
    for data1 in data:
        text += f'├ {data1}\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def get_closed_ticket_davp():
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram,ticket,problem_title,problem_summary from production.helpdesk_report where status = 'open'"
    data = client.command(query)
    try:
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            ticket_check = data[2] == 'None'
            if ticket_check is False:
                requests = 'https://t.me/{}'.format(data[0])
                full_name = str(data[1]).title()
                ticket = data[2]
                ket = data[3]
                ticket_avp = data[2][:3] == 'AVP'
                if ticket_avp is True:
                    text += f'├ {ticket} *({ket})* ➞ [{full_name}]({requests})\n'
    except:
        text += 'Tidak ada ticket'
    text += '\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def closed_ticket_covmo(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'admin'
    if position is True:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET (ADMIN)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_cvm = data[6][:3] == 'CVM'
                if ticket_cvm is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* :\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
    elif position is False:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open' and chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_cvm = data[6][:3] == 'CVM'
                if ticket_cvm is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* anda:\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
def get_closed_ticket_covmo_user():
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_ticket_user.txt','r')
    data = data.read()
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    data = data.replace("[","").replace("]","").replace("'","").split(', ')
    for data1 in data:
        text += f'├ {data1}\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def get_closed_ticket_covmo():
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram,ticket,problem_title,problem_summary from production.helpdesk_report where status = 'open'"
    data = client.command(query)
    try:
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            ticket_check = data[2] == 'None'
            if ticket_check is False:
                requests = 'https://t.me/{}'.format(data[0])
                full_name = str(data[1]).title()
                ticket = data[2]
                ket = data[3]
                ticket_cvm = data[2][:3] == 'CVM'
                if ticket_cvm is True:
                    text += f'├ {ticket} *({ket})* ➞ [{full_name}]({requests})\n'
    except:
        text += 'Tidak ada ticket'
    text += '\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text

def closed_ticket_traffica(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select * from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    data = client.command(query)
    position = data[4] == 'admin'
    if position is True:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET (ADMIN)*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_tfc = data[6][:3] == 'TFC'
                if ticket_tfc is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* :\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
    elif position is False:
        query = update.callback_query
        query.answer()
        query.edit_message_text(text="Anda memilih : *MY TICKET*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select * from production.helpdesk_report where status = 'open' and chatid_telegram = '{chatid_telegram}'"
        data = client.command(query)
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("2023,","2023 ").replace("2024,","2024 ").replace("\\\\n",' ').split('\\n')
        try:
            x = []
            datas = []
            for data in data_list:
                data = str(data).split(', ')
                ticket_tfc = data[6][:3] == 'TFC'
                if ticket_tfc is True :
                    data = f"{data[6]} -> {data[0]}"
                    datas.append([data])
            if datas == []:
                query = update.callback_query
                query.answer()
                query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
                return ConversationHandler.END
            else:
                reply_keyboard = datas
                query = update.callback_query
                query.answer()
                query.message.reply_text('Berikut adalah *Tiket aktif* anda:\nPilih tombol dibawah ini jika tiket closed atau ketik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard= True, selective=True,resize_keyboard=True))
                return CLOSED_ADMIN_TICKET
        except IndexError:
            query = update.callback_query
            query.answer()
            query.message.reply_text(f"Anda tidak memiliki ticket\nKlik /menu")
            return ConversationHandler.END
def get_closed_ticket_traffica_user():
    data = open('/home/dimas/baru/helpdeskbot_v2/data_log/log_ticket_user.txt','r')
    data = data.read()
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    data = data.replace("[","").replace("]","").replace("'","").split(', ')
    for data1 in data:
        text += f'├ {data1}\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text
def get_closed_ticket_traffica():
    text = ''
    text += 'Berikut adalah beberapa daftar *Tiket aktif* :\n'
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram,ticket,problem_title,problem_summary from production.helpdesk_report where status = 'open'"
    data = client.command(query)
    try:
        data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
        for data in data_list:
            data = str(data).split(', ')
            ticket_check = data[2] == 'None'
            if ticket_check is False:
                requests = 'https://t.me/{}'.format(data[0])
                full_name = str(data[1]).title()
                ticket = data[2]
                ket = data[3]
                ticket_cvm = data[2][:3] == 'CVM'
                if ticket_cvm is True:
                    text += f'├ {ticket} *({ket})* ➞ [{full_name}]({requests})\n'
    except:
        text += 'Tidak ada ticket'
    text += '\n'
    text += '\n'
    text += '*Ketik Nomor ticket* jika problem sudah normal\nKlik /cancel untuk membatalkan'
    return text

def closed_ticket_no(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    query.edit_message_text(text="Terima kasih telah akses di *HelpdeskBOT*\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN)
    return ConversationHandler.END
def closed_ticket_yes(update: Update, context: CallbackContext) -> int:
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    username = update.callback_query.from_user.username
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+0
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select ticket from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    ticket = client.command(query)

    #Report
    query = f"ALTER TABLE production.helpdesk_report update close_ticket_date = '{date_time}', status = 'closed' WHERE chatid_telegram = '{chatid_telegram}' or ticket = '{ticket}'"
    client.command(query)

    ##access
    query = f"ALTER TABLE production.helpdesk_bot update channel_chatid = 'None', ticket = 'None', image = 'None',problem_title = 'None',problem_summary = 'None', open_ticket_date = 'None', status = 'None', category = 'None', fcaps = 'None' WHERE chatid_telegram = '{chatid_telegram}'"
    client.command(query)
    query = update.callback_query
    query.answer()
    query.message.reply_text("Proses closed ticket sedang berlangsung...")
    sleep(3)
    query.message.reply_text("✅ Tiket telah closed & dapat buat tiket kembali\nKlik /menu")
    return ConversationHandler.END

def closed_admin_ticket(update: Update, _: CallbackContext) -> None:
    if os.path.exists("/home/dimas/baru/helpdeskbot_v2/data_log/ticket_log.txt"):
        os.remove("/home/dimas/baru/helpdeskbot_v2/data_log/ticket_log.txt")
        sleep(1)
    else:
        print("The file does not exist")
        sleep(1)
    ticket_check = update.message.text.split(" -> ")[0]
    log_bot = open('/home/dimas/baru/helpdeskbot_v2/data_log/ticket_log.txt','a')
    log_bot.write("{}".format(ticket_check))
    log_bot.close()
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select count(*) as `count` from production.helpdesk_report where ticket = '{ticket_check}'"
    check_status = client.command(query)
    check_status = check_status == 0
    if check_status is True:
        update.message.reply_text("Ticket salah atau tidak sesuai",reply_markup=ReplyKeyboardRemove(), parse_mode=telegram.ParseMode.MARKDOWN)
        return ConversationHandler.END
    elif check_status is False:
        update.message.reply_chat_action(action=telegram.ChatAction.TYPING)
        update.message.reply_text(text="Masukkan resolution action :",parse_mode=telegram.ParseMode.MARKDOWN)
        return CLOSED_ADMIN_TICKET_END

def closed_admin_ticket_end(update: Update, _: CallbackContext) -> None:
    data_ticket = open('/home/dimas/baru/helpdeskbot_v2/data_log/ticket_log.txt','r')
    data_ticket = data_ticket.read()
    now = datetime.now()
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    parameter = update.message.text

    update.message.reply_text("Proses closed tiket ...")
    sleep(3)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"ALTER TABLE production.helpdesk_report update resolution_action = '{parameter}', close_ticket_date = '{date_time}', status = 'closed' WHERE ticket = '{data_ticket}'"
    client.command(query)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram,fullname_telegram from production.helpdesk_report where ticket = '{data_ticket}'"
    data = client.command(query)
    requests = 'https://t.me/{}'.format(data[0])
    full_name = str(data[1]).title()
    update.message.reply_text(f"✅ Tiket [{full_name}]({requests}) telah closed\nKlik /menu", parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True,reply_markup=ReplyKeyboardRemove())
    
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select username_telegram, fullname_telegram, channel_chatid, open_ticket_date, close_ticket_date from production.helpdesk_report where ticket = '{data_ticket}'"
    check_ticket = client.command(query)
    data_list = str(check_ticket).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
    x = []
    for data in data_list:
        data = str(data).split(', ')

        open_str = f'{data[3]}, {data[4]}'
        closed_str = f'{data[5]}, {data[6]}'
        # Parsing string menjadi objek datetime
        open_date = datetime.strptime(open_str, "%d-%B-%Y, %H:%M:%S WIB")
        closed_date = datetime.strptime(closed_str, "%d-%B-%Y, %H:%M:%S WIB")
        # Menghitung selisih waktu
        selisih_waktu = closed_date - open_date
        # Mengambil selisih dalam bentuk hari
        day_difference = selisih_waktu
        bot_log.send_message(chat_id=data[2],text=f'✅ Tiket *{data_ticket}* from [{data[1]}]({data[0]}) have been *Closed* with duration → *{day_difference}*',parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
                  
    return ConversationHandler.END
    
def feedback_acc(update: Update, _: CallbackContext) -> None:
    chatid_telegram = update.callback_query.from_user.id
    query = update.callback_query
    query.answer()
    message_id = query.message.message_id+1
    chat_id = update.callback_query.from_user.id
    bot_log.delete_message(chat_id,message_id)
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select position from production.helpdesk_bot where chatid_telegram = '{chatid_telegram}'"
    collection = client.command(query)
    position = collection == 'admin'
    query = update.callback_query
    query.answer()
    if position is True:
        query.edit_message_text(text="Anda memilih : *FEEDBACK USERS*",parse_mode=telegram.ParseMode.MARKDOWN)
        query = f"select count(*) as `count` from production.helpdesk_feedback"
        check_status = client.command(query)
        check_status = check_status == 0
        query = update.callback_query
        query.answer()
        if check_status is True:
            query.message.reply_text(text="Tidak ada Feedback dari user\nKlik /menu",parse_mode=telegram.ParseMode.MARKDOWN)
        elif check_status is False:
            return_text = get_summary_feedback()
            for cmdOUT in splitting(return_text):
                query.message.reply_text(cmdOUT,parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)
        return ConversationHandler.END
    elif position is False:
        query.edit_message_text(text="Anda memilih : *FEEDBACK*",parse_mode=telegram.ParseMode.MARKDOWN)
        query.message.reply_text('Masukkan feedback anda, agar kami dapat meningkatkan performance di *HelpdeskBOT*\n klik /cancel untuk membatalkan',parse_mode=telegram.ParseMode.MARKDOWN)
        return FEEDBACK

def feedback(update: Update, _: CallbackContext) -> None:
    now = datetime.now() # current date and time
    date_time = now.strftime("%d-%B-%Y, %H:%M:%S WIB")
    full_name = update.message.from_user.full_name
    username = update.message.from_user.username
    chatid = update.message.from_user.id
    text = update.message.text
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"INSERT INTO production.helpdesk_feedback select '{date_time}','{full_name}','{username}','{chatid}','{text}'"
    client.command(query)
    update.message.reply_text('✅ Terima kasih telah mengakses dan memberikan feedback di HelpdeskBOT, kami akan mendikusikan terkait feedback anda. Terima kasih\nKlik /menu')
    return ConversationHandler.END
def get_summary_feedback():
    client = clickhouse_connect.get_client(database="production",host='10.54.18.55', port=8123, username='app_aam_dashboard', password='AAMDashboard#2024')
    query = f"select fullname_telegram,username_telegram,feedback,date from production.helpdesk_feedback"
    data = client.command(query)
    data_list = str(data).replace("[","").replace("]","").replace("'","").replace("\\\\n",' ').split('\\n')
    text = ''
    text += '🗒 *Feedback dari User :*'
    text += '\n'
    for data in data_list:
        data = str(data).split(', ')
        fullname_telegram = data[0]
        date = str(data[3]).split(',')[0]
        username = 'https://t.me/{}'.format(data[1])
        feedback = data[2]
        text += f'({date}) - [{fullname_telegram}]({username}) - {feedback}'
        text += '\n'
    text += '\n'
    text += 'Klik /menu'
    return text

def main() -> None:
    updater = Updater("128548200:AAE9dDr0O0h1lPJzk1LVlcKh6IZ40vi8jH4")
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTRATION: [MessageHandler(Filters.text & ~Filters.command, registration)],
            REG_USER_MANUAL: [MessageHandler(Filters.text & ~Filters.command, reg_user_manual)],
            ConversationHandler.TIMEOUT: [MessageHandler(Filters.text | Filters.command, timeout)]},
        fallbacks=[CommandHandler('cancel', cancel1)],conversation_timeout=60)
    dispatcher.add_handler(conv_handler)

    #Inline Button
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('menu', menu)],
        states={
            MENU: [
            CallbackQueryHandler(m1_fm, pattern='^' + str(M1_FM) + '$'),
            CallbackQueryHandler(m2_c, pattern='^' + str(M2_C) + '$'),
            CallbackQueryHandler(m3_a, pattern='^' + str(M3_A) + '$'),
            CallbackQueryHandler(m4_pm, pattern='^' + str(M4_PM) + '$'),
            CallbackQueryHandler(m5_sm, pattern='^' + str(M5_SM) + '$'),
            CallbackQueryHandler(m6_ds, pattern='^' + str(M6_DS) + '$'),
            CallbackQueryHandler(m7_ts, pattern='^' + str(M7_TS) + '$'),
            CallbackQueryHandler(m8_davp, pattern='^' + str(M8_DAVP) + '$'),
            CallbackQueryHandler(m9_covmo, pattern='^' + str(M9_COVMO) + '$'),
            CallbackQueryHandler(m10_traffica, pattern='^' + str(M10_TRAFFICA) + '$'),
#BATAL
            CallbackQueryHandler(batal, pattern='^' + str(BATAL) + '$'),
            CallbackQueryHandler(batal_ineom, pattern='^' + str(BATAL_NICE) + '$'),
            CallbackQueryHandler(batal_chrono, pattern='^' + str(BATAL_CHRONO) + '$'),
            CallbackQueryHandler(batal_fm, pattern='^' + str(BATAL_FM) + '$'),
            CallbackQueryHandler(batal_c, pattern='^' + str(BATAL_C) + '$'),
            CallbackQueryHandler(batal_a, pattern='^' + str(BATAL_A) + '$'),
            CallbackQueryHandler(batal_pm, pattern='^' + str(BATAL_PM) + '$'),
            CallbackQueryHandler(batal_ds, pattern='^' + str(BATAL_DS) + '$'),
            CallbackQueryHandler(batal_ts, pattern='^' + str(BATAL_TS) + '$'),
            CallbackQueryHandler(batal_davp, pattern='^' + str(BATAL_DAVP) + '$'),
            CallbackQueryHandler(batal_home, pattern='^' + str(BATAL_HOME) + '$'),
            CallbackQueryHandler(menu_utama, pattern='^' + str(MENU_UTAMA) + '$'),
            CallbackQueryHandler(menu_help, pattern='^' + str(MENU_HELP) + '$'),
#BREAKDOWN 1
            CallbackQueryHandler(m1_fm_dash, pattern='^' + str(M1_FM_DASH) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_dash_sya, pattern='^' + str(M1_FM_DASH_SYA) + '$'),
            CallbackQueryHandler(m1_fm_dash_sya_create, pattern='^' + str(M1_FM_DASH_SYA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_sya, pattern='^' + str(ASK_SYA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_dash_dav, pattern='^' + str(M1_FM_DASH_DAV) + '$'),
            CallbackQueryHandler(m1_fm_dash_dav_create, pattern='^' + str(M1_FM_DASH_DAV_CREATE_1) + '$'),
            CallbackQueryHandler(ask_dav, pattern='^' + str(ASK_DAV) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_dash_gra, pattern='^' + str(M1_FM_DASH_GRA) + '$'),
            CallbackQueryHandler(m1_fm_dash_gra_create, pattern='^' + str(M1_FM_DASH_GRA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_gra, pattern='^' + str(ASK_GRA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_dash_tab, pattern='^' + str(M1_FM_DASH_TAB) + '$'),
            CallbackQueryHandler(m1_fm_dash_tab_create, pattern='^' + str(M1_FM_DASH_TAB_CREATE_1) + '$'),
            CallbackQueryHandler(ask_tab, pattern='^' + str(ASK_TAB) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_dash_ncl, pattern='^' + str(M1_FM_DASH_NCL) + '$'),
            CallbackQueryHandler(m1_fm_dash_ncl_create, pattern='^' + str(M1_FM_DASH_NCL_CREATE_1) + '$'),
            CallbackQueryHandler(ask_ncl, pattern='^' + str(ASK_NCL) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_dash_ndn, pattern='^' + str(M1_FM_DASH_NDN) + '$'),
            CallbackQueryHandler(m1_fm_dash_ndn_create, pattern='^' + str(M1_FM_DASH_NDN_CREATE_1) + '$'),
            CallbackQueryHandler(ask_ndn, pattern='^' + str(ASK_NDN) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_inap, pattern='^' + str(M1_FM_INAP) + '$'),
            CallbackQueryHandler(m1_fm_inap_create, pattern='^' + str(M1_FM_INAP_CREATE_1) + '$'),
            CallbackQueryHandler(m1_fm_inap_create, pattern='^' + str(M1_FM_INAP_CREATE_2) + '$'),
            CallbackQueryHandler(m1_fm_inap_create, pattern='^' + str(M1_FM_INAP_CREATE_3) + '$'),
            CallbackQueryHandler(m1_fm_inap_create, pattern='^' + str(M1_FM_INAP_CREATE_4) + '$'),
            CallbackQueryHandler(ask_inap, pattern='^' + str(ASK_INAP) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_nice_create, pattern='^' + str(M1_FM_NICE_CREATE) + '$'),
            CallbackQueryHandler(m1_fm_nice_other, pattern='^' + str(M1_FM_NICE_OTHER) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_1) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_2) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_3) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_4) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_5) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_1A) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_1B) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_1C) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_2A) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_2B) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_2C) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_3A) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_3B) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_3C) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_3D) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_4A) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_4B) + '$'),
            CallbackQueryHandler(m1_fm_nice_other_create_ticket, pattern='^' + str(M1_FM_NICE_OTHER_CREATE_4C) + '$'),
            CallbackQueryHandler(ask_nice, pattern='^' + str(ASK_NICE) + '$'),
            CallbackQueryHandler(m1_fm_nice, pattern='^' + str(M1_FM_NICE) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka, pattern='^' + str(M1_FM_NICE_KA) + '$'),
            #----
            CallbackQueryHandler(m1_fm_nice_ka_kl, pattern='^' + str(M1_FM_NICE_KA_KL) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_kl_not, pattern='^' + str(M1_FM_NICE_KA_KL_NOT) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_kl_forget, pattern='^' + str(M1_FM_NICE_KA_KL_FORGET) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_kl_change, pattern='^' + str(M1_FM_NICE_KA_KL_CHANGE) + '$'),
            #----
            CallbackQueryHandler(m1_fm_nice_ka_ka, pattern='^' + str(M1_FM_NICE_KA_KA) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_ka_nda, pattern='^' + str(M1_FM_NICE_KA_KA_NDA) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_ka_new, pattern='^' + str(M1_FM_NICE_KA_KA_NEW) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_ka_two, pattern='^' + str(M1_FM_NICE_KA_KA_TWO) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_ka_lost, pattern='^' + str(M1_FM_NICE_KA_KA_LOST) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_ka_role, pattern='^' + str(M1_FM_NICE_KA_KA_ROLE) + '$'),
            #----
            CallbackQueryHandler(m1_fm_nice_ka_va, pattern='^' + str(M1_FM_NICE_KA_VA) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_va_acc, pattern='^' + str(M1_FM_NICE_KA_VA_ACC) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_va_eml, pattern='^' + str(M1_FM_NICE_KA_VA_EML) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_va_prm, pattern='^' + str(M1_FM_NICE_KA_VA_PRM) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_va_pdf, pattern='^' + str(M1_FM_NICE_KA_VA_PDF) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_va_tsa, pattern='^' + str(M1_FM_NICE_KA_VA_TSA) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_va_apv, pattern='^' + str(M1_FM_NICE_KA_VA_APV) + '$'),
            #----
            CallbackQueryHandler(m1_fm_nice_ka_pa, pattern='^' + str(M1_FM_NICE_KA_PA) + '$'),
            CallbackQueryHandler(m1_fm_nice_ka_pa_exp, pattern='^' + str(M1_FM_NICE_KA_PA_EXP) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_ossera, pattern='^' + str(M1_FM_OSSERA) + '$'),
            CallbackQueryHandler(m1_fm_ossera_create, pattern='^' + str(M1_FM_OSSERA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_ossera, pattern='^' + str(ASK_OSSERA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m1_fm_pmsossera, pattern='^' + str(M1_FM_PSMOSSERA) + '$'),
            CallbackQueryHandler(m1_fm_pmsossera_create, pattern='^' + str(M1_FM_PMSOSSERA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_pmsossera, pattern='^' + str(ASK_PMSOSSERA) + '$'),
#BREAKDOWN 2
            CallbackQueryHandler(m2_c_chrono, pattern='^' + str(M2_C_CHRONO) + '$'),
            CallbackQueryHandler(m2_c_chrono_check, pattern='^' + str(M2_C_CHRONO_CHECK) + '$'),
            CallbackQueryHandler(m2_c_chrono_ticket, pattern='^' + str(M2_C_CHRONO_TICKET) + '$'),
            CallbackQueryHandler(m2_c_chrono_ticket_create, pattern='^' + str(M2_C_CHRONO_TICKET_CREATE_1) + '$'),
            CallbackQueryHandler(m2_c_chrono_ticket_create, pattern='^' + str(M2_C_CHRONO_TICKET_CREATE_2) + '$'),
            CallbackQueryHandler(m2_c_chrono_ticket_create, pattern='^' + str(M2_C_CHRONO_TICKET_CREATE_3) + '$'),
            CallbackQueryHandler(m2_c_chrono_ticket_create, pattern='^' + str(M2_C_CHRONO_TICKET_CREATE_4) + '$'),
            CallbackQueryHandler(m2_c_chrono_ticket_create, pattern='^' + str(M2_C_CHRONO_TICKET_CREATE_5) + '$'),
            CallbackQueryHandler(ask_chr, pattern='^' + str(ASK_CHR) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m2_c_crq, pattern='^' + str(M2_C_CRQ) + '$'),
            CallbackQueryHandler(m2_c_crq_create, pattern='^' + str(M2_C_CRQ_CREATE_1) + '$'),
            CallbackQueryHandler(ask_crq, pattern='^' + str(ASK_CRQ) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m2_c_icam, pattern='^' + str(M2_C_ICAM) + '$'),
            CallbackQueryHandler(m2_c_icam_create, pattern='^' + str(M2_C_ICAM_CREATE_1) + '$'),
            CallbackQueryHandler(m2_c_icam_create, pattern='^' + str(M2_C_ICAM_CREATE_2) + '$'),
            CallbackQueryHandler(m2_c_icam_create, pattern='^' + str(M2_C_ICAM_CREATE_3) + '$'),
            CallbackQueryHandler(m2_c_icam_create, pattern='^' + str(M2_C_ICAM_CREATE_4) + '$'),
            CallbackQueryHandler(m2_c_icam_create, pattern='^' + str(M2_C_ICAM_CREATE_5) + '$'),
            CallbackQueryHandler(ask_icam, pattern='^' + str(ASK_ICAM) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m2_c_lacima, pattern='^' + str(M2_C_LACIMA) + '$'),
            CallbackQueryHandler(m2_c_lacima_create, pattern='^' + str(M2_C_LACIMA_CREATE_1) + '$'),
            CallbackQueryHandler(m2_c_lacima_create, pattern='^' + str(M2_C_LACIMA_CREATE_2) + '$'),
            CallbackQueryHandler(m2_c_lacima_create, pattern='^' + str(M2_C_LACIMA_CREATE_3) + '$'),
            CallbackQueryHandler(m2_c_lacima_create, pattern='^' + str(M2_C_LACIMA_CREATE_4) + '$'),
            CallbackQueryHandler(m2_c_lacima_create, pattern='^' + str(M2_C_LACIMA_CREATE_5) + '$'),
            CallbackQueryHandler(ask_lacima, pattern='^' + str(ASK_LACIMA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m2_c_nava, pattern='^' + str(M2_C_NAVA) + '$'),
            CallbackQueryHandler(m2_c_nava_create, pattern='^' + str(M2_C_NAVA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_nava, pattern='^' + str(ASK_NAVA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m2_c_traversa, pattern='^' + str(M2_C_TRAVERSA) + '$'),
            CallbackQueryHandler(m2_c_traversa_create, pattern='^' + str(M2_C_TRAVERSA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_traversa, pattern='^' + str(ASK_TRAVERSA) + '$'),
            #BREAKDOWN CLOSE
#BREAKDOWN 3
            CallbackQueryHandler(m3_a_agata, pattern='^' + str(M3_A_AGATA) + '$'),
            CallbackQueryHandler(m3_a_agata_create, pattern='^' + str(M3_A_AGATA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_agt, pattern='^' + str(ASK_AGT) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_amesty_create, pattern='^' + str(M3_A_AMT_CREATE) + '$'),
            CallbackQueryHandler(m3_a_amt_other, pattern='^' + str(M3_A_AMT_OTHER) + '$'),
            CallbackQueryHandler(m3_a_amesty_other_create, pattern='^' + str(M3_A_AMT_OTHER_CREATE_1) + '$'),
            CallbackQueryHandler(m3_a_amesty_other_create, pattern='^' + str(M3_A_AMT_OTHER_CREATE_2) + '$'),
            CallbackQueryHandler(ask_amt, pattern='^' + str(ASK_AMT) + '$'),
            ##
            CallbackQueryHandler(m3_a_amesty, pattern='^' + str(M3_A_AMT) + '$'),
            CallbackQueryHandler(m3_a_amt_ttc, pattern='^' + str(M3_A_AMT_TTC) + '$'),
            CallbackQueryHandler(m3_a_amt_ttc_web, pattern='^' + str(M3_A_AMT_TTC_WEB) + '$'),
            CallbackQueryHandler(m3_a_amt_ttc_web_s, pattern='^' + str(M3_A_AMT_TTC_WEB_S) + '$'),
            CallbackQueryHandler(m3_a_amt_ttc_web_c, pattern='^' + str(M3_A_AMT_TTC_WEB_C) + '$'),
            CallbackQueryHandler(m3_a_amt_ttc_mbl, pattern='^' + str(M3_A_AMT_TTC_MBL) + '$'),
            CallbackQueryHandler(m3_a_amt_ttc_mbl_t, pattern='^' + str(M3_A_AMT_TTC_MBL_T) + '$'),
            CallbackQueryHandler(m3_a_amt_ttc_mbl_cf, pattern='^' + str(M3_A_AMT_TTC_MBL_CF) + '$'),
            CallbackQueryHandler(m3_a_amt_ttc_mbl_ct, pattern='^' + str(M3_A_AMT_TTC_MBL_CT) + '$'),
            ##
            CallbackQueryHandler(m3_a_amt_dst, pattern='^' + str(M3_A_AMT_DST) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_ttc, pattern='^' + str(M3_A_AMT_DST_TTC) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_ttc_n, pattern='^' + str(M3_A_AMT_DST_TTC_N) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_ttc_t, pattern='^' + str(M3_A_AMT_DST_TTC_T) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_ttc_f, pattern='^' + str(M3_A_AMT_DST_TTC_F) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_ttc_c, pattern='^' + str(M3_A_AMT_DST_TTC_C) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_ttc_d, pattern='^' + str(M3_A_AMT_DST_TTC_D) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_non, pattern='^' + str(M3_A_AMT_DST_NON) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_non_n, pattern='^' + str(M3_A_AMT_DST_NON_N) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_non_t, pattern='^' + str(M3_A_AMT_DST_NON_T) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_non_f, pattern='^' + str(M3_A_AMT_DST_NON_F) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_non_no, pattern='^' + str(M3_A_AMT_DST_NON_NO) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_non_d, pattern='^' + str(M3_A_AMT_DST_NON_D) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_lps, pattern='^' + str(M3_A_AMT_DST_LPS) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_lps_n, pattern='^' + str(M3_A_AMT_DST_LPS_N) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_lps_t, pattern='^' + str(M3_A_AMT_DST_LPS_T) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_lps_f, pattern='^' + str(M3_A_AMT_DST_LPS_F) + '$'),
            CallbackQueryHandler(m3_a_amt_dst_lps_d, pattern='^' + str(M3_A_AMT_DST_LPS_D) + '$'),
            ##
            CallbackQueryHandler(m3_a_amt_na, pattern='^' + str(M3_A_AMT_NA) + '$'),
            CallbackQueryHandler(m3_a_amt_na_mbl, pattern='^' + str(M3_A_AMT_NA_MBL) + '$'),
            CallbackQueryHandler(m3_a_amt_na_apv, pattern='^' + str(M3_A_AMT_NA_APV) + '$'),
            ##
            CallbackQueryHandler(m3_a_amt_cc, pattern='^' + str(M3_A_AMT_CC) + '$'),
            CallbackQueryHandler(m3_a_amt_cc_mbl, pattern='^' + str(M3_A_AMT_CC_MBL) + '$'),
            CallbackQueryHandler(m3_a_amt_cc_apv, pattern='^' + str(M3_A_AMT_CC_APV) + '$'),
            ##
            CallbackQueryHandler(m3_a_amt_t, pattern='^' + str(M3_A_AMT_T) + '$'),
            CallbackQueryHandler(m3_a_amt_t_mbl, pattern='^' + str(M3_A_AMT_T_MBL) + '$'),
            CallbackQueryHandler(m3_a_amt_t_apv, pattern='^' + str(M3_A_AMT_T_APV) + '$'),
            ##
            CallbackQueryHandler(m3_a_amt_v, pattern='^' + str(M3_A_AMT_V) + '$'),
            CallbackQueryHandler(m3_a_amt_v_mbl, pattern='^' + str(M3_A_AMT_V_MBL) + '$'),
            CallbackQueryHandler(m3_a_amt_v_apv, pattern='^' + str(M3_A_AMT_V_APV) + '$'),
            ##
            CallbackQueryHandler(m3_a_amt_dsm, pattern='^' + str(M3_A_AMT_DSM) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_ttc, pattern='^' + str(M3_A_AMT_DSM_TTC) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_ttc_ot, pattern='^' + str(M3_A_AMT_DSM_TTC_OT) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_ttc_sa, pattern='^' + str(M3_A_AMT_DSM_TTC_SA) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_ttc_ff, pattern='^' + str(M3_A_AMT_DSM_TTC_FF) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_ttc_ar, pattern='^' + str(M3_A_AMT_DSM_TTC_AR) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_non, pattern='^' + str(M3_A_AMT_DSM_NON) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_non_ot, pattern='^' + str(M3_A_AMT_DSM_NON_OT) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_non_pna, pattern='^' + str(M3_A_AMT_DSM_NON_PNA) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_non_sa, pattern='^' + str(M3_A_AMT_DSM_NON_SA) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_non_ff, pattern='^' + str(M3_A_AMT_DSM_NON_FF) + '$'),
            CallbackQueryHandler(m3_a_amt_dsm_non_ar, pattern='^' + str(M3_A_AMT_DSM_NON_AR) + '$'),
            ##
            CallbackQueryHandler(m3_a_amt_m, pattern='^' + str(M3_A_AMT_M) + '$'),
            CallbackQueryHandler(m3_a_amt_m_ttc, pattern='^' + str(M3_A_AMT_M_TTC) + '$'),
            CallbackQueryHandler(m3_a_amt_m_ttc_ad, pattern='^' + str(M3_A_AMT_M_TTC_AD) + '$'),
            CallbackQueryHandler(m3_a_amt_m_ttc_a, pattern='^' + str(M3_A_AMT_M_TTC_A) + '$'),
            CallbackQueryHandler(m3_a_amt_m_ttc_ai, pattern='^' + str(M3_A_AMT_M_TTC_AI) + '$'),
            CallbackQueryHandler(m3_a_amt_m_wh, pattern='^' + str(M3_A_AMT_M_WH) + '$'),
            CallbackQueryHandler(m3_a_amt_m_wh_ad, pattern='^' + str(M3_A_AMT_M_WH_AD) + '$'),
            CallbackQueryHandler(m3_a_amt_m_wh_a, pattern='^' + str(M3_A_AMT_M_WH_A) + '$'),
            CallbackQueryHandler(m3_a_amt_m_wh_ws, pattern='^' + str(M3_A_AMT_M_WH_WS) + '$'),
            ##
            CallbackQueryHandler(m3_a_amt_acr, pattern='^' + str(M3_A_AMT_ACR) + '$'),
            CallbackQueryHandler(m3_a_amt_acr_mbl, pattern='^' + str(M3_A_AMT_ACR_MBL) + '$'),
            ##
            
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_dvc, pattern='^' + str(M3_A_DVC) + '$'),
            CallbackQueryHandler(m3_a_dvc_create, pattern='^' + str(M3_A_DVC_CREATE_1) + '$'),
            CallbackQueryHandler(ask_dvc, pattern='^' + str(ASK_DVC) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_eatp_create, pattern='^' + str(M3_A_EATP_CREATE) + '$'),
            CallbackQueryHandler(m3_a_eatp_other, pattern='^' + str(M3_A_EATP_OTHER) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create, pattern='^' + str(M3_A_EATP_OTHER_CREATE_1) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create, pattern='^' + str(M3_A_EATP_OTHER_CREATE_2) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create, pattern='^' + str(M3_A_EATP_OTHER_CREATE_3) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create, pattern='^' + str(M3_A_EATP_OTHER_CREATE_4) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create, pattern='^' + str(M3_A_EATP_OTHER_CREATE_5) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_1A) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_1B) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_1C) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_2A) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_2B) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_2C) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_3A) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_3B) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_3C) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_4A) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_4B) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_4C) + '$'),
            CallbackQueryHandler(m3_a_eatp_other_create_ticket, pattern='^' + str(M3_A_EATP_OTHER_CREATE_4D) + '$'),
            CallbackQueryHandler(ask_eatp, pattern='^' + str(ASK_EATP) + '$'),
            CallbackQueryHandler(m3_a_eatp, pattern='^' + str(M3_A_EATP) + '$'),
            CallbackQueryHandler(m3_a_eatp_pr, pattern='^' + str(M3_A_EATP_PR) + '$'),
            CallbackQueryHandler(m3_a_eatp_pr_web, pattern='^' + str(M3_A_EATP_PR_WEB) + '$'),
            CallbackQueryHandler(m3_a_eatp_pr_mbl, pattern='^' + str(M3_A_EATP_PR_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_eatp_ctr, pattern='^' + str(M3_A_EATP_CTR) + '$'),
            CallbackQueryHandler(m3_a_eatp_ctr_web, pattern='^' + str(M3_A_EATP_CTR_WEB) + '$'),
            CallbackQueryHandler(m3_a_eatp_ctr_mbl, pattern='^' + str(M3_A_EATP_CTR_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_eatp_at, pattern='^' + str(M3_A_EATP_AT) + '$'),
            CallbackQueryHandler(m3_a_eatp_at_cios, pattern='^' + str(M3_A_EATP_AT_CIOS) + '$'),
            CallbackQueryHandler(m3_a_eatp_at_fdmi, pattern='^' + str(M3_A_EATP_AT_FDMI) + '$'),
            CallbackQueryHandler(m3_a_eatp_at_fdf, pattern='^' + str(M3_A_EATP_AT_FDF) + '$'),
            CallbackQueryHandler(m3_a_eatp_at_cts, pattern='^' + str(M3_A_EATP_AT_CTS) + '$'),
            ##
            CallbackQueryHandler(m3_a_eatp_am, pattern='^' + str(M3_A_EATP_AM) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_sts, pattern='^' + str(M3_A_EATP_AM_STS) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_sts_ctm, pattern='^' + str(M3_A_EATP_AM_STS_CTM) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_sts_wtd, pattern='^' + str(M3_A_EATP_AM_STS_WTD) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_sts_wti, pattern='^' + str(M3_A_EATP_AM_STS_WTI) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_sts_cts, pattern='^' + str(M3_A_EATP_AM_STS_CTS) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_sts_at, pattern='^' + str(M3_A_EATP_AM_STS_AT) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_stw, pattern='^' + str(M3_A_EATP_AM_STW) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_stw_web, pattern='^' + str(M3_A_EATP_AM_STW_WEB) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_stw_mbl, pattern='^' + str(M3_A_EATP_AM_STW_MBL) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_stw_tbl, pattern='^' + str(M3_A_EATP_AM_STW_TBL) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_wts, pattern='^' + str(M3_A_EATP_AM_WTS) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_wts_web, pattern='^' + str(M3_A_EATP_AM_WTS_WEB) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_wts_tbl, pattern='^' + str(M3_A_EATP_AM_WTS_TBL) + '$'),
            CallbackQueryHandler(m3_a_eatp_am_wts_mbl, pattern='^' + str(M3_A_EATP_AM_WTS_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_eatp_ati, pattern='^' + str(M3_A_EATP_ATI) + '$'),
            CallbackQueryHandler(m3_a_eatp_ati_c, pattern='^' + str(M3_A_EATP_ATI_C) + '$'),
            CallbackQueryHandler(m3_a_eatp_ati_w, pattern='^' + str(M3_A_EATP_ATI_W) + '$'),
            ##
            CallbackQueryHandler(m3_a_eatp_rab, pattern='^' + str(M3_A_EATP_RAB) + '$'),
            CallbackQueryHandler(m3_a_eatp_rab_c, pattern='^' + str(M3_A_EATP_RAB_C) + '$'),
            CallbackQueryHandler(m3_a_eatp_rab_a, pattern='^' + str(M3_A_EATP_RAB_A) + '$'),
            CallbackQueryHandler(m3_a_eatp_rab_r, pattern='^' + str(M3_A_EATP_RAB_R) + '$'),
            ##
            CallbackQueryHandler(m3_a_eatp_aat, pattern='^' + str(M3_A_EATP_AAT) + '$'),
            CallbackQueryHandler(m3_a_eatp_aat_bv, pattern='^' + str(M3_A_EATP_AAT_BV) + '$'),
            CallbackQueryHandler(m3_a_eatp_aat_bc, pattern='^' + str(M3_A_EATP_AAT_BC) + '$'),
            ##
            
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_etsa_create, pattern='^' + str(M3_A_ETSA_CREATE) + '$'),
            CallbackQueryHandler(m3_a_etsa_other, pattern='^' + str(M3_A_ETSA_OTHER) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_1) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_2) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_3) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_4) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_5) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_1A) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_1B) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_2A) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_2B) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_2C) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_3A) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_3B) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_3C) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_4A) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_4B) + '$'),
            CallbackQueryHandler(m3_a_etsa_other_create_ticket, pattern='^' + str(M3_A_ETSA_OTHER_CREATE_4C) + '$'),
            CallbackQueryHandler(ask_etsa, pattern='^' + str(ASK_ETSA) + '$'),
            CallbackQueryHandler(m3_a_etsa, pattern='^' + str(M3_A_ETSA) + '$'),
            CallbackQueryHandler(m3_a_etsa_d, pattern='^' + str(M3_A_ETSA_D) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_sp, pattern='^' + str(M3_A_ETSA_SP) + '$'),
            CallbackQueryHandler(m3_a_etsa_sp_web, pattern='^' + str(M3_A_ETSA_S_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_sp_mbl, pattern='^' + str(M3_A_ETSA_S_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_c, pattern='^' + str(M3_A_ETSA_C) + '$'),
            CallbackQueryHandler(m3_a_etsa_c_web, pattern='^' + str(M3_A_ETSA_C_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_c_mbl, pattern='^' + str(M3_A_ETSA_C_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_o, pattern='^' + str(M3_A_ETSA_O) + '$'),
            CallbackQueryHandler(m3_a_etsa_o_web, pattern='^' + str(M3_A_ETSA_O_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_o_mbl, pattern='^' + str(M3_A_ETSA_O_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_ms, pattern='^' + str(M3_A_ETSA_MS) + '$'),
            CallbackQueryHandler(m3_a_etsa_ms_web, pattern='^' + str(M3_A_ETSA_MS_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_ms_mbl, pattern='^' + str(M3_A_ETSA_MS_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_r, pattern='^' + str(M3_A_ETSA_R) + '$'),
            CallbackQueryHandler(m3_a_etsa_r_web, pattern='^' + str(M3_A_ETSA_R_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_r_mbl, pattern='^' + str(M3_A_ETSA_R_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_s, pattern='^' + str(M3_A_ETSA_S) + '$'),
            CallbackQueryHandler(m3_a_etsa_s_web, pattern='^' + str(M3_A_ETSA_S_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_s_mbl, pattern='^' + str(M3_A_ETSA_S_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_pm, pattern='^' + str(M3_A_ETSA_PM) + '$'),
            CallbackQueryHandler(m3_a_etsa_pm_web, pattern='^' + str(M3_A_ETSA_PM_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_pm_mbl, pattern='^' + str(M3_A_ETSA_PM_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_rm, pattern='^' + str(M3_A_ETSA_RM) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_std, pattern='^' + str(M3_A_ETSA_RM_STD) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_std_ct, pattern='^' + str(M3_A_ETSA_RM_STD_CT) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_std_w, pattern='^' + str(M3_A_ETSA_RM_STD_W) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_std_a, pattern='^' + str(M3_A_ETSA_RM_STD_A) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_std_wt, pattern='^' + str(M3_A_ETSA_RM_STD_WT) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_dtl, pattern='^' + str(M3_A_ETSA_RM_DTL) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_dtl_c, pattern='^' + str(M3_A_ETSA_RM_DTL_C) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_dtl_w, pattern='^' + str(M3_A_ETSA_RM_DTL_W) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_rm_dts, pattern='^' + str(M3_A_ETSA_RM_DTS) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_dts_c, pattern='^' + str(M3_A_ETSA_RM_DTS_C) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_dts_w, pattern='^' + str(M3_A_ETSA_RM_DTS_W) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_dts_wt, pattern='^' + str(M3_A_ETSA_RM_DTS_WT) + '$'),
            CallbackQueryHandler(m3_a_etsa_rm_dts_a, pattern='^' + str(M3_A_ETSA_RM_DTS_A) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_mgv, pattern='^' + str(M3_A_ETSA_MGV) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_sr, pattern='^' + str(M3_A_ETSA_MGV_SR) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_sr_web, pattern='^' + str(M3_A_ETSA_MGV_SR_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_sr_mbl, pattern='^' + str(M3_A_ETSA_MGV_SR_MBL) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_c, pattern='^' + str(M3_A_ETSA_MGV_C) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_c_web, pattern='^' + str(M3_A_ETSA_MGV_C_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_c_mbl, pattern='^' + str(M3_A_ETSA_MGV_C_MBL) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_o, pattern='^' + str(M3_A_ETSA_MGV_O) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_o_web, pattern='^' + str(M3_A_ETSA_MGV_O_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_o_mbl, pattern='^' + str(M3_A_ETSA_MGV_O_MBL) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_s, pattern='^' + str(M3_A_ETSA_MGV_S) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_s_web, pattern='^' + str(M3_A_ETSA_MGV_S_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_s_mbl, pattern='^' + str(M3_A_ETSA_MGV_S_MBL) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_pm, pattern='^' + str(M3_A_ETSA_MGV_PM) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_pm_web, pattern='^' + str(M3_A_ETSA_MGV_PM_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_pm_mbl, pattern='^' + str(M3_A_ETSA_MGV_PM_MBL) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_su, pattern='^' + str(M3_A_ETSA_MGV_SU) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_su_web, pattern='^' + str(M3_A_ETSA_MGV_SU_WEB) + '$'),
            CallbackQueryHandler(m3_a_etsa_mgv_su_mbl, pattern='^' + str(M3_A_ETSA_MGV_SU_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_etsa_f, pattern='^' + str(M3_A_ETSA_F) + '$'),
            CallbackQueryHandler(m3_a_etsa_f_s, pattern='^' + str(M3_A_ETSA_F_S) + '$'),
            CallbackQueryHandler(m3_a_etsa_f_a, pattern='^' + str(M3_A_ETSA_F_A) + '$'),
            CallbackQueryHandler(m3_a_etsa_f_b, pattern='^' + str(M3_A_ETSA_F_B) + '$'),
            ##
            
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_ewonder_create, pattern='^' + str(M3_A_EWONDER_CREATE) + '$'),
            CallbackQueryHandler(m3_a_ewonder_other_create, pattern='^' + str(M3_A_EWONDER_OTHER_CREATE_1) + '$'),
            CallbackQueryHandler(m3_a_ewonder_other_create, pattern='^' + str(M3_A_EWONDER_OTHER_CREATE_2) + '$'),
            CallbackQueryHandler(m3_a_ewonder_other_create, pattern='^' + str(M3_A_EWONDER_OTHER_CREATE_3) + '$'),
            CallbackQueryHandler(ask_ewonder, pattern='^' + str(ASK_EWONDER) + '$'),
            CallbackQueryHandler(m3_a_ewonder, pattern='^' + str(M3_A_EWONDER) + '$'),
            CallbackQueryHandler(m3_a_ewonder_al, pattern='^' + str(M3_A_EWONDER_AL) + '$'),
            ##
            CallbackQueryHandler(m3_a_ewonder_w, pattern='^' + str(M3_A_EWONDER_W) + '$'),
            CallbackQueryHandler(m3_a_ewonder_w_adm, pattern='^' + str(M3_A_EWONDER_W_ADM) + '$'),
            CallbackQueryHandler(m3_a_ewonder_w_apv, pattern='^' + str(M3_A_EWONDER_W_APV) + '$'),
            CallbackQueryHandler(m3_a_ewonder_w_v, pattern='^' + str(M3_A_EWONDER_W_V) + '$'),
            CallbackQueryHandler(m3_a_ewonder_w_wp, pattern='^' + str(M3_A_EWONDER_W_WP) + '$'),
            CallbackQueryHandler(m3_a_ewonder_w_u, pattern='^' + str(M3_A_EWONDER_W_U) + '$'),
            ##
            CallbackQueryHandler(m3_a_ewonder_wa, pattern='^' + str(M3_A_EWONDER_WA) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wa_mbl, pattern='^' + str(M3_A_EWONDER_WA_MBL) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wa_tbl, pattern='^' + str(M3_A_EWONDER_WA_TBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_ewonder_wt, pattern='^' + str(M3_A_EWONDER_WT) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_s, pattern='^' + str(M3_A_EWONDER_WT_S) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_s_web, pattern='^' + str(M3_A_EWONDER_WT_S_WEB) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_s_tbl, pattern='^' + str(M3_A_EWONDER_WT_S_TBL) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_p, pattern='^' + str(M3_A_EWONDER_WT_P) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_p_web, pattern='^' + str(M3_A_EWONDER_WT_P_WEB) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_p_tbl, pattern='^' + str(M3_A_EWONDER_WT_P_TBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_ewonder_wt_h, pattern='^' + str(M3_A_EWONDER_WT_H) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_h_cnt, pattern='^' + str(M3_A_EWONDER_WT_H_CNT) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_h_ec, pattern='^' + str(M3_A_EWONDER_WT_H_EC) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_h_swo, pattern='^' + str(M3_A_EWONDER_WT_H_SWO) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_h_rwo, pattern='^' + str(M3_A_EWONDER_WT_H_RWO) + '$'),
            CallbackQueryHandler(m3_a_ewonder_wt_h_a, pattern='^' + str(M3_A_EWONDER_WT_H_A) + '$'),
            ##
            CallbackQueryHandler(m3_a_ewonder_other, pattern='^' + str(M3_A_EWONDER_OTHER) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_felisa, pattern='^' + str(M3_A_FELISA) + '$'),
            CallbackQueryHandler(m3_a_felisa_create, pattern='^' + str(M3_A_FELISA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_felisa, pattern='^' + str(ASK_FELISA) + '$'),
            #BREAKDOWN CLOSE
             CallbackQueryHandler(m3_a_fiola_create, pattern='^' + str(M3_A_FIOLA_CREATE) + '$'),
             CallbackQueryHandler(m3_a_fiola_other, pattern='^' + str(M3_A_FIOLA_OTHER) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_1) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_2) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_3) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_4) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_5) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create_ticket, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_1A) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create_ticket, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_1B) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create_ticket, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_1C) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create_ticket, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_2A) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create_ticket, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_3A) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create_ticket, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_3B) + '$'),
             CallbackQueryHandler(m3_a_fiola_other_create_ticket, pattern='^' + str(M3_A_FIOLA_OTHER_CREATE_4A) + '$'),
             
            CallbackQueryHandler(ask_fiola, pattern='^' + str(ASK_FIOLA) + '$'),
            CallbackQueryHandler(m3_a_fiola, pattern='^' + str(M3_A_FIOLA) + '$'),
            CallbackQueryHandler(m3_a_fiola_bp, pattern='^' + str(M3_A_FIOLA_BP) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_ap, pattern='^' + str(M3_A_FIOLA_AP) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_sp, pattern='^' + str(M3_A_FIOLA_AP_SP) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_s, pattern='^' + str(M3_A_FIOLA_AP_S) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_s_web, pattern='^' + str(M3_A_FIOLA_AP_S_WEB) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_s_ata, pattern='^' + str(M3_A_FIOLA_AP_S_ATA) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_s_mbl, pattern='^' + str(M3_A_FIOLA_AP_S_MBL) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_g, pattern='^' + str(M3_A_FIOLA_AP_G) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_g_web, pattern='^' + str(M3_A_FIOLA_AP_G_WEB) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_g_mbl, pattern='^' + str(M3_A_FIOLA_AP_G_MBL) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_r, pattern='^' + str(M3_A_FIOLA_AP_R) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_r_web, pattern='^' + str(M3_A_FIOLA_AP_R_WEB) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_r_mbl, pattern='^' + str(M3_A_FIOLA_AP_R_MBL) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_psp, pattern='^' + str(M3_A_FIOLA_AP_PSP) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_psp_ca, pattern='^' + str(M3_A_FIOLA_AP_PSP_CA) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_psp_wt, pattern='^' + str(M3_A_FIOLA_AP_PSP_WT) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_psp_at, pattern='^' + str(M3_A_FIOLA_AP_PSP_AT) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_psp_etl, pattern='^' + str(M3_A_FIOLA_AP_PSP_ETL) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_psp_dr, pattern='^' + str(M3_A_FIOLA_AP_PSP_DR) + '$'),
            CallbackQueryHandler(m3_a_fiola_ap_gs, pattern='^' + str(M3_A_FIOLA_AP_GS) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_ac, pattern='^' + str(M3_A_FIOLA_AC) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs, pattern='^' + str(M3_A_FIOLA_AC_CS) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_ct, pattern='^' + str(M3_A_FIOLA_AC_CS_CT) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_ct_c, pattern='^' + str(M3_A_FIOLA_AC_CS_CT_C) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_ct_a, pattern='^' + str(M3_A_FIOLA_AC_CS_CT_A) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_ct_u, pattern='^' + str(M3_A_FIOLA_AC_CS_CT_U) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_aa, pattern='^' + str(M3_A_FIOLA_AC_CS_AA) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_aa_b, pattern='^' + str(M3_A_FIOLA_AC_CS_AA_B) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_wt, pattern='^' + str(M3_A_FIOLA_AC_CS_WT) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a, pattern='^' + str(M3_A_FIOLA_AC_CS_A) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_r, pattern='^' + str(M3_A_FIOLA_AC_CS_A_R) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_r_d, pattern='^' + str(M3_A_FIOLA_AC_CS_A_R_D) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_r_e, pattern='^' + str(M3_A_FIOLA_AC_CS_A_R_E) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_r_e_t, pattern='^' + str(M3_A_FIOLA_AC_CS_A_R_E_T) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_r_e_m, pattern='^' + str(M3_A_FIOLA_AC_CS_A_R_E_M) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_r_e_v, pattern='^' + str(M3_A_FIOLA_AC_CS_A_R_E_V) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_r_e_f, pattern='^' + str(M3_A_FIOLA_AC_CS_A_R_E_F) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_cc, pattern='^' + str(M3_A_FIOLA_AC_CS_A_CC) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_sts, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_STS) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_sts_f, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_STS_F) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_sts_r, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_STS_R) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_stw, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_STW) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_stw_f, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_STW_F) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_stw_r, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_STW_R) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_stw_w, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_STW_W) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_stw_i, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_STW_I) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_wts, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_WTS) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_wts_f, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_WTS_F) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_wts_r, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_WTS_R) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_wts_i, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_WTS_I) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_m_wts_w, pattern='^' + str(M3_A_FIOLA_AC_CS_A_M_WTS_W) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_a_l, pattern='^' + str(M3_A_FIOLA_AC_CS_A_L) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_wa, pattern='^' + str(M3_A_FIOLA_AC_CS_WA) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_wa_b, pattern='^' + str(M3_A_FIOLA_AC_CS_WA_B) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_at, pattern='^' + str(M3_A_FIOLA_AC_CS_AT) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_at_b, pattern='^' + str(M3_A_FIOLA_AC_CS_AT_B) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cs_db, pattern='^' + str(M3_A_FIOLA_AC_CS_DB) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cps, pattern='^' + str(M3_A_FIOLA_AC_CPS) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cps_ct, pattern='^' + str(M3_A_FIOLA_AC_CPS_CT) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cps_ct_c, pattern='^' + str(M3_A_FIOLA_AC_CPS_CT_C) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cps_ct_a, pattern='^' + str(M3_A_FIOLA_AC_CPS_CT_A) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cps_ct_u, pattern='^' + str(M3_A_FIOLA_AC_CPS_CT_U) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cps_ba, pattern='^' + str(M3_A_FIOLA_AC_CPS_BA) + '$'),
            CallbackQueryHandler(m3_a_fiola_ac_cps_web, pattern='^' + str(M3_A_FIOLA_AC_CPS_WEB) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_bm, pattern='^' + str(M3_A_FIOLA_BM) + '$'),
            CallbackQueryHandler(m3_a_fiola_bm_web, pattern='^' + str(M3_A_FIOLA_BM_WEB) + '$'),
            CallbackQueryHandler(m3_a_fiola_bm_mbl, pattern='^' + str(M3_A_FIOLA_BM_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_bfgr, pattern='^' + str(M3_A_FIOLA_BFGR) + '$'),
            CallbackQueryHandler(m3_a_fiola_bfgr_web, pattern='^' + str(M3_A_FIOLA_BFGR_WEB) + '$'),
            CallbackQueryHandler(m3_a_fiola_bfgr_mbl, pattern='^' + str(M3_A_FIOLA_BFGR_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_tf, pattern='^' + str(M3_A_FIOLA_TF) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_c, pattern='^' + str(M3_A_FIOLA_TF_C) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_c_t, pattern='^' + str(M3_A_FIOLA_TF_C_T) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_c_g, pattern='^' + str(M3_A_FIOLA_TF_C_G) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_c_c, pattern='^' + str(M3_A_FIOLA_TF_C_C) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_w, pattern='^' + str(M3_A_FIOLA_TF_W) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a, pattern='^' + str(M3_A_FIOLA_TF_A) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_r, pattern='^' + str(M3_A_FIOLA_TF_A_R) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_r_d, pattern='^' + str(M3_A_FIOLA_TF_A_R_D) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_r_e, pattern='^' + str(M3_A_FIOLA_TF_A_R_E) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_r_e_t, pattern='^' + str(M3_A_FIOLA_TF_A_R_E_T) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_r_e_f, pattern='^' + str(M3_A_FIOLA_TF_A_R_E_F) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_r_e_m, pattern='^' + str(M3_A_FIOLA_TF_A_R_E_M) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_r_e_v, pattern='^' + str(M3_A_FIOLA_TF_A_R_E_V) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m, pattern='^' + str(M3_A_FIOLA_TF_A_M) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_sts, pattern='^' + str(M3_A_FIOLA_TF_A_M_STS) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_sts_f, pattern='^' + str(M3_A_FIOLA_TF_A_M_STS_F) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_sts_r, pattern='^' + str(M3_A_FIOLA_TF_A_M_STS_R) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_stw, pattern='^' + str(M3_A_FIOLA_TF_A_M_STW) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_stw_f, pattern='^' + str(M3_A_FIOLA_TF_A_M_STW_F) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_stw_r, pattern='^' + str(M3_A_FIOLA_TF_A_M_STW_R) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_stw_w, pattern='^' + str(M3_A_FIOLA_TF_A_M_STW_W) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_stw_i, pattern='^' + str(M3_A_FIOLA_TF_A_M_STW_I) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_wts, pattern='^' + str(M3_A_FIOLA_TF_A_M_WTS) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_wts_f, pattern='^' + str(M3_A_FIOLA_TF_A_M_WTS_F) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_wts_r, pattern='^' + str(M3_A_FIOLA_TF_A_M_WTS_R) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_wts_w, pattern='^' + str(M3_A_FIOLA_TF_A_M_WTS_W) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_m_wts_i, pattern='^' + str(M3_A_FIOLA_TF_A_M_WTS_I) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_l, pattern='^' + str(M3_A_FIOLA_TF_A_L) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_a_v, pattern='^' + str(M3_A_FIOLA_TF_A_V) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_at, pattern='^' + str(M3_A_FIOLA_TF_AT) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_at_n, pattern='^' + str(M3_A_FIOLA_TF_AT_N) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_at_t, pattern='^' + str(M3_A_FIOLA_TF_AT_T) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_at_d, pattern='^' + str(M3_A_FIOLA_TF_AT_D) + '$'),
            CallbackQueryHandler(m3_a_fiola_tf_db, pattern='^' + str(M3_A_FIOLA_TF_DB) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_as, pattern='^' + str(M3_A_FIOLA_AS) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_c, pattern='^' + str(M3_A_FIOLA_C) + '$'),
            CallbackQueryHandler(m3_a_fiola_c_web, pattern='^' + str(M3_A_FIOLA_C_WEB) + '$'),
            CallbackQueryHandler(m3_a_fiola_c_mbl, pattern='^' + str(M3_A_FIOLA_C_MBL) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_eee, pattern='^' + str(M3_A_FIOLA_EEE) + '$'),
            CallbackQueryHandler(m3_a_fiola_eee_ebapp, pattern='^' + str(M3_A_FIOLA_EEE_EBAPP) + '$'),
            CallbackQueryHandler(m3_a_fiola_eee_ekpi, pattern='^' + str(M3_A_FIOLA_EEE_EKPI) + '$'),
            CallbackQueryHandler(m3_a_fiola_eee_ebast, pattern='^' + str(M3_A_FIOLA_EEE_EBAST) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_cc, pattern='^' + str(M3_A_FIOLA_CC) + '$'),
            CallbackQueryHandler(m3_a_fiola_cc_a, pattern='^' + str(M3_A_FIOLA_CC_A) + '$'),
            CallbackQueryHandler(m3_a_fiola_cc_d, pattern='^' + str(M3_A_FIOLA_CC_D) + '$'),
            ##
            CallbackQueryHandler(m3_a_fiola_gt, pattern='^' + str(M3_A_FIOLA_GT) + '$'),
            ##
            
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_lolita, pattern='^' + str(M3_A_LOLITA) + '$'),
            CallbackQueryHandler(m3_a_lolita_create, pattern='^' + str(M3_A_LOLITA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_lolita, pattern='^' + str(ASK_LOLITA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_scarlet, pattern='^' + str(M3_A_SCARLET) + '$'),
            CallbackQueryHandler(m3_a_scarlet_create, pattern='^' + str(M3_A_SCARLET_CREATE_1) + '$'),
            CallbackQueryHandler(m3_a_scarlet_create, pattern='^' + str(M3_A_SCARLET_CREATE_2) + '$'),
            CallbackQueryHandler(ask_scarlet, pattern='^' + str(ASK_SCARLET) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_smartkey, pattern='^' + str(M3_A_SMARTKEY) + '$'),
            CallbackQueryHandler(ask_smartkey, pattern='^' + str(ASK_SMARTKEY) + '$'),
            CallbackQueryHandler(m3_a_smartkey_create, pattern='^' + str(M3_A_SMARTKEY_CREATE_1) + '$'),
            CallbackQueryHandler(m3_a_smartkey_create, pattern='^' + str(M3_A_SMARTKEY_CREATE_2) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_tiara, pattern='^' + str(M3_A_TIARA) + '$'),
            CallbackQueryHandler(m3_a_tiara_create, pattern='^' + str(M3_A_TIARA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_tiara, pattern='^' + str(ASK_TIARA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_tpas, pattern='^' + str(M3_A_TPAS) + '$'),
            CallbackQueryHandler(ask_tpas, pattern='^' + str(ASK_TPAS) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo, pattern='^' + str(M3_A_TPAS_LISTCTDO) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_1) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_2) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_3) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_4) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_5) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_6) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_7) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_8) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_8) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_10) + '$'),
            CallbackQueryHandler(m3_a_tpas_listctdo_create, pattern='^' + str(M3_A_TPAS_LISTCTDO_11) + '$'),
            CallbackQueryHandler(m3_a_tpas_create, pattern='^' + str(M3_A_TPAS_CREATE_1) + '$'),
            CallbackQueryHandler(m3_a_tpas_create, pattern='^' + str(M3_A_TPAS_CREATE_2) + '$'),
            CallbackQueryHandler(m3_a_tpas_create, pattern='^' + str(M3_A_TPAS_CREATE_3) + '$'),
            CallbackQueryHandler(m3_a_tpas_create, pattern='^' + str(M3_A_TPAS_CREATE_4) + '$'),
            CallbackQueryHandler(m3_a_tpas_create, pattern='^' + str(M3_A_TPAS_CREATE_5) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_1A) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_1B) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_1C) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_1D) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_1E) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_2A) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_2B) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_2C) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_3A) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_3B) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_3C) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_3D) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_4A) + '$'),
            CallbackQueryHandler(m3_a_tpas_create_ticket, pattern='^' + str(M3_A_TPAS_CREATE_4B) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m3_a_tpower, pattern='^' + str(M3_A_TPOWER) + '$'),
            CallbackQueryHandler(m3_a_tpower_create, pattern='^' + str(M3_A_TPOWER_CREATE_1) + '$'),
            CallbackQueryHandler(ask_tpower, pattern='^' + str(ASK_TPOWER) + '$'),
            #BREAKDOWN CLOSE
#BREAKDOWN 4
            CallbackQueryHandler(m4_pm_arthemis, pattern='^' + str(M4_PM_ARTHEMIS) + '$'),
            CallbackQueryHandler(ask_arthemis, pattern='^' + str(ASK_ARTHEMIS) + '$'),
            CallbackQueryHandler(m4_pm_arthemis_create, pattern='^' + str(M4_PM_ARTHEMIS_CREATE_1) + '$'),
            CallbackQueryHandler(m4_pm_arthemis_create, pattern='^' + str(M4_PM_ARTHEMIS_CREATE_2) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m9_covmo_create, pattern='^' + str(M9_COVMO_CREATE_1) + '$'),
            CallbackQueryHandler(m9_covmo_create, pattern='^' + str(M9_COVMO_CREATE_2) + '$'),
            CallbackQueryHandler(m9_covmo_create, pattern='^' + str(M9_COVMO_CREATE_3) + '$'),
            CallbackQueryHandler(m9_covmo_create, pattern='^' + str(M9_COVMO_CREATE_4) + '$'),
            CallbackQueryHandler(m9_covmo_create_ticket, pattern='^' + str(M9_COVMO_CREATE_1A) + '$'),
            CallbackQueryHandler(m9_covmo_create_ticket, pattern='^' + str(M9_COVMO_CREATE_1B) + '$'),
            CallbackQueryHandler(m9_covmo_create_ticket, pattern='^' + str(M9_COVMO_CREATE_2A) + '$'),
            CallbackQueryHandler(m9_covmo_create_ticket, pattern='^' + str(M9_COVMO_CREATE_2B) + '$'),
            CallbackQueryHandler(m9_covmo_create_ticket, pattern='^' + str(M9_COVMO_CREATE_2C) + '$'),
            CallbackQueryHandler(m9_covmo_create_ticket, pattern='^' + str(M9_COVMO_CREATE_3A) + '$'),
            CallbackQueryHandler(m9_covmo_create_ticket, pattern='^' + str(M9_COVMO_CREATE_3B) + '$'),
            CallbackQueryHandler(m9_covmo_create_ticket, pattern='^' + str(M9_COVMO_CREATE_3C) + '$'),
            CallbackQueryHandler(ask_covmo, pattern='^' + str(ASK_COVMO) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m4_pm_csone, pattern='^' + str(M4_PM_CSONE) + '$'),
            CallbackQueryHandler(m4_pm_csone_create, pattern='^' + str(M4_PM_CSONE_CREATE_1) + '$'),
            CallbackQueryHandler(ask_csone, pattern='^' + str(ASK_CSONE) + '$'),
            #BREAKDOWN CLOSE 
            CallbackQueryHandler(m4_pm_cyclops, pattern='^' + str(M4_PM_CYCLOPS) + '$'),
            CallbackQueryHandler(m4_pm_cyclops_create, pattern='^' + str(M4_PM_CYCLOPS_CREATE_1) + '$'),
            CallbackQueryHandler(ask_cyclops, pattern='^' + str(ASK_CYCLOPS) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m4_pm_evita, pattern='^' + str(M4_PM_EVITA) + '$'),
            CallbackQueryHandler(m4_pm_evita_create, pattern='^' + str(M4_PM_EVITA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_evita, pattern='^' + str(ASK_EVITA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m4_pm_ipdm, pattern='^' + str(M4_PM_IPDM) + '$'),
            CallbackQueryHandler(m4_pm_ipdm_create, pattern='^' + str(M4_PM_IPDM_CREATE_1) + '$'),
            CallbackQueryHandler(ask_ipdm, pattern='^' + str(ASK_IPDM) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m4_pm_ironman, pattern='^' + str(M4_PM_IRONMAN) + '$'),
            CallbackQueryHandler(m4_pm_ironman_create, pattern='^' + str(M4_PM_IRONMAN_CREATE_1) + '$'),
            CallbackQueryHandler(ask_ironman, pattern='^' + str(ASK_IRONMAN) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m4_pm_kalix, pattern='^' + str(M4_PM_KALIX) + '$'),
            CallbackQueryHandler(ask_kalix, pattern='^' + str(ASK_KALIX) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create, pattern='^' + str(M4_PM_KALIX_CREATE_1) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create, pattern='^' + str(M4_PM_KALIX_CREATE_2) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create, pattern='^' + str(M4_PM_KALIX_CREATE_3) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create, pattern='^' + str(M4_PM_KALIX_CREATE_4) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create_create, pattern='^' + str(M4_PM_KALIX_CREATE_1A) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create_create, pattern='^' + str(M4_PM_KALIX_CREATE_1B) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create_create, pattern='^' + str(M4_PM_KALIX_CREATE_2A) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create_create, pattern='^' + str(M4_PM_KALIX_CREATE_2B) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create_create, pattern='^' + str(M4_PM_KALIX_CREATE_2C) + '$'),
            CallbackQueryHandler(m4_pm_kalix_create_create, pattern='^' + str(M4_PM_KALIX_CREATE_3A) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m4_pm_ookla, pattern='^' + str(M4_PM_OOKLA) + '$'),
            CallbackQueryHandler(ask_ookla, pattern='^' + str(ASK_OOKLA) + '$'),
            CallbackQueryHandler(m4_pm_ookla_create, pattern='^' + str(M4_PM_OOKLA_CREATE_1) + '$'),
            CallbackQueryHandler(m4_pm_ookla_create, pattern='^' + str(M4_PM_OOKLA_CREATE_2) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m4_pm_smartcare, pattern='^' + str(M4_PM_SMARTCARE) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_1) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_2) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_3) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_4) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_5) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_6) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_7) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_8) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_9) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_10) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_11) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_12) + '$'),
            CallbackQueryHandler(m4_pm_smartcare_create, pattern='^' + str(M4_PM_SMARTCARE_CREATE_13) + '$'),
            CallbackQueryHandler(ask_smartcare, pattern='^' + str(ASK_SMARTCARE) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m4_pm_suropati, pattern='^' + str(M4_PM_SUROPATI) + '$'),
            CallbackQueryHandler(ask_suropati, pattern='^' + str(ASK_SUROPATI) + '$'),
            CallbackQueryHandler(m4_pm_suropati_create, pattern='^' + str(M4_PM_SUROPATI_CREATE_1) + '$'),
            CallbackQueryHandler(m4_pm_suropati_create, pattern='^' + str(M4_PM_SUROPATI_CREATE_2) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(ask_traffica, pattern='^' + str(ASK_TRAFFICA) + '$'),
            CallbackQueryHandler(m10_traffica_create, pattern='^' + str(M10_TRAFFICA_CREATE_1) + '$'),
            CallbackQueryHandler(m10_traffica_create, pattern='^' + str(M10_TRAFFICA_CREATE_2) + '$'),
            CallbackQueryHandler(m10_traffica_create, pattern='^' + str(M10_TRAFFICA_CREATE_3) + '$'),
            CallbackQueryHandler(m10_traffica_create, pattern='^' + str(M10_TRAFFICA_CREATE_4) + '$'),
            CallbackQueryHandler(m10_traffica_create, pattern='^' + str(M10_TRAFFICA_CREATE_5) + '$'),
            CallbackQueryHandler(m10_traffica_create_ticket, pattern='^' + str(M10_TRAFFICA_CREATE_1A) + '$'),
            CallbackQueryHandler(m10_traffica_create_ticket, pattern='^' + str(M10_TRAFFICA_CREATE_1B) + '$'),
            CallbackQueryHandler(m10_traffica_create_ticket, pattern='^' + str(M10_TRAFFICA_CREATE_2A) + '$'),
            CallbackQueryHandler(m10_traffica_create_ticket, pattern='^' + str(M10_TRAFFICA_CREATE_2B) + '$'),
            CallbackQueryHandler(m10_traffica_create_ticket, pattern='^' + str(M10_TRAFFICA_CREATE_3A) + '$'),
            CallbackQueryHandler(m10_traffica_create_ticket, pattern='^' + str(M10_TRAFFICA_CREATE_3B) + '$'),
            CallbackQueryHandler(m10_traffica_create_ticket, pattern='^' + str(M10_TRAFFICA_CREATE_3C) + '$'),
            CallbackQueryHandler(m10_traffica_create_ticket, pattern='^' + str(M10_TRAFFICA_CREATE_4A) + '$'),
            #BREAKDOWN CLOSE 
            CallbackQueryHandler(m4_pm_zabbix, pattern='^' + str(M4_PM_ZABBIX) + '$'),
            CallbackQueryHandler(ask_zabbix, pattern='^' + str(ASK_ZABBIX) + '$'),
            CallbackQueryHandler(m4_pm_zabbix_create, pattern='^' + str(M4_PM_ZABBIX_CREATE_1) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m4_pm_twamp, pattern='^' + str(M4_PM_TWAMP) + '$'),
            CallbackQueryHandler(ask_twamp, pattern='^' + str(ASK_TWAMP) + '$'),
            CallbackQueryHandler(m4_pm_twamp_create, pattern='^' + str(M4_PM_TWAMP_CREATE_1) + '$'),
#BREAKDOWN 5
            CallbackQueryHandler(m5_sm_uam, pattern='^' + str(M5_SM_UAM) + '$'),
            CallbackQueryHandler(m5_sm_pam, pattern='^' + str(M5_SM_PAM) + '$'),
            CallbackQueryHandler(m5_sm_req_user, pattern='^' + str(M5_SM_REQ_USER) + '$'),
            CallbackQueryHandler(m5_sm_closedrequser, pattern='^' + str(M5_SM_CLOSEDREQUSER) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m5_sm_expert, pattern='^' + str(M5_SM_EXPERT) + '$'),
            CallbackQueryHandler(reg_expert, pattern='^' + str(REG_EXPERT) + '$'),
            CallbackQueryHandler(del_expert, pattern='^' + str(DEL_EXPERT) + '$'),

            #BREAKDOWN CLOSE REGISTRASI
            CallbackQueryHandler(reg_fm, pattern='^' + str(REG_FM) + '$'),
            CallbackQueryHandler(reg_fm_davina, pattern='^' + str(REG_FM_DAVINA) + '$'),
            CallbackQueryHandler(reg_fm_grafana, pattern='^' + str(REG_FM_GRAFANA) + '$'),
            CallbackQueryHandler(reg_fm_inap, pattern='^' + str(REG_FM_INAP) + '$'),
            CallbackQueryHandler(reg_fm_ineom, pattern='^' + str(REG_FM_INEOM) + '$'),
            CallbackQueryHandler(reg_fm_nacel, pattern='^' + str(REG_FM_NACEL) + '$'),
            CallbackQueryHandler(reg_fm_nadin, pattern='^' + str(REG_FM_NADIN) + '$'),
            CallbackQueryHandler(reg_fm_syantic, pattern='^' + str(REG_FM_SYANTIC) + '$'),
            CallbackQueryHandler(reg_fm_tablue, pattern='^' + str(REG_FM_TABLUE) + '$'),
            CallbackQueryHandler(reg_fm_ossera, pattern='^' + str(REG_FM_OSSERA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(reg_c, pattern='^' + str(REG_C) + '$'),
            CallbackQueryHandler(reg_c_chrono, pattern='^' + str(REG_C_CHRONO) + '$'),
            CallbackQueryHandler(reg_c_crq, pattern='^' + str(REG_C_CRQ) + '$'),
            CallbackQueryHandler(reg_c_lacima, pattern='^' + str(REG_C_LACIMA) + '$'),
            CallbackQueryHandler(reg_c_nava, pattern='^' + str(REG_C_NAVA) + '$'),
            CallbackQueryHandler(reg_c_traversa, pattern='^' + str(REG_C_TRAVERSA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(reg_a, pattern='^' + str(REG_A) + '$'),
            CallbackQueryHandler(reg_a_agata, pattern='^' + str(REG_A_AGATA) + '$'),
            CallbackQueryHandler(reg_a_amesty, pattern='^' + str(REG_A_AMESTY) + '$'),
            CallbackQueryHandler(reg_a_davinci, pattern='^' + str(REG_A_DAVINCI) + '$'),
            CallbackQueryHandler(reg_a_eatp, pattern='^' + str(REG_A_EATP) + '$'),
            CallbackQueryHandler(reg_a_etsa, pattern='^' + str(REG_A_ETSA) + '$'),
            CallbackQueryHandler(reg_a_ewonder, pattern='^' + str(REG_A_EWONDER) + '$'),
            CallbackQueryHandler(reg_a_felisa, pattern='^' + str(REG_A_FELISA) + '$'),
            CallbackQueryHandler(reg_a_fiola, pattern='^' + str(REG_A_FIOLA) + '$'),
            CallbackQueryHandler(reg_a_lolita, pattern='^' + str(REG_A_LOLITA) + '$'),
            CallbackQueryHandler(reg_a_scarlet, pattern='^' + str(REG_A_SCARLET) + '$'),
            CallbackQueryHandler(reg_a_smartkey, pattern='^' + str(REG_A_SMARTKEY) + '$'),
            CallbackQueryHandler(reg_a_tiara, pattern='^' + str(REG_A_TIARA) + '$'),
            CallbackQueryHandler(reg_a_tpas, pattern='^' + str(REG_A_TPAS) + '$'),
            CallbackQueryHandler(reg_a_tpower, pattern='^' + str(REG_A_TPOWER) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(reg_pm, pattern='^' + str(REG_PM) + '$'),
            CallbackQueryHandler(reg_pm_arthemis, pattern='^' + str(REG_PM_ARTHEMIS) + '$'),
            CallbackQueryHandler(reg_pm_covmo, pattern='^' + str(REG_PM_COVMO) + '$'),
            CallbackQueryHandler(reg_pm_csone, pattern='^' + str(REG_PM_CSONE) + '$'),
            CallbackQueryHandler(reg_pm_evita, pattern='^' + str(REG_PM_EVITA) + '$'),
            CallbackQueryHandler(reg_pm_ipdm, pattern='^' + str(REG_PM_IPDM) + '$'),
            CallbackQueryHandler(reg_pm_ironman, pattern='^' + str(REG_PM_IRONMAN) + '$'),
            CallbackQueryHandler(reg_pm_kalix, pattern='^' + str(REG_PM_KALIX) + '$'),
            CallbackQueryHandler(reg_pm_ookla, pattern='^' + str(REG_PM_OOKLA) + '$'),
            CallbackQueryHandler(reg_pm_smartcare, pattern='^' + str(REG_PM_SMARTCARE) + '$'),
            CallbackQueryHandler(reg_pm_suropati, pattern='^' + str(REG_PM_SUROPATI) + '$'),
            CallbackQueryHandler(reg_pm_traffica, pattern='^' + str(REG_PM_TRAFFICA) + '$'),
            CallbackQueryHandler(reg_pm_twamp, pattern='^' + str(REG_PM_TWAMP) + '$'),
            CallbackQueryHandler(reg_pm_zabbix, pattern='^' + str(REG_PM_ZABBIX) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(reg_ds, pattern='^' + str(REG_DS) + '$'),
            CallbackQueryHandler(reg_ds_kafka, pattern='^' + str(REG_DS_KAFKA) + '$'),
            CallbackQueryHandler(reg_ds_ndl, pattern='^' + str(REG_DS_NDL) + '$'),
            CallbackQueryHandler(reg_ds_ndm, pattern='^' + str(REG_DS_NDM) + '$'),
            CallbackQueryHandler(reg_ds_oss, pattern='^' + str(REG_DS_OSS) + '$'),
            CallbackQueryHandler(reg_ds_ixia, pattern='^' + str(REG_DS_IXIA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(reg_ts, pattern='^' + str(REG_TS) + '$'),
            CallbackQueryHandler(reg_ts_cts, pattern='^' + str(REG_TS_CTS) + '$'),
            CallbackQueryHandler(reg_ts_remedy, pattern='^' + str(REG_TS_REMEDY) + '$'),
            CallbackQueryHandler(reg_ts_sdm, pattern='^' + str(REG_TS_SDM) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(reg_davp, pattern='^' + str(REG_DAVP) + '$'),
            CallbackQueryHandler(reg_davp_avp, pattern='^' + str(REG_DAVP_AVP) + '$'),

            #BREAKDOWN CLOSE HAPUS
            CallbackQueryHandler(del_fm, pattern='^' + str(DEL_FM) + '$'),
            CallbackQueryHandler(del_fm_davina, pattern='^' + str(DEL_FM_DAVINA) + '$'),
            CallbackQueryHandler(del_fm_grafana, pattern='^' + str(DEL_FM_GRAFANA) + '$'),
            CallbackQueryHandler(del_fm_inap, pattern='^' + str(DEL_FM_INAP) + '$'),
            CallbackQueryHandler(del_fm_ineom, pattern='^' + str(DEL_FM_INEOM) + '$'),
            CallbackQueryHandler(del_fm_nacel, pattern='^' + str(DEL_FM_NACEL) + '$'),
            CallbackQueryHandler(del_fm_nadin, pattern='^' + str(DEL_FM_NADIN) + '$'),
            CallbackQueryHandler(del_fm_syantic, pattern='^' + str(DEL_FM_SYANTIC) + '$'),
            CallbackQueryHandler(del_fm_tablue, pattern='^' + str(DEL_FM_TABLUE) + '$'),
            CallbackQueryHandler(del_fm_ossera, pattern='^' + str(DEL_FM_OSSERA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(del_c, pattern='^' + str(DEL_C) + '$'),
            CallbackQueryHandler(del_c_chrono, pattern='^' + str(DEL_C_CHRONO) + '$'),
            CallbackQueryHandler(del_c_crq, pattern='^' + str(DEL_C_CRQ) + '$'),
            CallbackQueryHandler(del_c_lacima, pattern='^' + str(DEL_C_LACIMA) + '$'),
            CallbackQueryHandler(del_c_nava, pattern='^' + str(DEL_C_NAVA) + '$'),
            CallbackQueryHandler(del_c_traversa, pattern='^' + str(DEL_C_TRAVERSA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(del_a, pattern='^' + str(DEL_A) + '$'),
            CallbackQueryHandler(del_a_agata, pattern='^' + str(DEL_A_AGATA) + '$'),
            CallbackQueryHandler(del_a_amesty, pattern='^' + str(DEL_A_AMESTY) + '$'),
            CallbackQueryHandler(del_a_davinci, pattern='^' + str(DEL_A_DAVINCI) + '$'),
            CallbackQueryHandler(del_a_eatp, pattern='^' + str(DEL_A_EATP) + '$'),
            CallbackQueryHandler(del_a_etsa, pattern='^' + str(DEL_A_ETSA) + '$'),
            CallbackQueryHandler(del_a_ewonder, pattern='^' + str(DEL_A_EWONDER) + '$'),
            CallbackQueryHandler(del_a_felisa, pattern='^' + str(DEL_A_FELISA) + '$'),
            CallbackQueryHandler(del_a_fiola, pattern='^' + str(DEL_A_FIOLA) + '$'),
            CallbackQueryHandler(del_a_lolita, pattern='^' + str(DEL_A_LOLITA) + '$'),
            CallbackQueryHandler(del_a_scarlet, pattern='^' + str(DEL_A_SCARLET) + '$'),
            CallbackQueryHandler(del_a_smartkey, pattern='^' + str(DEL_A_SMARTKEY) + '$'),
            CallbackQueryHandler(del_a_tiara, pattern='^' + str(DEL_A_TIARA) + '$'),
            CallbackQueryHandler(del_a_tpas, pattern='^' + str(DEL_A_TPAS) + '$'),
            CallbackQueryHandler(del_a_tpower, pattern='^' + str(DEL_A_TPOWER) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(del_pm, pattern='^' + str(DEL_PM) + '$'),
            CallbackQueryHandler(del_pm_arthemis, pattern='^' + str(DEL_PM_ARTHEMIS) + '$'),
            CallbackQueryHandler(del_pm_covmo, pattern='^' + str(DEL_PM_COVMO) + '$'),
            CallbackQueryHandler(del_pm_csone, pattern='^' + str(DEL_PM_CSONE) + '$'),
            CallbackQueryHandler(del_pm_evita, pattern='^' + str(DEL_PM_EVITA) + '$'),
            CallbackQueryHandler(del_pm_ipdm, pattern='^' + str(DEL_PM_IPDM) + '$'),
            CallbackQueryHandler(del_pm_kalix, pattern='^' + str(DEL_PM_KALIX) + '$'),
            CallbackQueryHandler(del_pm_ookla, pattern='^' + str(DEL_PM_OOKLA) + '$'),
            CallbackQueryHandler(del_pm_ironman, pattern='^' + str(DEL_PM_IRONMAN) + '$'),
            CallbackQueryHandler(del_pm_smartcare, pattern='^' + str(DEL_PM_SMARTCARE) + '$'),
            CallbackQueryHandler(del_pm_suropati, pattern='^' + str(DEL_PM_SUROPATI) + '$'),
            CallbackQueryHandler(del_pm_traffica, pattern='^' + str(DEL_PM_TRAFFICA) + '$'),
            CallbackQueryHandler(del_pm_twamp, pattern='^' + str(DEL_PM_TWAMP) + '$'),
            CallbackQueryHandler(del_pm_zabbix, pattern='^' + str(DEL_PM_ZABBIX) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(del_ds, pattern='^' + str(DEL_DS) + '$'),
            CallbackQueryHandler(del_ds_kafka, pattern='^' + str(DEL_DS_KAFKA) + '$'),
            CallbackQueryHandler(del_ds_ndl, pattern='^' + str(DEL_DS_NDL) + '$'),
            CallbackQueryHandler(del_ds_ndm, pattern='^' + str(DEL_DS_NDM) + '$'),
            CallbackQueryHandler(del_ds_oss, pattern='^' + str(DEL_DS_OSS) + '$'),
            CallbackQueryHandler(del_ds_ixia, pattern='^' + str(DEL_DS_IXIA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(del_ts, pattern='^' + str(DEL_TS) + '$'),
            CallbackQueryHandler(del_ts_cts, pattern='^' + str(DEL_TS_CTS) + '$'),
            CallbackQueryHandler(del_ts_remedy, pattern='^' + str(DEL_TS_REMEDY) + '$'),
            CallbackQueryHandler(del_ts_sdm, pattern='^' + str(DEL_TS_SDM) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(del_davp, pattern='^' + str(DEL_DAVP) + '$'),
            CallbackQueryHandler(del_davp_avp, pattern='^' + str(DEL_DAVP_AVP) + '$'),
#BREAKDOWN 6
            CallbackQueryHandler(m6_ds_kafka, pattern='^' + str(M6_DS_KAFKA) + '$'),
            CallbackQueryHandler(m6_ds_kafka_create, pattern='^' + str(M6_DS_KAFKA_CREATE_1) + '$'),
            CallbackQueryHandler(ask_kafka, pattern='^' + str(ASK_KAFKA) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(ask_ndm, pattern='^' + str(ASK_NDM) + '$'),
            CallbackQueryHandler(m6_ds_ndm, pattern='^' + str(M6_DS_NDM) + '$'),
            CallbackQueryHandler(m6_ds_ndm_create, pattern='^' + str(M6_DS_NDM_CREATE_1) + '$'),
            CallbackQueryHandler(m6_ds_ndm_create, pattern='^' + str(M6_DS_NDM_CREATE_2) + '$'),
            #BREAKDOWN CLOSE 
            CallbackQueryHandler(ask_ndl, pattern='^' + str(ASK_NDL) + '$'),
            CallbackQueryHandler(m6_ds_ndl, pattern='^' + str(M6_DS_NDL) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq, pattern='^' + str(M6_DS_NDL_TQ) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_1) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_2) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_3) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_4) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_5) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_6) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_7) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_8) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_9) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_10) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_11) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_12) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_13) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_14) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_15) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_16) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_17) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_18) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_19) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tq_create, pattern='^' + str(M6_DS_NDL_TQ_CREATE_20) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr, pattern='^' + str(M6_DS_NDL_TR) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_1) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_2) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_3) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_4) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_5) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_6) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_7) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_8) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_9) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_10) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_11) + '$'),
            CallbackQueryHandler(m6_ds_ndl_tr_create, pattern='^' + str(M6_DS_NDL_TR_CREATE_12) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m6_ds_oss, pattern='^' + str(M6_DS_OSS) + '$'),
            CallbackQueryHandler(m6_ds_oss_create, pattern='^' + str(M6_DS_OSS_CREATE_1) + '$'),
            CallbackQueryHandler(ask_oss, pattern='^' + str(ASK_OSS) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m6_ds_ixia, pattern='^' + str(M6_DS_IXIA) + '$'),
            CallbackQueryHandler(ask_ixia, pattern='^' + str(ASK_IXIA) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create, pattern='^' + str(M6_DS_IXIA_CREATE_1) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create, pattern='^' + str(M6_DS_IXIA_CREATE_2) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create, pattern='^' + str(M6_DS_IXIA_CREATE_3) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create, pattern='^' + str(M6_DS_IXIA_CREATE_4) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create, pattern='^' + str(M6_DS_IXIA_CREATE_5) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_1A) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_1B) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_2A) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_2B) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_2C) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_3A) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_3B) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_3C) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_4A) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_4B) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_4C) + '$'),
            CallbackQueryHandler(m6_ds_ixia_create_ticket, pattern='^' + str(M6_DS_IXIA_CREATE_4D) + '$'),
#BREAKDOWN 7
            CallbackQueryHandler(m7_ts_cts, pattern='^' + str(M7_TS_CTS) + '$'),
            CallbackQueryHandler(m7_ts_cts_create, pattern='^' + str(M7_TS_CTS_CREATE_1) + '$'),
            CallbackQueryHandler(ask_cts, pattern='^' + str(ASK_CTS) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m7_ts_remedy, pattern='^' + str(M7_TS_REMEDY) + '$'),
            CallbackQueryHandler(m7_ts_remedy_create, pattern='^' + str(M7_TS_REMEDY_CREATE_1) + '$'),
            CallbackQueryHandler(ask_remedy, pattern='^' + str(ASK_REMEDY) + '$'),
            #BREAKDOWN CLOSE
            CallbackQueryHandler(m7_ts_sdm, pattern='^' + str(M7_TS_SDM) + '$'),
            CallbackQueryHandler(m7_ts_sdm_create, pattern='^' + str(M7_TS_SDM_CREATE_1) + '$'),
            CallbackQueryHandler(ask_sdm, pattern='^' + str(ASK_SDM) + '$'),
            #BREAKDOWN CLOSE
#BREAKDOWN 8
            CallbackQueryHandler(m8_davp_avp, pattern='^' + str(M8_DAVP_AVP) + '$'),
            CallbackQueryHandler(m8_davp_avp_create, pattern='^' + str(M8_DAVP_AVP_CREATE_1) + '$'),
            CallbackQueryHandler(ask_davp, pattern='^' + str(ASK_DAVP) + '$'),
#CLOSED TICKET
            CallbackQueryHandler(closed_ticket_fm, pattern='^' + str(CLOSED_TICKET_FM) + '$'),
            CallbackQueryHandler(closed_ticket_c, pattern='^' + str(CLOSED_TICKET_C) + '$'),
            CallbackQueryHandler(closed_ticket_a, pattern='^' + str(CLOSED_TICKET_A) + '$'),
            CallbackQueryHandler(closed_ticket_pm, pattern='^' + str(CLOSED_TICKET_PM) + '$'),
            CallbackQueryHandler(closed_ticket_ds, pattern='^' + str(CLOSED_TICKET_DS) + '$'),
            CallbackQueryHandler(closed_ticket_ts, pattern='^' + str(CLOSED_TICKET_TS) + '$'),
            CallbackQueryHandler(closed_ticket_davp, pattern='^' + str(CLOSED_TICKET_DAVP) + '$'),
            CallbackQueryHandler(closed_ticket_covmo, pattern='^' + str(CLOSED_TICKET_COVMO) + '$'),
            CallbackQueryHandler(closed_ticket_traffica, pattern='^' + str(CLOSED_TICKET_TRAFFICA) + '$'),
            CallbackQueryHandler(closed_ticket_yes, pattern='^' + str(CLOSED_TICKET_YES) + '$'),
            CallbackQueryHandler(closed_ticket_no, pattern='^' + str(CLOSED_TICKET_NO) + '$'),
#FEEDBACK
            CallbackQueryHandler(feedback_acc, pattern='^' + str(FEEDBACK_ACC) + '$')],
##FAULT
            END_SYA: [MessageHandler(Filters.text & ~Filters.command, end_sya)],
            END_DAV: [MessageHandler(Filters.text & ~Filters.command, end_dav)],
            END_GRA: [MessageHandler(Filters.text & ~Filters.command, end_gra)],
            END_TAB: [MessageHandler(Filters.text & ~Filters.command, end_tab)],
            END_NCL: [MessageHandler(Filters.text & ~Filters.command, end_ncl)],
            END_NDN: [MessageHandler(Filters.text & ~Filters.command, end_ndn)],
            END_INAP: [MessageHandler(Filters.text & ~Filters.command, end_inap)],
            END_NICE: [MessageHandler(Filters.text & ~Filters.command, end_nice)],
            END_OSSERA: [MessageHandler(Filters.text & ~Filters.command, end_ossera)],
            END_PMSOSSERA: [MessageHandler(Filters.text & ~Filters.command, end_pmsossera)],
##CONFIGURATION
            END_CHR: [MessageHandler(Filters.text & ~Filters.command, end_chr)],
            END_CRQ: [MessageHandler(Filters.text & ~Filters.command, end_crq)],
            END_LCM: [MessageHandler(Filters.text & ~Filters.command, end_lcm)],
            END_ICAM: [MessageHandler(Filters.text & ~Filters.command, end_icam)],
            END_NAV: [MessageHandler(Filters.text & ~Filters.command, end_nav)],
            END_TVS: [MessageHandler(Filters.text & ~Filters.command, end_tvs)],
##ADMINISTRATION
            END_AGT: [MessageHandler(Filters.text & ~Filters.command, end_agt)],
            END_AMT: [MessageHandler(Filters.text & ~Filters.command, end_amt)],
            END_DVC: [MessageHandler(Filters.text & ~Filters.command, end_dvc)],
            END_EATP: [MessageHandler(Filters.text & ~Filters.command, end_eatp)],
            END_ETSA: [MessageHandler(Filters.text & ~Filters.command, end_etsa)],
            END_EWONDER: [MessageHandler(Filters.text & ~Filters.command, end_ewonder)],
            END_FELISA: [MessageHandler(Filters.text & ~Filters.command, end_felisa)],
            END_FIOLA: [MessageHandler(Filters.text & ~Filters.command, end_fiola)],
            END_LOLITA: [MessageHandler(Filters.text & ~Filters.command, end_lolita)],
            END_SCARLET: [MessageHandler(Filters.text & ~Filters.command, end_scarlet)],
            END_SMARTKEY: [MessageHandler(Filters.text & ~Filters.command, end_smartkey)],
            END_TIARA: [MessageHandler(Filters.text & ~Filters.command, end_tiara)],
            END_TPAS: [MessageHandler(Filters.text & ~Filters.command, end_tpas)],
            END_TPOWER: [MessageHandler(Filters.text & ~Filters.command, end_tpower)],
##PERFORMANCE
            END_ARTHEMIS: [MessageHandler(Filters.text & ~Filters.command, end_arthemis)],
            END_COVMO: [MessageHandler(Filters.text & ~Filters.command, end_covmo)],
            END_CSONE: [MessageHandler(Filters.text & ~Filters.command, end_cyclops)],
            END_CYCLOPS: [MessageHandler(Filters.text & ~Filters.command, end_csone)],
            END_EVITA: [MessageHandler(Filters.text & ~Filters.command, end_evita)],
            END_IPDM: [MessageHandler(Filters.text & ~Filters.command, end_ipdm)],
            END_IRONMAN: [MessageHandler(Filters.text & ~Filters.command, end_ironman)],
            END_KALIX: [MessageHandler(Filters.text & ~Filters.command, end_kalix)],
            END_OOKLA: [MessageHandler(Filters.text & ~Filters.command, end_ookla)],
            END_SMARTCARE: [MessageHandler(Filters.text & ~Filters.command, end_smartcare)],
            END_SUROPATI: [MessageHandler(Filters.text & ~Filters.command, end_suropati)],
            END_TRAFFICA: [MessageHandler(Filters.text & ~Filters.command, end_traffica)],
            END_ZABBIX: [MessageHandler(Filters.text & ~Filters.command, end_zabbix)],
            END_TWAMP: [MessageHandler(Filters.text & ~Filters.command, end_twamp)],
##SECURITY MANAGAMENT
##REG
            END_REG_FM_DAVINA: [MessageHandler(Filters.text & ~Filters.command, end_reg_fm_davina)],
            END_REG_FM_GRAFANA: [MessageHandler(Filters.text & ~Filters.command, end_reg_fm_grafana)],
            END_REG_FM_INAP: [MessageHandler(Filters.text & ~Filters.command, end_reg_fm_inap)],
            END_REG_FM_INEOM: [MessageHandler(Filters.text & ~Filters.command, end_reg_fm_ineom)],
            END_REG_FM_NACEL: [MessageHandler(Filters.text & ~Filters.command, end_reg_fm_nacel)],
            END_REG_FM_NADIN: [MessageHandler(Filters.text & ~Filters.command, end_reg_fm_nadin)],
            END_REG_FM_SYANTIC: [MessageHandler(Filters.text & ~Filters.command, end_reg_fm_syantic)],
            END_REG_FM_TABLUE: [MessageHandler(Filters.text & ~Filters.command, end_reg_fm_tablue)],
            END_REG_FM_OSSERA: [MessageHandler(Filters.text & ~Filters.command, end_reg_fm_ossera)],
            ##
            END_REG_C_CHRONO: [MessageHandler(Filters.text & ~Filters.command, end_reg_c_chrono)],
            END_REG_C_CRQ: [MessageHandler(Filters.text & ~Filters.command, end_reg_c_crq)],
            END_REG_C_LACIMA: [MessageHandler(Filters.text & ~Filters.command, end_reg_c_lacima)],
            END_REG_C_NAVA: [MessageHandler(Filters.text & ~Filters.command, end_reg_c_nava)],
            END_REG_C_TRAVERSA: [MessageHandler(Filters.text & ~Filters.command, end_reg_c_traversa)],
            ##
            END_REG_A_AGATA: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_agata)],
            END_REG_A_AMESTY: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_amesty)],
            END_REG_A_DAVINCI: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_davinci)],
            END_REG_A_EATP: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_eatp)],
            END_REG_A_ETSA: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_etsa)],
            END_REG_A_EWONDER: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_ewonder)],
            END_REG_A_FELISA: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_felisa)],
            END_REG_A_FIOLA: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_fiola)],
            END_REG_A_LOLITA: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_lolita)],
            END_REG_A_SCARLET: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_scarlet)],
            END_REG_A_SMARTKEY: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_smartkey)],
            END_REG_A_TIARA: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_tiara)],
            END_REG_A_TPAS: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_tpas)],
            END_REG_A_TPOWER: [MessageHandler(Filters.text & ~Filters.command, end_reg_a_tpower)],
            ##
            END_REG_PM_ARTHEMIS: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_arthemis)],
            END_REG_PM_COVMO: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_covmo)],
            END_REG_PM_CSONE: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_csone)],
            END_REG_PM_EVITA: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_evita)],
            END_REG_PM_IPDM: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_ipdm)],
            END_REG_PM_IRONMAN: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_ironman)],
            END_REG_PM_KALIX: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_kalix)],
            END_REG_PM_OOKLA: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_ookla)],
            END_REG_PM_SMARTCARE: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_smartcare)],
            END_REG_PM_SUROPATI: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_suropati)],
            END_REG_PM_TRAFFICA: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_traffica)],
            END_REG_PM_TWAMP: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_twamp)],
            END_REG_PM_ZABBIX: [MessageHandler(Filters.text & ~Filters.command, end_reg_pm_zabbix)],
            ##
            END_REG_DS_KAFKA: [MessageHandler(Filters.text & ~Filters.command, end_reg_ds_kafka)],
            END_REG_DS_NDL: [MessageHandler(Filters.text & ~Filters.command, end_reg_ds_ndl)],
            END_REG_DS_NDM: [MessageHandler(Filters.text & ~Filters.command, end_reg_ds_ndm)],
            END_REG_DS_OSS: [MessageHandler(Filters.text & ~Filters.command, end_reg_ds_oss)],
            END_REG_DS_IXIA: [MessageHandler(Filters.text & ~Filters.command, end_reg_ds_ixia)],
            ##
            END_REG_TS_CTS: [MessageHandler(Filters.text & ~Filters.command, end_reg_ts_cts)],
            END_REG_TS_REMEDY: [MessageHandler(Filters.text & ~Filters.command, end_reg_ts_remedy)],
            END_REG_TS_SDM: [MessageHandler(Filters.text & ~Filters.command, end_reg_ts_sdm)],
            ##
            END_REG_DAVP_AVP: [MessageHandler(Filters.text & ~Filters.command, end_reg_davp_avp)],
##DEL
            END_DEL_FM_DAVINA: [MessageHandler(Filters.text & ~Filters.command, end_del_fm_davina)],
            END_DEL_FM_GRAFANA: [MessageHandler(Filters.text & ~Filters.command, end_del_fm_grafana)],
            END_DEL_FM_INAP: [MessageHandler(Filters.text & ~Filters.command, end_del_fm_inap)],
            END_DEL_FM_INEOM: [MessageHandler(Filters.text & ~Filters.command, end_del_fm_ineom)],
            END_DEL_FM_NACEL: [MessageHandler(Filters.text & ~Filters.command, end_del_fm_nacel)],
            END_DEL_FM_NADIN: [MessageHandler(Filters.text & ~Filters.command, end_del_fm_nadin)],
            END_DEL_FM_SYANTIC: [MessageHandler(Filters.text & ~Filters.command, end_del_fm_syantic)],
            END_DEL_FM_TABLUE: [MessageHandler(Filters.text & ~Filters.command, end_del_fm_tablue)],
            END_DEL_FM_OSSERA: [MessageHandler(Filters.text & ~Filters.command, end_del_fm_ossera)],
            ##
            END_DEL_C_CHRONO: [MessageHandler(Filters.text & ~Filters.command, end_del_c_chrono)],
            END_DEL_C_CRQ: [MessageHandler(Filters.text & ~Filters.command, end_del_c_crq)],
            END_DEL_C_LACIMA: [MessageHandler(Filters.text & ~Filters.command, end_del_c_lacima)],
            END_DEL_C_NAVA: [MessageHandler(Filters.text & ~Filters.command, end_del_c_nava)],
            END_DEL_C_TRAVERSA: [MessageHandler(Filters.text & ~Filters.command, end_del_c_traversa)],
            ##
            END_DEL_A_AGATA: [MessageHandler(Filters.text & ~Filters.command, end_del_a_agata)],
            END_DEL_A_AMESTY: [MessageHandler(Filters.text & ~Filters.command, end_del_a_amesty)],
            END_DEL_A_DAVINCI: [MessageHandler(Filters.text & ~Filters.command, end_del_a_davinci)],
            END_DEL_A_EATP: [MessageHandler(Filters.text & ~Filters.command, end_del_a_eatp)],
            END_DEL_A_ETSA: [MessageHandler(Filters.text & ~Filters.command, end_del_a_etsa)],
            END_DEL_A_EWONDER: [MessageHandler(Filters.text & ~Filters.command, end_del_a_ewonder)],
            END_DEL_A_FELISA: [MessageHandler(Filters.text & ~Filters.command, end_del_a_felisa)],
            END_DEL_A_FIOLA: [MessageHandler(Filters.text & ~Filters.command, end_del_a_fiola)],
            END_DEL_A_LOLITA: [MessageHandler(Filters.text & ~Filters.command, end_del_a_lolita)],
            END_DEL_A_SCARLET: [MessageHandler(Filters.text & ~Filters.command, end_del_a_scarlet)],
            END_DEL_A_SMARTKEY: [MessageHandler(Filters.text & ~Filters.command, end_del_a_smartkey)],
            END_DEL_A_TIARA: [MessageHandler(Filters.text & ~Filters.command, end_del_a_tiara)],
            END_DEL_A_TPAS: [MessageHandler(Filters.text & ~Filters.command, end_del_a_tpas)],
            END_DEL_A_TPOWER: [MessageHandler(Filters.text & ~Filters.command, end_del_a_tpower)],
            ##
            END_DEL_PM_ARTHEMIS: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_arthemis)],
            END_DEL_PM_COVMO: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_covmo)],
            END_DEL_PM_CSONE: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_csone)],
            END_DEL_PM_EVITA: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_evita)],
            END_DEL_PM_IPDM: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_ipdm)],
            END_DEL_PM_IRONMAN: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_ironman)],
            END_DEL_PM_KALIX: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_kalix)],
            END_DEL_PM_OOKLA: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_ookla)],
            END_DEL_PM_SMARTCARE: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_smartcare)],
            END_DEL_PM_SUROPATI: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_suropati)],
            END_DEL_PM_TRAFFICA: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_traffica)],
            END_DEL_PM_TWAMP: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_twamp)],
            END_DEL_PM_ZABBIX: [MessageHandler(Filters.text & ~Filters.command, end_del_pm_zabbix)],
            ##
            END_DEL_DS_KAFKA: [MessageHandler(Filters.text & ~Filters.command, end_del_ds_kafka)],
            END_DEL_DS_NDL: [MessageHandler(Filters.text & ~Filters.command, end_del_ds_ndl)],
            END_DEL_DS_NDM: [MessageHandler(Filters.text & ~Filters.command, end_del_ds_ndm)],
            END_DEL_DS_OSS: [MessageHandler(Filters.text & ~Filters.command, end_del_ds_oss)],
            END_DEL_DS_IXIA: [MessageHandler(Filters.text & ~Filters.command, end_del_ds_ixia)],
            ##
            END_DEL_TS_CTS: [MessageHandler(Filters.text & ~Filters.command, end_del_ts_cts)],
            END_DEL_TS_REMEDY: [MessageHandler(Filters.text & ~Filters.command, end_del_ts_remedy)],
            END_DEL_TS_SDM: [MessageHandler(Filters.text & ~Filters.command, end_del_ts_sdm)],
            ##
            END_DEL_DAVP_AVP: [MessageHandler(Filters.text & ~Filters.command, end_del_davp_avp)],
##DATA SOURCE
            END_KAFKA: [MessageHandler(Filters.text & ~Filters.command, end_kafka)],
            END_NDM: [MessageHandler(Filters.text & ~Filters.command, end_ndm)],
            END_NDL: [MessageHandler(Filters.text & ~Filters.command, end_ndl)],
            END_OSS: [MessageHandler(Filters.text & ~Filters.command, end_oss)],
            END_IXIA: [MessageHandler(Filters.text & ~Filters.command, end_ixia)],
##TICKETING SYSTEM
            END_CTS: [MessageHandler(Filters.text & ~Filters.command, end_cts)],
            END_REMEDY: [MessageHandler(Filters.text & ~Filters.command, end_remedy)],
            END_SDM: [MessageHandler(Filters.text & ~Filters.command, end_sdm)],
##DASHBOARD AVP
            END_DAVP: [MessageHandler(Filters.text & ~Filters.command, end_davp)],

            M5_SM_REQ_USER_USD: [MessageHandler(Filters.text & ~Filters.command, m5_sm_req_user_usd)],
            # M5_SM_REQ_USER_CTGAPP: [MessageHandler(Filters.text & ~Filters.command, m5_sm_req_user_ctgapp)],
            M5_SM_REQ_USER_URL: [MessageHandler(Filters.text & ~Filters.command, m5_sm_req_user_url)],
            M5_SM_REQ_USER_DSP: [MessageHandler(Filters.text & ~Filters.command, m5_sm_req_user_dsp)],

            M5_SM_CLOSEDREQUSER_USD: [MessageHandler(Filters.text & ~Filters.command, m5_sm_closedrequser_usd)],
            END_M2_C_CHRONO_CHECK: [MessageHandler(Filters.text & ~Filters.command, end_m2_c_chrono_check)],

            

            CLOSED_ADMIN_TICKET: [MessageHandler(Filters.text & ~Filters.command, closed_admin_ticket)],
            CLOSED_ADMIN_TICKET_END: [MessageHandler(Filters.text & ~Filters.command, closed_admin_ticket_end)],
            FEEDBACK: [MessageHandler(Filters.text & ~Filters.command, feedback)],
            ConversationHandler.TIMEOUT: [MessageHandler(Filters.text | Filters.command, timeout),
            CallbackQueryHandler(timeout_with_inline)]},
        fallbacks=[CommandHandler('cancel', cancel)],conversation_timeout=60)
    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()